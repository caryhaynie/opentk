#region License
//THIS FILE IS AUTOMATICALLY GENERATED
//DO NOT EDIT BY HAND!!
//See license.txt for license info
#endregion

using System;
using System.Runtime.InteropServices;
using System.Text;

    #region Types
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;
    #endregion

namespace OpenTK.OpenGL
{
    static public partial class GL
    {
        #region Function signatures

        public static class Delegates
        {
            public delegate void NewList(GLuint list, Enums.ListMode mode);
            public delegate void EndList();
            public delegate void CallList(GLuint list);
            public delegate void CallLists_(GLsizei n, Enums.ListNameType type, IntPtr lists);
            public delegate void DeleteLists(GLuint list, GLsizei range);
            public delegate GLuint GenLists(GLsizei range);
            public delegate void ListBase(GLuint @base);
            public delegate void Begin(Enums.BeginMode mode);
            public delegate void Bitmap_(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);
            public delegate void Color3b(GLbyte red, GLbyte green, GLbyte blue);
            public delegate void Color3bv_(IntPtr v);
            public delegate void Color3d(GLdouble red, GLdouble green, GLdouble blue);
            public delegate void Color3dv_(IntPtr v);
            public delegate void Color3f(GLfloat red, GLfloat green, GLfloat blue);
            public delegate void Color3fv_(IntPtr v);
            public delegate void Color3i(GLint red, GLint green, GLint blue);
            public delegate void Color3iv_(IntPtr v);
            public delegate void Color3s(GLshort red, GLshort green, GLshort blue);
            public delegate void Color3sv_(IntPtr v);
            public delegate void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
            public delegate void Color3ubv_(IntPtr v);
            public delegate void Color3ui(GLuint red, GLuint green, GLuint blue);
            public delegate void Color3uiv_(IntPtr v);
            public delegate void Color3us(GLushort red, GLushort green, GLushort blue);
            public delegate void Color3usv_(IntPtr v);
            public delegate void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
            public delegate void Color4bv_(IntPtr v);
            public delegate void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
            public delegate void Color4dv_(IntPtr v);
            public delegate void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            public delegate void Color4fv_(IntPtr v);
            public delegate void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
            public delegate void Color4iv_(IntPtr v);
            public delegate void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
            public delegate void Color4sv_(IntPtr v);
            public delegate void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
            public delegate void Color4ubv_(IntPtr v);
            public delegate void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
            public delegate void Color4uiv_(IntPtr v);
            public delegate void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
            public delegate void Color4usv_(IntPtr v);
            public delegate void EdgeFlag(Enums.Boolean flag);
            public delegate void EdgeFlagv_(IntPtr flag);
            public delegate void End();
            public delegate void Indexd(GLdouble c);
            public delegate void Indexdv_(IntPtr c);
            public delegate void Indexf(GLfloat c);
            public delegate void Indexfv_(IntPtr c);
            public delegate void Indexi(GLint c);
            public delegate void Indexiv_(IntPtr c);
            public delegate void Indexs(GLshort c);
            public delegate void Indexsv_(IntPtr c);
            public delegate void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
            public delegate void Normal3bv_(IntPtr v);
            public delegate void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
            public delegate void Normal3dv_(IntPtr v);
            public delegate void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
            public delegate void Normal3fv_(IntPtr v);
            public delegate void Normal3i(GLint nx, GLint ny, GLint nz);
            public delegate void Normal3iv_(IntPtr v);
            public delegate void Normal3s(GLshort nx, GLshort ny, GLshort nz);
            public delegate void Normal3sv_(IntPtr v);
            public delegate void RasterPos2d(GLdouble x, GLdouble y);
            public delegate void RasterPos2dv_(IntPtr v);
            public delegate void RasterPos2f(GLfloat x, GLfloat y);
            public delegate void RasterPos2fv_(IntPtr v);
            public delegate void RasterPos2i(GLint x, GLint y);
            public delegate void RasterPos2iv_(IntPtr v);
            public delegate void RasterPos2s(GLshort x, GLshort y);
            public delegate void RasterPos2sv_(IntPtr v);
            public delegate void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
            public delegate void RasterPos3dv_(IntPtr v);
            public delegate void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
            public delegate void RasterPos3fv_(IntPtr v);
            public delegate void RasterPos3i(GLint x, GLint y, GLint z);
            public delegate void RasterPos3iv_(IntPtr v);
            public delegate void RasterPos3s(GLshort x, GLshort y, GLshort z);
            public delegate void RasterPos3sv_(IntPtr v);
            public delegate void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void RasterPos4dv_(IntPtr v);
            public delegate void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void RasterPos4fv_(IntPtr v);
            public delegate void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
            public delegate void RasterPos4iv_(IntPtr v);
            public delegate void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void RasterPos4sv_(IntPtr v);
            public delegate void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
            public delegate void Rectdv_(IntPtr v1, IntPtr v2);
            public delegate void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
            public delegate void Rectfv_(IntPtr v1, IntPtr v2);
            public delegate void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
            public delegate void Rectiv_(IntPtr v1, IntPtr v2);
            public delegate void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
            public delegate void Rectsv_(IntPtr v1, IntPtr v2);
            public delegate void TexCoord1d(GLdouble s);
            public delegate void TexCoord1dv_(IntPtr v);
            public delegate void TexCoord1f(GLfloat s);
            public delegate void TexCoord1fv_(IntPtr v);
            public delegate void TexCoord1i(GLint s);
            public delegate void TexCoord1iv_(IntPtr v);
            public delegate void TexCoord1s(GLshort s);
            public delegate void TexCoord1sv_(IntPtr v);
            public delegate void TexCoord2d(GLdouble s, GLdouble t);
            public delegate void TexCoord2dv_(IntPtr v);
            public delegate void TexCoord2f(GLfloat s, GLfloat t);
            public delegate void TexCoord2fv_(IntPtr v);
            public delegate void TexCoord2i(GLint s, GLint t);
            public delegate void TexCoord2iv_(IntPtr v);
            public delegate void TexCoord2s(GLshort s, GLshort t);
            public delegate void TexCoord2sv_(IntPtr v);
            public delegate void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
            public delegate void TexCoord3dv_(IntPtr v);
            public delegate void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
            public delegate void TexCoord3fv_(IntPtr v);
            public delegate void TexCoord3i(GLint s, GLint t, GLint r);
            public delegate void TexCoord3iv_(IntPtr v);
            public delegate void TexCoord3s(GLshort s, GLshort t, GLshort r);
            public delegate void TexCoord3sv_(IntPtr v);
            public delegate void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public delegate void TexCoord4dv_(IntPtr v);
            public delegate void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public delegate void TexCoord4fv_(IntPtr v);
            public delegate void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
            public delegate void TexCoord4iv_(IntPtr v);
            public delegate void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
            public delegate void TexCoord4sv_(IntPtr v);
            public delegate void Vertex2d(GLdouble x, GLdouble y);
            public delegate void Vertex2dv_(IntPtr v);
            public delegate void Vertex2f(GLfloat x, GLfloat y);
            public delegate void Vertex2fv_(IntPtr v);
            public delegate void Vertex2i(GLint x, GLint y);
            public delegate void Vertex2iv_(IntPtr v);
            public delegate void Vertex2s(GLshort x, GLshort y);
            public delegate void Vertex2sv_(IntPtr v);
            public delegate void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
            public delegate void Vertex3dv_(IntPtr v);
            public delegate void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
            public delegate void Vertex3fv_(IntPtr v);
            public delegate void Vertex3i(GLint x, GLint y, GLint z);
            public delegate void Vertex3iv_(IntPtr v);
            public delegate void Vertex3s(GLshort x, GLshort y, GLshort z);
            public delegate void Vertex3sv_(IntPtr v);
            public delegate void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void Vertex4dv_(IntPtr v);
            public delegate void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void Vertex4fv_(IntPtr v);
            public delegate void Vertex4i(GLint x, GLint y, GLint z, GLint w);
            public delegate void Vertex4iv_(IntPtr v);
            public delegate void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void Vertex4sv_(IntPtr v);
            public delegate void ClipPlane_(Enums.ClipPlaneName plane, IntPtr equation);
            public delegate void ColorMaterial(Enums.MaterialFace face, Enums.ColorMaterialParameter mode);
            public delegate void CullFace(Enums.CullFaceMode mode);
            public delegate void Fogf(Enums.FogParameter pname, GLfloat param);
            public delegate void Fogfv_(Enums.FogParameter pname, IntPtr parameters);
            public delegate void Fogi(Enums.FogParameter pname, GLint param);
            public delegate void Fogiv_(Enums.FogParameter pname, IntPtr parameters);
            public delegate void FrontFace(Enums.FrontFaceDirection mode);
            public delegate void Hint(Enums.HintTarget target, Enums.HintMode mode);
            public delegate void Lightf(Enums.LightName light, Enums.LightParameter pname, GLfloat param);
            public delegate void Lightfv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            public delegate void Lighti(Enums.LightName light, Enums.LightParameter pname, GLint param);
            public delegate void Lightiv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            public delegate void LightModelf(Enums.LightModelParameter pname, GLfloat param);
            public delegate void LightModelfv_(Enums.LightModelParameter pname, IntPtr parameters);
            public delegate void LightModeli(Enums.LightModelParameter pname, GLint param);
            public delegate void LightModeliv_(Enums.LightModelParameter pname, IntPtr parameters);
            public delegate void LineStipple_(GLint factor, GLushort pattern);
            public delegate void LineWidth(GLfloat width);
            public delegate void Materialf(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
            public delegate void Materialfv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void Materiali(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
            public delegate void Materialiv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void PointSize(GLfloat size);
            public delegate void PolygonMode(Enums.MaterialFace face, Enums.PolygonMode mode);
            public delegate void PolygonStipple_(IntPtr mask);
            public delegate void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void ShadeModel(Enums.ShadingModel mode);
            public delegate void TexParameterf(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat param);
            public delegate void TexParameterfv_(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters);
            public delegate void TexParameteri(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint param);
            public delegate void TexParameteriv_(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters);
            public delegate void TexImage1D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexImage2D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexEnvf(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat param);
            public delegate void TexEnvfv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            public delegate void TexEnvi(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint param);
            public delegate void TexEnviv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            public delegate void TexGend(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble param);
            public delegate void TexGendv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void TexGenf(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat param);
            public delegate void TexGenfv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void TexGeni(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint param);
            public delegate void TexGeniv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void FeedbackBuffer_(GLsizei size, Enums.FeedbackType type, IntPtr buffer);
            public delegate void SelectBuffer_(GLsizei size, IntPtr buffer);
            public delegate GLint RenderMode(Enums.RenderingMode mode);
            public delegate void InitNames();
            public delegate void LoadName(GLuint name);
            public delegate void PassThrough(GLfloat token);
            public delegate void PopName();
            public delegate void PushName(GLuint name);
            public delegate void DrawBuffer(Enums.DrawBufferMode mode);
            public delegate void Clear(Enums.ClearBufferMask mask);
            public delegate void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            public delegate void ClearIndex(GLfloat c);
            public delegate void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public delegate void ClearStencil(GLint s);
            public delegate void ClearDepth(GLclampd depth);
            public delegate void StencilMask(GLuint mask);
            public delegate void ColorMask(Enums.Boolean red, Enums.Boolean green, Enums.Boolean blue, Enums.Boolean alpha);
            public delegate void DepthMask(Enums.Boolean flag);
            public delegate void IndexMask(GLuint mask);
            public delegate void Accum(Enums.AccumOp op, GLfloat value);
            public delegate void Disable(Enums.EnableCap cap);
            public delegate void Enable(Enums.EnableCap cap);
            public delegate void Finish();
            public delegate void Flush();
            public delegate void PopAttrib();
            public delegate void PushAttrib(Enums.AttribMask mask);
            public delegate void Map1d_(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);
            public delegate void Map1f_(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);
            public delegate void Map2d_(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);
            public delegate void Map2f_(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);
            public delegate void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
            public delegate void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
            public delegate void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
            public delegate void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
            public delegate void EvalCoord1d(GLdouble u);
            public delegate void EvalCoord1dv_(IntPtr u);
            public delegate void EvalCoord1f(GLfloat u);
            public delegate void EvalCoord1fv_(IntPtr u);
            public delegate void EvalCoord2d(GLdouble u, GLdouble v);
            public delegate void EvalCoord2dv_(IntPtr u);
            public delegate void EvalCoord2f(GLfloat u, GLfloat v);
            public delegate void EvalCoord2fv_(IntPtr u);
            public delegate void EvalMesh1(Enums.MeshMode1 mode, GLint i1, GLint i2);
            public delegate void EvalPoint1(GLint i);
            public delegate void EvalMesh2(Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2);
            public delegate void EvalPoint2(GLint i, GLint j);
            public delegate void AlphaFunc(Enums.AlphaFunction func, GLclampf reference);
            public delegate void BlendFunc(Enums.BlendingFactorSrc sfactor, Enums.BlendingFactorDest dfactor);
            public delegate void LogicOp(Enums.LogicOp opcode);
            public delegate void StencilFunc(Enums.StencilFunction func, GLint reference, GLuint mask);
            public delegate void StencilOp(Enums.StencilOp fail, Enums.StencilOp zfail, Enums.StencilOp zpass);
            public delegate void DepthFunc(Enums.DepthFunction func);
            public delegate void PixelZoom(GLfloat xfactor, GLfloat yfactor);
            public delegate void PixelTransferf(Enums.PixelTransferParameter pname, GLfloat param);
            public delegate void PixelTransferi(Enums.PixelTransferParameter pname, GLint param);
            public delegate void PixelStoref(Enums.PixelStoreParameter pname, GLfloat param);
            public delegate void PixelStorei(Enums.PixelStoreParameter pname, GLint param);
            public delegate void PixelMapfv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            public delegate void PixelMapuiv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            public delegate void PixelMapusv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            public delegate void ReadBuffer(Enums.ReadBufferMode mode);
            public delegate void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelCopyType type);
            public delegate void ReadPixels_(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void DrawPixels_(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void GetBooleanv_(Enums.GetPName pname, IntPtr parameters);
            public delegate void GetClipPlane_(Enums.ClipPlaneName plane, IntPtr equation);
            public delegate void GetDoublev_(Enums.GetPName pname, IntPtr parameters);
            public delegate GLenum GetError();
            public delegate void GetFloatv_(Enums.GetPName pname, IntPtr parameters);
            public delegate void GetIntegerv_(Enums.GetPName pname, IntPtr parameters);
            public delegate void GetLightfv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            public delegate void GetLightiv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            public delegate void GetMapdv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            public delegate void GetMapfv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            public delegate void GetMapiv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            public delegate void GetMaterialfv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void GetMaterialiv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void GetPixelMapfv_(Enums.PixelMap map, IntPtr values);
            public delegate void GetPixelMapuiv_(Enums.PixelMap map, IntPtr values);
            public delegate void GetPixelMapusv_(Enums.PixelMap map, IntPtr values);
            public delegate void GetPolygonStipple_(IntPtr mask);
            public delegate IntPtr GetString_(Enums.StringName name);
            public delegate void GetTexEnvfv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            public delegate void GetTexEnviv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            public delegate void GetTexGendv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void GetTexGenfv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void GetTexGeniv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            public delegate void GetTexImage_(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void GetTexParameterfv_(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters);
            public delegate void GetTexParameteriv_(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters);
            public delegate void GetTexLevelParameterfv_(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters);
            public delegate void GetTexLevelParameteriv_(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters);
            public delegate GLboolean IsEnabled(Enums.EnableCap cap);
            public delegate GLboolean IsList(GLuint list);
            public delegate void DepthRange(GLclampd near, GLclampd far);
            public delegate void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            public delegate void LoadIdentity();
            public delegate void LoadMatrixf_(IntPtr m);
            public delegate void LoadMatrixd_(IntPtr m);
            public delegate void MatrixMode(Enums.MatrixMode mode);
            public delegate void MultMatrixf_(IntPtr m);
            public delegate void MultMatrixd_(IntPtr m);
            public delegate void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            public delegate void PopMatrix();
            public delegate void PushMatrix();
            public delegate void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
            public delegate void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
            public delegate void Scaled(GLdouble x, GLdouble y, GLdouble z);
            public delegate void Scalef(GLfloat x, GLfloat y, GLfloat z);
            public delegate void Translated(GLdouble x, GLdouble y, GLdouble z);
            public delegate void Translatef(GLfloat x, GLfloat y, GLfloat z);
            public delegate void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void ArrayElement(GLint i);
            public delegate void ColorPointer_(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void DisableClientState(Enums.EnableCap array);
            public delegate void DrawArrays(Enums.BeginMode mode, GLint first, GLsizei count);
            public delegate void DrawElements_(Enums.BeginMode mode, GLsizei count, GLenum type, IntPtr indices);
            public delegate void EdgeFlagPointer_(GLsizei stride, IntPtr pointer);
            public delegate void EnableClientState(Enums.EnableCap array);
            public delegate void GetPointerv_(Enums.GetPointervPName pname, IntPtr parameters);
            public delegate void IndexPointer_(Enums.IndexPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void InterleavedArrays_(Enums.InterleavedArrayFormat format, GLsizei stride, IntPtr pointer);
            public delegate void NormalPointer_(Enums.NormalPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void TexCoordPointer_(GLint size, Enums.TexCoordPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void VertexPointer_(GLint size, Enums.VertexPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void PolygonOffset(GLfloat factor, GLfloat units);
            public delegate void CopyTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
            public delegate void CopyTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
            public delegate void CopyTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
            public delegate void CopyTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void TexSubImage1D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexSubImage2D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate GLboolean AreTexturesResident_(GLsizei n, IntPtr textures, IntPtr residences);
            public delegate void BindTexture(Enums.TextureTarget target, GLuint texture);
            public delegate void DeleteTextures_(GLsizei n, IntPtr textures);
            public delegate void GenTextures_(GLsizei n, IntPtr textures);
            public delegate GLboolean IsTexture(GLuint texture);
            public delegate void PrioritizeTextures_(GLsizei n, IntPtr textures, IntPtr priorities);
            public delegate void Indexub(GLubyte c);
            public delegate void Indexubv_(IntPtr c);
            public delegate void PopClientAttrib();
            public delegate void PushClientAttrib(Enums.ClientAttribMask mask);
            public delegate void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public delegate void BlendEquation(GLenum mode);
            public delegate void DrawRangeElements_(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);
            public delegate void ColorTable_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            public delegate void ColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void ColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void CopyColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            public delegate void GetColorTable_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            public delegate void GetColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void ColorSubTable_(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data);
            public delegate void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
            public delegate void ConvolutionFilter1D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void ConvolutionFilter2D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);
            public delegate void ConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void ConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);
            public delegate void ConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void CopyConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            public delegate void CopyConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void GetConvolutionFilter_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void GetConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetSeparableFilter_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span);
            public delegate void SeparableFilter2D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column);
            public delegate void GetHistogram_(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            public delegate void GetHistogramParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetHistogramParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetMinmax_(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            public delegate void GetMinmaxParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetMinmaxParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void Histogram(GLenum target, GLsizei width, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            public delegate void Minmax(GLenum target, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            public delegate void ResetHistogram(GLenum target);
            public delegate void ResetMinmax(GLenum target);
            public delegate void TexImage3D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexSubImage3D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void CopyTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void ActiveTexture(GLenum texture);
            public delegate void ClientActiveTexture(GLenum texture);
            public delegate void MultiTexCoord1d(GLenum target, GLdouble s);
            public delegate void MultiTexCoord1dv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1f(GLenum target, GLfloat s);
            public delegate void MultiTexCoord1fv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1i(GLenum target, GLint s);
            public delegate void MultiTexCoord1iv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1s(GLenum target, GLshort s);
            public delegate void MultiTexCoord1sv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
            public delegate void MultiTexCoord2dv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
            public delegate void MultiTexCoord2fv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2i(GLenum target, GLint s, GLint t);
            public delegate void MultiTexCoord2iv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
            public delegate void MultiTexCoord2sv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
            public delegate void MultiTexCoord3dv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
            public delegate void MultiTexCoord3fv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
            public delegate void MultiTexCoord3iv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
            public delegate void MultiTexCoord3sv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public delegate void MultiTexCoord4dv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public delegate void MultiTexCoord4fv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
            public delegate void MultiTexCoord4iv_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
            public delegate void MultiTexCoord4sv_(GLenum target, IntPtr v);
            public delegate void LoadTransposeMatrixf_(IntPtr m);
            public delegate void LoadTransposeMatrixd_(IntPtr m);
            public delegate void MultTransposeMatrixf_(IntPtr m);
            public delegate void MultTransposeMatrixd_(IntPtr m);
            public delegate void SampleCoverage(GLclampf value, Enums.Boolean invert);
            public delegate void CompressedTexImage3D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexImage2D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexImage1D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage3D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage2D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage1D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void GetCompressedTexImage_(Enums.TextureTarget target, GLint level, IntPtr img);
            public delegate void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public delegate void FogCoordf(GLfloat coord);
            public delegate void FogCoordfv_(IntPtr coord);
            public delegate void FogCoordd(GLdouble coord);
            public delegate void FogCoorddv_(IntPtr coord);
            public delegate void FogCoordPointer_(GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void MultiDrawArrays_(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount);
            public delegate void MultiDrawElements_(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);
            public delegate void PointParameterf(GLenum pname, GLfloat param);
            public delegate void PointParameterfv_(GLenum pname, IntPtr parameters);
            public delegate void PointParameteri(GLenum pname, GLint param);
            public delegate void PointParameteriv_(GLenum pname, IntPtr parameters);
            public delegate void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
            public delegate void SecondaryColor3bv_(IntPtr v);
            public delegate void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
            public delegate void SecondaryColor3dv_(IntPtr v);
            public delegate void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
            public delegate void SecondaryColor3fv_(IntPtr v);
            public delegate void SecondaryColor3i(GLint red, GLint green, GLint blue);
            public delegate void SecondaryColor3iv_(IntPtr v);
            public delegate void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
            public delegate void SecondaryColor3sv_(IntPtr v);
            public delegate void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
            public delegate void SecondaryColor3ubv_(IntPtr v);
            public delegate void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
            public delegate void SecondaryColor3uiv_(IntPtr v);
            public delegate void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
            public delegate void SecondaryColor3usv_(IntPtr v);
            public delegate void SecondaryColorPointer_(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void WindowPos2d(GLdouble x, GLdouble y);
            public delegate void WindowPos2dv_(IntPtr v);
            public delegate void WindowPos2f(GLfloat x, GLfloat y);
            public delegate void WindowPos2fv_(IntPtr v);
            public delegate void WindowPos2i(GLint x, GLint y);
            public delegate void WindowPos2iv_(IntPtr v);
            public delegate void WindowPos2s(GLshort x, GLshort y);
            public delegate void WindowPos2sv_(IntPtr v);
            public delegate void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
            public delegate void WindowPos3dv_(IntPtr v);
            public delegate void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
            public delegate void WindowPos3fv_(IntPtr v);
            public delegate void WindowPos3i(GLint x, GLint y, GLint z);
            public delegate void WindowPos3iv_(IntPtr v);
            public delegate void WindowPos3s(GLshort x, GLshort y, GLshort z);
            public delegate void WindowPos3sv_(IntPtr v);
            public delegate void GenQueries_(GLsizei n, IntPtr ids);
            public delegate void DeleteQueries_(GLsizei n, IntPtr ids);
            public delegate GLboolean IsQuery(GLuint id);
            public delegate void BeginQuery(Enums.VERSION_1_5 target, GLuint id);
            public delegate void EndQuery(Enums.VERSION_1_5 target);
            public delegate void GetQueryiv_(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, IntPtr parameters);
            public delegate void GetQueryObjectiv_(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters);
            public delegate void GetQueryObjectuiv_(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters);
            public delegate void BindBuffer(GLenum target, GLuint buffer);
            public delegate void DeleteBuffers_(GLsizei n, IntPtr buffers);
            public delegate void GenBuffers_(GLsizei n, IntPtr buffers);
            public delegate GLboolean IsBuffer(GLuint buffer);
            public delegate void BufferData_(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);
            public delegate void BufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            public delegate void GetBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            public delegate IntPtr MapBuffer(GLenum target, GLenum access);
            public delegate GLboolean UnmapBuffer(GLenum target);
            public delegate void GetBufferParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetBufferPointerv_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void BlendEquationSeparate(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
            public delegate void DrawBuffers_(GLsizei n, IntPtr bufs);
            public delegate void StencilOpSeparate(GLenum face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
            public delegate void StencilFuncSeparate(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint reference, GLuint mask);
            public delegate void StencilMaskSeparate(GLenum face, GLuint mask);
            public delegate void AttachShader(GLuint program, GLuint shader);
            public delegate void BindAttribLocation(GLuint program, GLuint index, string name);
            public delegate void CompileShader(GLuint shader);
            public delegate GLuint CreateProgram();
            public delegate GLuint CreateShader(Enums.VERSION_2_0 type);
            public delegate void DeleteProgram(GLuint program);
            public delegate void DeleteShader(GLuint shader);
            public delegate void DetachShader(GLuint program, GLuint shader);
            public delegate void DisableVertexAttribArray(GLuint index);
            public delegate void EnableVertexAttribArray(GLuint index);
            public delegate void GetActiveAttrib_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public delegate void GetActiveUniform_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public delegate void GetAttachedShaders_(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);
            public delegate GLint GetAttribLocation(GLuint program, string name);
            public delegate void GetProgramiv_(GLuint program, Enums.VERSION_2_0 pname, IntPtr parameters);
            public delegate void GetProgramInfoLog_(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            public delegate void GetShaderiv_(GLuint shader, Enums.VERSION_2_0 pname, IntPtr parameters);
            public delegate void GetShaderInfoLog_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            public delegate void GetShaderSource_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);
            public delegate GLint GetUniformLocation(GLuint program, string name);
            public delegate void GetUniformfv_(GLuint program, GLint location, IntPtr parameters);
            public delegate void GetUniformiv_(GLuint program, GLint location, IntPtr parameters);
            public delegate void GetVertexAttribdv_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribfv_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribiv_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribPointerv_(GLuint index, GLenum pname, IntPtr pointer);
            public delegate GLboolean IsProgram(GLuint program);
            public delegate GLboolean IsShader(GLuint shader);
            public delegate void LinkProgram(GLuint program);
            public delegate void ShaderSource_(GLuint shader, GLsizei count, string[] @string, IntPtr length);
            public delegate void UseProgram(GLuint program);
            public delegate void Uniform1f(GLint location, GLfloat v0);
            public delegate void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
            public delegate void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
            public delegate void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
            public delegate void Uniform1i(GLint location, GLint v0);
            public delegate void Uniform2i(GLint location, GLint v0, GLint v1);
            public delegate void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
            public delegate void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
            public delegate void Uniform1fv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform2fv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform3fv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform4fv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform1iv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform2iv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform3iv_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform4iv_(GLint location, GLsizei count, IntPtr value);
            public delegate void UniformMatrix2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void ValidateProgram(GLuint program);
            public delegate void VertexAttrib1d(GLuint index, GLdouble x);
            public delegate void VertexAttrib1dv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1f(GLuint index, GLfloat x);
            public delegate void VertexAttrib1fv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1s(GLuint index, GLshort x);
            public delegate void VertexAttrib1sv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
            public delegate void VertexAttrib2dv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
            public delegate void VertexAttrib2fv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
            public delegate void VertexAttrib2sv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public delegate void VertexAttrib3dv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public delegate void VertexAttrib3fv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
            public delegate void VertexAttrib3sv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Nbv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Niv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Nsv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public delegate void VertexAttrib4Nubv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Nuiv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4Nusv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4bv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void VertexAttrib4dv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void VertexAttrib4fv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4iv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void VertexAttrib4sv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4ubv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4uiv_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4usv_(GLuint index, IntPtr v);
            public delegate void VertexAttribPointer_(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer);
            public delegate void UniformMatrix2x3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix3x2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix2x4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix4x2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix3x4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix4x3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
        }
        #endregion

        #region Imports

        internal class Imports
        {
            [DllImport("opengl32.dll", EntryPoint = "glNewList")]
            public static extern void NewList(GLuint list, Enums.ListMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glEndList")]
            public static extern void EndList();
            [DllImport("opengl32.dll", EntryPoint = "glCallList")]
            public static extern void CallList(GLuint list);
            [DllImport("opengl32.dll", EntryPoint = "glCallLists")]
            public static extern void CallLists_(GLsizei n, Enums.ListNameType type, IntPtr lists);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteLists")]
            public static extern void DeleteLists(GLuint list, GLsizei range);
            [DllImport("opengl32.dll", EntryPoint = "glGenLists")]
            public static extern GLuint GenLists(GLsizei range);
            [DllImport("opengl32.dll", EntryPoint = "glListBase")]
            public static extern void ListBase(GLuint @base);
            [DllImport("opengl32.dll", EntryPoint = "glBegin")]
            public static extern void Begin(Enums.BeginMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glBitmap")]
            public static extern void Bitmap_(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);
            [DllImport("opengl32.dll", EntryPoint = "glColor3b")]
            public static extern void Color3b(GLbyte red, GLbyte green, GLbyte blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3bv")]
            public static extern void Color3bv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3d")]
            public static extern void Color3d(GLdouble red, GLdouble green, GLdouble blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3dv")]
            public static extern void Color3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3f")]
            public static extern void Color3f(GLfloat red, GLfloat green, GLfloat blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3fv")]
            public static extern void Color3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3i")]
            public static extern void Color3i(GLint red, GLint green, GLint blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3iv")]
            public static extern void Color3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3s")]
            public static extern void Color3s(GLshort red, GLshort green, GLshort blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3sv")]
            public static extern void Color3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3ub")]
            public static extern void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3ubv")]
            public static extern void Color3ubv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3ui")]
            public static extern void Color3ui(GLuint red, GLuint green, GLuint blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3uiv")]
            public static extern void Color3uiv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor3us")]
            public static extern void Color3us(GLushort red, GLushort green, GLushort blue);
            [DllImport("opengl32.dll", EntryPoint = "glColor3usv")]
            public static extern void Color3usv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4b")]
            public static extern void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4bv")]
            public static extern void Color4bv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4d")]
            public static extern void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4dv")]
            public static extern void Color4dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4f")]
            public static extern void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4fv")]
            public static extern void Color4fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4i")]
            public static extern void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4iv")]
            public static extern void Color4iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4s")]
            public static extern void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4sv")]
            public static extern void Color4sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4ub")]
            public static extern void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4ubv")]
            public static extern void Color4ubv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4ui")]
            public static extern void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4uiv")]
            public static extern void Color4uiv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glColor4us")]
            public static extern void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
            [DllImport("opengl32.dll", EntryPoint = "glColor4usv")]
            public static extern void Color4usv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glEdgeFlag")]
            public static extern void EdgeFlag(Enums.Boolean flag);
            [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv")]
            public static extern void EdgeFlagv_(IntPtr flag);
            [DllImport("opengl32.dll", EntryPoint = "glEnd")]
            public static extern void End();
            [DllImport("opengl32.dll", EntryPoint = "glIndexd")]
            public static extern void Indexd(GLdouble c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexdv")]
            public static extern void Indexdv_(IntPtr c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexf")]
            public static extern void Indexf(GLfloat c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexfv")]
            public static extern void Indexfv_(IntPtr c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexi")]
            public static extern void Indexi(GLint c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexiv")]
            public static extern void Indexiv_(IntPtr c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexs")]
            public static extern void Indexs(GLshort c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexsv")]
            public static extern void Indexsv_(IntPtr c);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3b")]
            public static extern void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3bv")]
            public static extern void Normal3bv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3d")]
            public static extern void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3dv")]
            public static extern void Normal3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3f")]
            public static extern void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3fv")]
            public static extern void Normal3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3i")]
            public static extern void Normal3i(GLint nx, GLint ny, GLint nz);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3iv")]
            public static extern void Normal3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3s")]
            public static extern void Normal3s(GLshort nx, GLshort ny, GLshort nz);
            [DllImport("opengl32.dll", EntryPoint = "glNormal3sv")]
            public static extern void Normal3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2d")]
            public static extern void RasterPos2d(GLdouble x, GLdouble y);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2dv")]
            public static extern void RasterPos2dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2f")]
            public static extern void RasterPos2f(GLfloat x, GLfloat y);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2fv")]
            public static extern void RasterPos2fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2i")]
            public static extern void RasterPos2i(GLint x, GLint y);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2iv")]
            public static extern void RasterPos2iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2s")]
            public static extern void RasterPos2s(GLshort x, GLshort y);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos2sv")]
            public static extern void RasterPos2sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3d")]
            public static extern void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3dv")]
            public static extern void RasterPos3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3f")]
            public static extern void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3fv")]
            public static extern void RasterPos3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3i")]
            public static extern void RasterPos3i(GLint x, GLint y, GLint z);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3iv")]
            public static extern void RasterPos3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3s")]
            public static extern void RasterPos3s(GLshort x, GLshort y, GLshort z);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos3sv")]
            public static extern void RasterPos3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4d")]
            public static extern void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4dv")]
            public static extern void RasterPos4dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4f")]
            public static extern void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4fv")]
            public static extern void RasterPos4fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4i")]
            public static extern void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4iv")]
            public static extern void RasterPos4iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4s")]
            public static extern void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
            [DllImport("opengl32.dll", EntryPoint = "glRasterPos4sv")]
            public static extern void RasterPos4sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glRectd")]
            public static extern void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
            [DllImport("opengl32.dll", EntryPoint = "glRectdv")]
            public static extern void Rectdv_(IntPtr v1, IntPtr v2);
            [DllImport("opengl32.dll", EntryPoint = "glRectf")]
            public static extern void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
            [DllImport("opengl32.dll", EntryPoint = "glRectfv")]
            public static extern void Rectfv_(IntPtr v1, IntPtr v2);
            [DllImport("opengl32.dll", EntryPoint = "glRecti")]
            public static extern void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
            [DllImport("opengl32.dll", EntryPoint = "glRectiv")]
            public static extern void Rectiv_(IntPtr v1, IntPtr v2);
            [DllImport("opengl32.dll", EntryPoint = "glRects")]
            public static extern void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
            [DllImport("opengl32.dll", EntryPoint = "glRectsv")]
            public static extern void Rectsv_(IntPtr v1, IntPtr v2);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1d")]
            public static extern void TexCoord1d(GLdouble s);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1dv")]
            public static extern void TexCoord1dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1f")]
            public static extern void TexCoord1f(GLfloat s);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1fv")]
            public static extern void TexCoord1fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1i")]
            public static extern void TexCoord1i(GLint s);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1iv")]
            public static extern void TexCoord1iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1s")]
            public static extern void TexCoord1s(GLshort s);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord1sv")]
            public static extern void TexCoord1sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2d")]
            public static extern void TexCoord2d(GLdouble s, GLdouble t);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2dv")]
            public static extern void TexCoord2dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2f")]
            public static extern void TexCoord2f(GLfloat s, GLfloat t);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fv")]
            public static extern void TexCoord2fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2i")]
            public static extern void TexCoord2i(GLint s, GLint t);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2iv")]
            public static extern void TexCoord2iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2s")]
            public static extern void TexCoord2s(GLshort s, GLshort t);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord2sv")]
            public static extern void TexCoord2sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3d")]
            public static extern void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3dv")]
            public static extern void TexCoord3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3f")]
            public static extern void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3fv")]
            public static extern void TexCoord3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3i")]
            public static extern void TexCoord3i(GLint s, GLint t, GLint r);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3iv")]
            public static extern void TexCoord3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3s")]
            public static extern void TexCoord3s(GLshort s, GLshort t, GLshort r);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord3sv")]
            public static extern void TexCoord3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4d")]
            public static extern void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4dv")]
            public static extern void TexCoord4dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4f")]
            public static extern void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fv")]
            public static extern void TexCoord4fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4i")]
            public static extern void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4iv")]
            public static extern void TexCoord4iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4s")]
            public static extern void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoord4sv")]
            public static extern void TexCoord4sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2d")]
            public static extern void Vertex2d(GLdouble x, GLdouble y);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2dv")]
            public static extern void Vertex2dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2f")]
            public static extern void Vertex2f(GLfloat x, GLfloat y);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2fv")]
            public static extern void Vertex2fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2i")]
            public static extern void Vertex2i(GLint x, GLint y);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2iv")]
            public static extern void Vertex2iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2s")]
            public static extern void Vertex2s(GLshort x, GLshort y);
            [DllImport("opengl32.dll", EntryPoint = "glVertex2sv")]
            public static extern void Vertex2sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3d")]
            public static extern void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3dv")]
            public static extern void Vertex3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3f")]
            public static extern void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3fv")]
            public static extern void Vertex3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3i")]
            public static extern void Vertex3i(GLint x, GLint y, GLint z);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3iv")]
            public static extern void Vertex3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3s")]
            public static extern void Vertex3s(GLshort x, GLshort y, GLshort z);
            [DllImport("opengl32.dll", EntryPoint = "glVertex3sv")]
            public static extern void Vertex3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4d")]
            public static extern void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4dv")]
            public static extern void Vertex4dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4f")]
            public static extern void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4fv")]
            public static extern void Vertex4fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4i")]
            public static extern void Vertex4i(GLint x, GLint y, GLint z, GLint w);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4iv")]
            public static extern void Vertex4iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4s")]
            public static extern void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
            [DllImport("opengl32.dll", EntryPoint = "glVertex4sv")]
            public static extern void Vertex4sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glClipPlane")]
            public static extern void ClipPlane_(Enums.ClipPlaneName plane, IntPtr equation);
            [DllImport("opengl32.dll", EntryPoint = "glColorMaterial")]
            public static extern void ColorMaterial(Enums.MaterialFace face, Enums.ColorMaterialParameter mode);
            [DllImport("opengl32.dll", EntryPoint = "glCullFace")]
            public static extern void CullFace(Enums.CullFaceMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glFogf")]
            public static extern void Fogf(Enums.FogParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glFogfv")]
            public static extern void Fogfv_(Enums.FogParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glFogi")]
            public static extern void Fogi(Enums.FogParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glFogiv")]
            public static extern void Fogiv_(Enums.FogParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glFrontFace")]
            public static extern void FrontFace(Enums.FrontFaceDirection mode);
            [DllImport("opengl32.dll", EntryPoint = "glHint")]
            public static extern void Hint(Enums.HintTarget target, Enums.HintMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glLightf")]
            public static extern void Lightf(Enums.LightName light, Enums.LightParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glLightfv")]
            public static extern void Lightfv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glLighti")]
            public static extern void Lighti(Enums.LightName light, Enums.LightParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glLightiv")]
            public static extern void Lightiv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glLightModelf")]
            public static extern void LightModelf(Enums.LightModelParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glLightModelfv")]
            public static extern void LightModelfv_(Enums.LightModelParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glLightModeli")]
            public static extern void LightModeli(Enums.LightModelParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glLightModeliv")]
            public static extern void LightModeliv_(Enums.LightModelParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glLineStipple")]
            public static extern void LineStipple_(GLint factor, GLushort pattern);
            [DllImport("opengl32.dll", EntryPoint = "glLineWidth")]
            public static extern void LineWidth(GLfloat width);
            [DllImport("opengl32.dll", EntryPoint = "glMaterialf")]
            public static extern void Materialf(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glMaterialfv")]
            public static extern void Materialfv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glMateriali")]
            public static extern void Materiali(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glMaterialiv")]
            public static extern void Materialiv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glPointSize")]
            public static extern void PointSize(GLfloat size);
            [DllImport("opengl32.dll", EntryPoint = "glPolygonMode")]
            public static extern void PolygonMode(Enums.MaterialFace face, Enums.PolygonMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glPolygonStipple")]
            public static extern void PolygonStipple_(IntPtr mask);
            [DllImport("opengl32.dll", EntryPoint = "glScissor")]
            public static extern void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
            [DllImport("opengl32.dll", EntryPoint = "glShadeModel")]
            public static extern void ShadeModel(Enums.ShadingModel mode);
            [DllImport("opengl32.dll", EntryPoint = "glTexParameterf")]
            public static extern void TexParameterf(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glTexParameterfv")]
            public static extern void TexParameterfv_(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexParameteri")]
            public static extern void TexParameteri(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glTexParameteriv")]
            public static extern void TexParameteriv_(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexImage1D")]
            public static extern void TexImage1D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glTexImage2D")]
            public static extern void TexImage2D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glTexEnvf")]
            public static extern void TexEnvf(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glTexEnvfv")]
            public static extern void TexEnvfv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexEnvi")]
            public static extern void TexEnvi(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glTexEnviv")]
            public static extern void TexEnviv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexGend")]
            public static extern void TexGend(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble param);
            [DllImport("opengl32.dll", EntryPoint = "glTexGendv")]
            public static extern void TexGendv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexGenf")]
            public static extern void TexGenf(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glTexGenfv")]
            public static extern void TexGenfv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glTexGeni")]
            public static extern void TexGeni(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glTexGeniv")]
            public static extern void TexGeniv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glFeedbackBuffer")]
            public static extern void FeedbackBuffer_(GLsizei size, Enums.FeedbackType type, IntPtr buffer);
            [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer")]
            public static extern void SelectBuffer_(GLsizei size, IntPtr buffer);
            [DllImport("opengl32.dll", EntryPoint = "glRenderMode")]
            public static extern GLint RenderMode(Enums.RenderingMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glInitNames")]
            public static extern void InitNames();
            [DllImport("opengl32.dll", EntryPoint = "glLoadName")]
            public static extern void LoadName(GLuint name);
            [DllImport("opengl32.dll", EntryPoint = "glPassThrough")]
            public static extern void PassThrough(GLfloat token);
            [DllImport("opengl32.dll", EntryPoint = "glPopName")]
            public static extern void PopName();
            [DllImport("opengl32.dll", EntryPoint = "glPushName")]
            public static extern void PushName(GLuint name);
            [DllImport("opengl32.dll", EntryPoint = "glDrawBuffer")]
            public static extern void DrawBuffer(Enums.DrawBufferMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glClear")]
            public static extern void Clear(Enums.ClearBufferMask mask);
            [DllImport("opengl32.dll", EntryPoint = "glClearAccum")]
            public static extern void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            [DllImport("opengl32.dll", EntryPoint = "glClearIndex")]
            public static extern void ClearIndex(GLfloat c);
            [DllImport("opengl32.dll", EntryPoint = "glClearColor")]
            public static extern void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            [DllImport("opengl32.dll", EntryPoint = "glClearStencil")]
            public static extern void ClearStencil(GLint s);
            [DllImport("opengl32.dll", EntryPoint = "glClearDepth")]
            public static extern void ClearDepth(GLclampd depth);
            [DllImport("opengl32.dll", EntryPoint = "glStencilMask")]
            public static extern void StencilMask(GLuint mask);
            [DllImport("opengl32.dll", EntryPoint = "glColorMask")]
            public static extern void ColorMask(Enums.Boolean red, Enums.Boolean green, Enums.Boolean blue, Enums.Boolean alpha);
            [DllImport("opengl32.dll", EntryPoint = "glDepthMask")]
            public static extern void DepthMask(Enums.Boolean flag);
            [DllImport("opengl32.dll", EntryPoint = "glIndexMask")]
            public static extern void IndexMask(GLuint mask);
            [DllImport("opengl32.dll", EntryPoint = "glAccum")]
            public static extern void Accum(Enums.AccumOp op, GLfloat value);
            [DllImport("opengl32.dll", EntryPoint = "glDisable")]
            public static extern void Disable(Enums.EnableCap cap);
            [DllImport("opengl32.dll", EntryPoint = "glEnable")]
            public static extern void Enable(Enums.EnableCap cap);
            [DllImport("opengl32.dll", EntryPoint = "glFinish")]
            public static extern void Finish();
            [DllImport("opengl32.dll", EntryPoint = "glFlush")]
            public static extern void Flush();
            [DllImport("opengl32.dll", EntryPoint = "glPopAttrib")]
            public static extern void PopAttrib();
            [DllImport("opengl32.dll", EntryPoint = "glPushAttrib")]
            public static extern void PushAttrib(Enums.AttribMask mask);
            [DllImport("opengl32.dll", EntryPoint = "glMap1d")]
            public static extern void Map1d_(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);
            [DllImport("opengl32.dll", EntryPoint = "glMap1f")]
            public static extern void Map1f_(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);
            [DllImport("opengl32.dll", EntryPoint = "glMap2d")]
            public static extern void Map2d_(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);
            [DllImport("opengl32.dll", EntryPoint = "glMap2f")]
            public static extern void Map2f_(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);
            [DllImport("opengl32.dll", EntryPoint = "glMapGrid1d")]
            public static extern void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
            [DllImport("opengl32.dll", EntryPoint = "glMapGrid1f")]
            public static extern void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
            [DllImport("opengl32.dll", EntryPoint = "glMapGrid2d")]
            public static extern void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
            [DllImport("opengl32.dll", EntryPoint = "glMapGrid2f")]
            public static extern void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1d")]
            public static extern void EvalCoord1d(GLdouble u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1dv")]
            public static extern void EvalCoord1dv_(IntPtr u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1f")]
            public static extern void EvalCoord1f(GLfloat u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1fv")]
            public static extern void EvalCoord1fv_(IntPtr u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2d")]
            public static extern void EvalCoord2d(GLdouble u, GLdouble v);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2dv")]
            public static extern void EvalCoord2dv_(IntPtr u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2f")]
            public static extern void EvalCoord2f(GLfloat u, GLfloat v);
            [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2fv")]
            public static extern void EvalCoord2fv_(IntPtr u);
            [DllImport("opengl32.dll", EntryPoint = "glEvalMesh1")]
            public static extern void EvalMesh1(Enums.MeshMode1 mode, GLint i1, GLint i2);
            [DllImport("opengl32.dll", EntryPoint = "glEvalPoint1")]
            public static extern void EvalPoint1(GLint i);
            [DllImport("opengl32.dll", EntryPoint = "glEvalMesh2")]
            public static extern void EvalMesh2(Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2);
            [DllImport("opengl32.dll", EntryPoint = "glEvalPoint2")]
            public static extern void EvalPoint2(GLint i, GLint j);
            [DllImport("opengl32.dll", EntryPoint = "glAlphaFunc")]
            public static extern void AlphaFunc(Enums.AlphaFunction func, GLclampf reference);
            [DllImport("opengl32.dll", EntryPoint = "glBlendFunc")]
            public static extern void BlendFunc(Enums.BlendingFactorSrc sfactor, Enums.BlendingFactorDest dfactor);
            [DllImport("opengl32.dll", EntryPoint = "glLogicOp")]
            public static extern void LogicOp(Enums.LogicOp opcode);
            [DllImport("opengl32.dll", EntryPoint = "glStencilFunc")]
            public static extern void StencilFunc(Enums.StencilFunction func, GLint reference, GLuint mask);
            [DllImport("opengl32.dll", EntryPoint = "glStencilOp")]
            public static extern void StencilOp(Enums.StencilOp fail, Enums.StencilOp zfail, Enums.StencilOp zpass);
            [DllImport("opengl32.dll", EntryPoint = "glDepthFunc")]
            public static extern void DepthFunc(Enums.DepthFunction func);
            [DllImport("opengl32.dll", EntryPoint = "glPixelZoom")]
            public static extern void PixelZoom(GLfloat xfactor, GLfloat yfactor);
            [DllImport("opengl32.dll", EntryPoint = "glPixelTransferf")]
            public static extern void PixelTransferf(Enums.PixelTransferParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glPixelTransferi")]
            public static extern void PixelTransferi(Enums.PixelTransferParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glPixelStoref")]
            public static extern void PixelStoref(Enums.PixelStoreParameter pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glPixelStorei")]
            public static extern void PixelStorei(Enums.PixelStoreParameter pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glPixelMapfv")]
            public static extern void PixelMapfv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv")]
            public static extern void PixelMapuiv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv")]
            public static extern void PixelMapusv_(Enums.PixelMap map, GLint mapsize, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glReadBuffer")]
            public static extern void ReadBuffer(Enums.ReadBufferMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glCopyPixels")]
            public static extern void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelCopyType type);
            [DllImport("opengl32.dll", EntryPoint = "glReadPixels")]
            public static extern void ReadPixels_(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glDrawPixels")]
            public static extern void DrawPixels_(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv")]
            public static extern void GetBooleanv_(Enums.GetPName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetClipPlane")]
            public static extern void GetClipPlane_(Enums.ClipPlaneName plane, IntPtr equation);
            [DllImport("opengl32.dll", EntryPoint = "glGetDoublev")]
            public static extern void GetDoublev_(Enums.GetPName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetError")]
            public static extern GLenum GetError();
            [DllImport("opengl32.dll", EntryPoint = "glGetFloatv")]
            public static extern void GetFloatv_(Enums.GetPName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetIntegerv")]
            public static extern void GetIntegerv_(Enums.GetPName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetLightfv")]
            public static extern void GetLightfv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetLightiv")]
            public static extern void GetLightiv_(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetMapdv")]
            public static extern void GetMapdv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glGetMapfv")]
            public static extern void GetMapfv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glGetMapiv")]
            public static extern void GetMapiv_(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glGetMaterialfv")]
            public static extern void GetMaterialfv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetMaterialiv")]
            public static extern void GetMaterialiv_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapfv")]
            public static extern void GetPixelMapfv_(Enums.PixelMap map, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv")]
            public static extern void GetPixelMapuiv_(Enums.PixelMap map, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv")]
            public static extern void GetPixelMapusv_(Enums.PixelMap map, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glGetPolygonStipple")]
            public static extern void GetPolygonStipple_(IntPtr mask);
            [DllImport("opengl32.dll", EntryPoint = "glGetString")]
            public static extern IntPtr GetString_(Enums.StringName name);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexEnvfv")]
            public static extern void GetTexEnvfv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexEnviv")]
            public static extern void GetTexEnviv_(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexGendv")]
            public static extern void GetTexGendv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexGenfv")]
            public static extern void GetTexGenfv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexGeniv")]
            public static extern void GetTexGeniv_(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexImage")]
            public static extern void GetTexImage_(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterfv")]
            public static extern void GetTexParameterfv_(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexParameteriv")]
            public static extern void GetTexParameteriv_(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameterfv")]
            public static extern void GetTexLevelParameterfv_(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameteriv")]
            public static extern void GetTexLevelParameteriv_(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glIsEnabled")]
            public static extern GLboolean IsEnabled(Enums.EnableCap cap);
            [DllImport("opengl32.dll", EntryPoint = "glIsList")]
            public static extern GLboolean IsList(GLuint list);
            [DllImport("opengl32.dll", EntryPoint = "glDepthRange")]
            public static extern void DepthRange(GLclampd near, GLclampd far);
            [DllImport("opengl32.dll", EntryPoint = "glFrustum")]
            public static extern void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            [DllImport("opengl32.dll", EntryPoint = "glLoadIdentity")]
            public static extern void LoadIdentity();
            [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixf")]
            public static extern void LoadMatrixf_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixd")]
            public static extern void LoadMatrixd_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glMatrixMode")]
            public static extern void MatrixMode(Enums.MatrixMode mode);
            [DllImport("opengl32.dll", EntryPoint = "glMultMatrixf")]
            public static extern void MultMatrixf_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glMultMatrixd")]
            public static extern void MultMatrixd_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glOrtho")]
            public static extern void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            [DllImport("opengl32.dll", EntryPoint = "glPopMatrix")]
            public static extern void PopMatrix();
            [DllImport("opengl32.dll", EntryPoint = "glPushMatrix")]
            public static extern void PushMatrix();
            [DllImport("opengl32.dll", EntryPoint = "glRotated")]
            public static extern void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glRotatef")]
            public static extern void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glScaled")]
            public static extern void Scaled(GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glScalef")]
            public static extern void Scalef(GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glTranslated")]
            public static extern void Translated(GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glTranslatef")]
            public static extern void Translatef(GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glViewport")]
            public static extern void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
            [DllImport("opengl32.dll", EntryPoint = "glArrayElement")]
            public static extern void ArrayElement(GLint i);
            [DllImport("opengl32.dll", EntryPoint = "glColorPointer")]
            public static extern void ColorPointer_(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glDisableClientState")]
            public static extern void DisableClientState(Enums.EnableCap array);
            [DllImport("opengl32.dll", EntryPoint = "glDrawArrays")]
            public static extern void DrawArrays(Enums.BeginMode mode, GLint first, GLsizei count);
            [DllImport("opengl32.dll", EntryPoint = "glDrawElements")]
            public static extern void DrawElements_(Enums.BeginMode mode, GLsizei count, GLenum type, IntPtr indices);
            [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer")]
            public static extern void EdgeFlagPointer_(GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glEnableClientState")]
            public static extern void EnableClientState(Enums.EnableCap array);
            [DllImport("opengl32.dll", EntryPoint = "glGetPointerv")]
            public static extern void GetPointerv_(Enums.GetPointervPName pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glIndexPointer")]
            public static extern void IndexPointer_(Enums.IndexPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays")]
            public static extern void InterleavedArrays_(Enums.InterleavedArrayFormat format, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glNormalPointer")]
            public static extern void NormalPointer_(Enums.NormalPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer")]
            public static extern void TexCoordPointer_(GLint size, Enums.TexCoordPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glVertexPointer")]
            public static extern void VertexPointer_(GLint size, Enums.VertexPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glPolygonOffset")]
            public static extern void PolygonOffset(GLfloat factor, GLfloat units);
            [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage1D")]
            public static extern void CopyTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
            [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage2D")]
            public static extern void CopyTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
            [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage1D")]
            public static extern void CopyTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
            [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage2D")]
            public static extern void CopyTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D")]
            public static extern void TexSubImage1D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D")]
            public static extern void TexSubImage2D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident")]
            public static extern GLboolean AreTexturesResident_(GLsizei n, IntPtr textures, IntPtr residences);
            [DllImport("opengl32.dll", EntryPoint = "glBindTexture")]
            public static extern void BindTexture(Enums.TextureTarget target, GLuint texture);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures")]
            public static extern void DeleteTextures_(GLsizei n, IntPtr textures);
            [DllImport("opengl32.dll", EntryPoint = "glGenTextures")]
            public static extern void GenTextures_(GLsizei n, IntPtr textures);
            [DllImport("opengl32.dll", EntryPoint = "glIsTexture")]
            public static extern GLboolean IsTexture(GLuint texture);
            [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures")]
            public static extern void PrioritizeTextures_(GLsizei n, IntPtr textures, IntPtr priorities);
            [DllImport("opengl32.dll", EntryPoint = "glIndexub")]
            public static extern void Indexub(GLubyte c);
            [DllImport("opengl32.dll", EntryPoint = "glIndexubv")]
            public static extern void Indexubv_(IntPtr c);
            [DllImport("opengl32.dll", EntryPoint = "glPopClientAttrib")]
            public static extern void PopClientAttrib();
            [DllImport("opengl32.dll", EntryPoint = "glPushClientAttrib")]
            public static extern void PushClientAttrib(Enums.ClientAttribMask mask);
            [DllImport("opengl32.dll", EntryPoint = "glBlendColor")]
            public static extern void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            [DllImport("opengl32.dll", EntryPoint = "glBlendEquation")]
            public static extern void BlendEquation(GLenum mode);
            [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElements")]
            public static extern void DrawRangeElements_(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);
            [DllImport("opengl32.dll", EntryPoint = "glColorTable")]
            public static extern void ColorTable_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            [DllImport("opengl32.dll", EntryPoint = "glColorTableParameterfv")]
            public static extern void ColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glColorTableParameteriv")]
            public static extern void ColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glCopyColorTable")]
            public static extern void CopyColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            [DllImport("opengl32.dll", EntryPoint = "glGetColorTable")]
            public static extern void GetColorTable_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterfv")]
            public static extern void GetColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameteriv")]
            public static extern void GetColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glColorSubTable")]
            public static extern void ColorSubTable_(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCopyColorSubTable")]
            public static extern void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter1D")]
            public static extern void ConvolutionFilter1D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter2D")]
            public static extern void ConvolutionFilter2D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterf")]
            public static extern void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterfv")]
            public static extern void ConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameteri")]
            public static extern void ConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);
            [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameteriv")]
            public static extern void ConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter1D")]
            public static extern void CopyConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter2D")]
            public static extern void CopyConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
            [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionFilter")]
            public static extern void GetConvolutionFilter_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameterfv")]
            public static extern void GetConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameteriv")]
            public static extern void GetConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetSeparableFilter")]
            public static extern void GetSeparableFilter_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span);
            [DllImport("opengl32.dll", EntryPoint = "glSeparableFilter2D")]
            public static extern void SeparableFilter2D_(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column);
            [DllImport("opengl32.dll", EntryPoint = "glGetHistogram")]
            public static extern void GetHistogram_(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameterfv")]
            public static extern void GetHistogramParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameteriv")]
            public static extern void GetHistogramParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetMinmax")]
            public static extern void GetMinmax_(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameterfv")]
            public static extern void GetMinmaxParameterfv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameteriv")]
            public static extern void GetMinmaxParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glHistogram")]
            public static extern void Histogram(GLenum target, GLsizei width, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            [DllImport("opengl32.dll", EntryPoint = "glMinmax")]
            public static extern void Minmax(GLenum target, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            [DllImport("opengl32.dll", EntryPoint = "glResetHistogram")]
            public static extern void ResetHistogram(GLenum target);
            [DllImport("opengl32.dll", EntryPoint = "glResetMinmax")]
            public static extern void ResetMinmax(GLenum target);
            [DllImport("opengl32.dll", EntryPoint = "glTexImage3D")]
            public static extern void TexImage3D_(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glTexSubImage3D")]
            public static extern void TexSubImage3D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage3D")]
            public static extern void CopyTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            [DllImport("opengl32.dll", EntryPoint = "glActiveTexture")]
            public static extern void ActiveTexture(GLenum texture);
            [DllImport("opengl32.dll", EntryPoint = "glClientActiveTexture")]
            public static extern void ClientActiveTexture(GLenum texture);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1d")]
            public static extern void MultiTexCoord1d(GLenum target, GLdouble s);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1dv")]
            public static extern void MultiTexCoord1dv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1f")]
            public static extern void MultiTexCoord1f(GLenum target, GLfloat s);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1fv")]
            public static extern void MultiTexCoord1fv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1i")]
            public static extern void MultiTexCoord1i(GLenum target, GLint s);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1iv")]
            public static extern void MultiTexCoord1iv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1s")]
            public static extern void MultiTexCoord1s(GLenum target, GLshort s);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1sv")]
            public static extern void MultiTexCoord1sv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2d")]
            public static extern void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2dv")]
            public static extern void MultiTexCoord2dv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2f")]
            public static extern void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2fv")]
            public static extern void MultiTexCoord2fv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2i")]
            public static extern void MultiTexCoord2i(GLenum target, GLint s, GLint t);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2iv")]
            public static extern void MultiTexCoord2iv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2s")]
            public static extern void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2sv")]
            public static extern void MultiTexCoord2sv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3d")]
            public static extern void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3dv")]
            public static extern void MultiTexCoord3dv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3f")]
            public static extern void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3fv")]
            public static extern void MultiTexCoord3fv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3i")]
            public static extern void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3iv")]
            public static extern void MultiTexCoord3iv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3s")]
            public static extern void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3sv")]
            public static extern void MultiTexCoord3sv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4d")]
            public static extern void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4dv")]
            public static extern void MultiTexCoord4dv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4f")]
            public static extern void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4fv")]
            public static extern void MultiTexCoord4fv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4i")]
            public static extern void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4iv")]
            public static extern void MultiTexCoord4iv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4s")]
            public static extern void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
            [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4sv")]
            public static extern void MultiTexCoord4sv_(GLenum target, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixf")]
            public static extern void LoadTransposeMatrixf_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixd")]
            public static extern void LoadTransposeMatrixd_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixf")]
            public static extern void MultTransposeMatrixf_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixd")]
            public static extern void MultTransposeMatrixd_(IntPtr m);
            [DllImport("opengl32.dll", EntryPoint = "glSampleCoverage")]
            public static extern void SampleCoverage(GLclampf value, Enums.Boolean invert);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage3D")]
            public static extern void CompressedTexImage3D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage2D")]
            public static extern void CompressedTexImage2D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage1D")]
            public static extern void CompressedTexImage1D_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage3D")]
            public static extern void CompressedTexSubImage3D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage2D")]
            public static extern void CompressedTexSubImage2D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage1D")]
            public static extern void CompressedTexSubImage1D_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glGetCompressedTexImage")]
            public static extern void GetCompressedTexImage_(Enums.TextureTarget target, GLint level, IntPtr img);
            [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparate")]
            public static extern void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            [DllImport("opengl32.dll", EntryPoint = "glFogCoordf")]
            public static extern void FogCoordf(GLfloat coord);
            [DllImport("opengl32.dll", EntryPoint = "glFogCoordfv")]
            public static extern void FogCoordfv_(IntPtr coord);
            [DllImport("opengl32.dll", EntryPoint = "glFogCoordd")]
            public static extern void FogCoordd(GLdouble coord);
            [DllImport("opengl32.dll", EntryPoint = "glFogCoorddv")]
            public static extern void FogCoorddv_(IntPtr coord);
            [DllImport("opengl32.dll", EntryPoint = "glFogCoordPointer")]
            public static extern void FogCoordPointer_(GLenum type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glMultiDrawArrays")]
            public static extern void MultiDrawArrays_(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount);
            [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElements")]
            public static extern void MultiDrawElements_(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);
            [DllImport("opengl32.dll", EntryPoint = "glPointParameterf")]
            public static extern void PointParameterf(GLenum pname, GLfloat param);
            [DllImport("opengl32.dll", EntryPoint = "glPointParameterfv")]
            public static extern void PointParameterfv_(GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glPointParameteri")]
            public static extern void PointParameteri(GLenum pname, GLint param);
            [DllImport("opengl32.dll", EntryPoint = "glPointParameteriv")]
            public static extern void PointParameteriv_(GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3b")]
            public static extern void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3bv")]
            public static extern void SecondaryColor3bv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3d")]
            public static extern void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3dv")]
            public static extern void SecondaryColor3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3f")]
            public static extern void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3fv")]
            public static extern void SecondaryColor3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3i")]
            public static extern void SecondaryColor3i(GLint red, GLint green, GLint blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3iv")]
            public static extern void SecondaryColor3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3s")]
            public static extern void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3sv")]
            public static extern void SecondaryColor3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ub")]
            public static extern void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ubv")]
            public static extern void SecondaryColor3ubv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ui")]
            public static extern void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3uiv")]
            public static extern void SecondaryColor3uiv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3us")]
            public static extern void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3usv")]
            public static extern void SecondaryColor3usv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorPointer")]
            public static extern void SecondaryColorPointer_(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2d")]
            public static extern void WindowPos2d(GLdouble x, GLdouble y);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dv")]
            public static extern void WindowPos2dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2f")]
            public static extern void WindowPos2f(GLfloat x, GLfloat y);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fv")]
            public static extern void WindowPos2fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2i")]
            public static extern void WindowPos2i(GLint x, GLint y);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2iv")]
            public static extern void WindowPos2iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2s")]
            public static extern void WindowPos2s(GLshort x, GLshort y);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos2sv")]
            public static extern void WindowPos2sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3d")]
            public static extern void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dv")]
            public static extern void WindowPos3dv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3f")]
            public static extern void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fv")]
            public static extern void WindowPos3fv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3i")]
            public static extern void WindowPos3i(GLint x, GLint y, GLint z);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3iv")]
            public static extern void WindowPos3iv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3s")]
            public static extern void WindowPos3s(GLshort x, GLshort y, GLshort z);
            [DllImport("opengl32.dll", EntryPoint = "glWindowPos3sv")]
            public static extern void WindowPos3sv_(IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glGenQueries")]
            public static extern void GenQueries_(GLsizei n, IntPtr ids);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteQueries")]
            public static extern void DeleteQueries_(GLsizei n, IntPtr ids);
            [DllImport("opengl32.dll", EntryPoint = "glIsQuery")]
            public static extern GLboolean IsQuery(GLuint id);
            [DllImport("opengl32.dll", EntryPoint = "glBeginQuery")]
            public static extern void BeginQuery(Enums.VERSION_1_5 target, GLuint id);
            [DllImport("opengl32.dll", EntryPoint = "glEndQuery")]
            public static extern void EndQuery(Enums.VERSION_1_5 target);
            [DllImport("opengl32.dll", EntryPoint = "glGetQueryiv")]
            public static extern void GetQueryiv_(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectiv")]
            public static extern void GetQueryObjectiv_(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectuiv")]
            public static extern void GetQueryObjectuiv_(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glBindBuffer")]
            public static extern void BindBuffer(GLenum target, GLuint buffer);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteBuffers")]
            public static extern void DeleteBuffers_(GLsizei n, IntPtr buffers);
            [DllImport("opengl32.dll", EntryPoint = "glGenBuffers")]
            public static extern void GenBuffers_(GLsizei n, IntPtr buffers);
            [DllImport("opengl32.dll", EntryPoint = "glIsBuffer")]
            public static extern GLboolean IsBuffer(GLuint buffer);
            [DllImport("opengl32.dll", EntryPoint = "glBufferData")]
            public static extern void BufferData_(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);
            [DllImport("opengl32.dll", EntryPoint = "glBufferSubData")]
            public static extern void BufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glGetBufferSubData")]
            public static extern void GetBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            [DllImport("opengl32.dll", EntryPoint = "glMapBuffer")]
            public static extern IntPtr MapBuffer(GLenum target, GLenum access);
            [DllImport("opengl32.dll", EntryPoint = "glUnmapBuffer")]
            public static extern GLboolean UnmapBuffer(GLenum target);
            [DllImport("opengl32.dll", EntryPoint = "glGetBufferParameteriv")]
            public static extern void GetBufferParameteriv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetBufferPointerv")]
            public static extern void GetBufferPointerv_(GLenum target, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparate")]
            public static extern void BlendEquationSeparate(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
            [DllImport("opengl32.dll", EntryPoint = "glDrawBuffers")]
            public static extern void DrawBuffers_(GLsizei n, IntPtr bufs);
            [DllImport("opengl32.dll", EntryPoint = "glStencilOpSeparate")]
            public static extern void StencilOpSeparate(GLenum face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
            [DllImport("opengl32.dll", EntryPoint = "glStencilFuncSeparate")]
            public static extern void StencilFuncSeparate(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint reference, GLuint mask);
            [DllImport("opengl32.dll", EntryPoint = "glStencilMaskSeparate")]
            public static extern void StencilMaskSeparate(GLenum face, GLuint mask);
            [DllImport("opengl32.dll", EntryPoint = "glAttachShader")]
            public static extern void AttachShader(GLuint program, GLuint shader);
            [DllImport("opengl32.dll", EntryPoint = "glBindAttribLocation")]
            public static extern void BindAttribLocation(GLuint program, GLuint index, string name);
            [DllImport("opengl32.dll", EntryPoint = "glCompileShader")]
            public static extern void CompileShader(GLuint shader);
            [DllImport("opengl32.dll", EntryPoint = "glCreateProgram")]
            public static extern GLuint CreateProgram();
            [DllImport("opengl32.dll", EntryPoint = "glCreateShader")]
            public static extern GLuint CreateShader(Enums.VERSION_2_0 type);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteProgram")]
            public static extern void DeleteProgram(GLuint program);
            [DllImport("opengl32.dll", EntryPoint = "glDeleteShader")]
            public static extern void DeleteShader(GLuint shader);
            [DllImport("opengl32.dll", EntryPoint = "glDetachShader")]
            public static extern void DetachShader(GLuint program, GLuint shader);
            [DllImport("opengl32.dll", EntryPoint = "glDisableVertexAttribArray")]
            public static extern void DisableVertexAttribArray(GLuint index);
            [DllImport("opengl32.dll", EntryPoint = "glEnableVertexAttribArray")]
            public static extern void EnableVertexAttribArray(GLuint index);
            [DllImport("opengl32.dll", EntryPoint = "glGetActiveAttrib")]
            public static extern void GetActiveAttrib_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniform")]
            public static extern void GetActiveUniform_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            [DllImport("opengl32.dll", EntryPoint = "glGetAttachedShaders")]
            public static extern void GetAttachedShaders_(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);
            [DllImport("opengl32.dll", EntryPoint = "glGetAttribLocation")]
            public static extern GLint GetAttribLocation(GLuint program, string name);
            [DllImport("opengl32.dll", EntryPoint = "glGetProgramiv")]
            public static extern void GetProgramiv_(GLuint program, Enums.VERSION_2_0 pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetProgramInfoLog")]
            public static extern void GetProgramInfoLog_(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            [DllImport("opengl32.dll", EntryPoint = "glGetShaderiv")]
            public static extern void GetShaderiv_(GLuint shader, Enums.VERSION_2_0 pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetShaderInfoLog")]
            public static extern void GetShaderInfoLog_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            [DllImport("opengl32.dll", EntryPoint = "glGetShaderSource")]
            public static extern void GetShaderSource_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);
            [DllImport("opengl32.dll", EntryPoint = "glGetUniformLocation")]
            public static extern GLint GetUniformLocation(GLuint program, string name);
            [DllImport("opengl32.dll", EntryPoint = "glGetUniformfv")]
            public static extern void GetUniformfv_(GLuint program, GLint location, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetUniformiv")]
            public static extern void GetUniformiv_(GLuint program, GLint location, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribdv")]
            public static extern void GetVertexAttribdv_(GLuint index, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribfv")]
            public static extern void GetVertexAttribfv_(GLuint index, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribiv")]
            public static extern void GetVertexAttribiv_(GLuint index, GLenum pname, IntPtr parameters);
            [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribPointerv")]
            public static extern void GetVertexAttribPointerv_(GLuint index, GLenum pname, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glIsProgram")]
            public static extern GLboolean IsProgram(GLuint program);
            [DllImport("opengl32.dll", EntryPoint = "glIsShader")]
            public static extern GLboolean IsShader(GLuint shader);
            [DllImport("opengl32.dll", EntryPoint = "glLinkProgram")]
            public static extern void LinkProgram(GLuint program);
            [DllImport("opengl32.dll", EntryPoint = "glShaderSource")]
            public static extern void ShaderSource_(GLuint shader, GLsizei count, string[] @string, IntPtr length);
            [DllImport("opengl32.dll", EntryPoint = "glUseProgram")]
            public static extern void UseProgram(GLuint program);
            [DllImport("opengl32.dll", EntryPoint = "glUniform1f")]
            public static extern void Uniform1f(GLint location, GLfloat v0);
            [DllImport("opengl32.dll", EntryPoint = "glUniform2f")]
            public static extern void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
            [DllImport("opengl32.dll", EntryPoint = "glUniform3f")]
            public static extern void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
            [DllImport("opengl32.dll", EntryPoint = "glUniform4f")]
            public static extern void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
            [DllImport("opengl32.dll", EntryPoint = "glUniform1i")]
            public static extern void Uniform1i(GLint location, GLint v0);
            [DllImport("opengl32.dll", EntryPoint = "glUniform2i")]
            public static extern void Uniform2i(GLint location, GLint v0, GLint v1);
            [DllImport("opengl32.dll", EntryPoint = "glUniform3i")]
            public static extern void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
            [DllImport("opengl32.dll", EntryPoint = "glUniform4i")]
            public static extern void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
            [DllImport("opengl32.dll", EntryPoint = "glUniform1fv")]
            public static extern void Uniform1fv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform2fv")]
            public static extern void Uniform2fv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform3fv")]
            public static extern void Uniform3fv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform4fv")]
            public static extern void Uniform4fv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform1iv")]
            public static extern void Uniform1iv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform2iv")]
            public static extern void Uniform2iv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform3iv")]
            public static extern void Uniform3iv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniform4iv")]
            public static extern void Uniform4iv_(GLint location, GLsizei count, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2fv")]
            public static extern void UniformMatrix2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3fv")]
            public static extern void UniformMatrix3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4fv")]
            public static extern void UniformMatrix4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glValidateProgram")]
            public static extern void ValidateProgram(GLuint program);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1d")]
            public static extern void VertexAttrib1d(GLuint index, GLdouble x);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dv")]
            public static extern void VertexAttrib1dv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1f")]
            public static extern void VertexAttrib1f(GLuint index, GLfloat x);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fv")]
            public static extern void VertexAttrib1fv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1s")]
            public static extern void VertexAttrib1s(GLuint index, GLshort x);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1sv")]
            public static extern void VertexAttrib1sv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2d")]
            public static extern void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dv")]
            public static extern void VertexAttrib2dv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2f")]
            public static extern void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fv")]
            public static extern void VertexAttrib2fv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2s")]
            public static extern void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2sv")]
            public static extern void VertexAttrib2sv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3d")]
            public static extern void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dv")]
            public static extern void VertexAttrib3dv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3f")]
            public static extern void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fv")]
            public static extern void VertexAttrib3fv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3s")]
            public static extern void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3sv")]
            public static extern void VertexAttrib3sv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nbv")]
            public static extern void VertexAttrib4Nbv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Niv")]
            public static extern void VertexAttrib4Niv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nsv")]
            public static extern void VertexAttrib4Nsv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nub")]
            public static extern void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nubv")]
            public static extern void VertexAttrib4Nubv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nuiv")]
            public static extern void VertexAttrib4Nuiv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nusv")]
            public static extern void VertexAttrib4Nusv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4bv")]
            public static extern void VertexAttrib4bv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4d")]
            public static extern void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dv")]
            public static extern void VertexAttrib4dv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4f")]
            public static extern void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fv")]
            public static extern void VertexAttrib4fv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4iv")]
            public static extern void VertexAttrib4iv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4s")]
            public static extern void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4sv")]
            public static extern void VertexAttrib4sv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ubv")]
            public static extern void VertexAttrib4ubv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4uiv")]
            public static extern void VertexAttrib4uiv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4usv")]
            public static extern void VertexAttrib4usv_(GLuint index, IntPtr v);
            [DllImport("opengl32.dll", EntryPoint = "glVertexAttribPointer")]
            public static extern void VertexAttribPointer_(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x3fv")]
            public static extern void UniformMatrix2x3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x2fv")]
            public static extern void UniformMatrix3x2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x4fv")]
            public static extern void UniformMatrix2x4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x2fv")]
            public static extern void UniformMatrix4x2fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x4fv")]
            public static extern void UniformMatrix3x4fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x3fv")]
            public static extern void UniformMatrix4x3fv_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
        }
        #endregion

        #region Static Functions (and static initialisation)

        public static Delegates.NewList NewList = new Delegates.NewList(Imports.NewList);
        public static Delegates.EndList EndList = new Delegates.EndList(Imports.EndList);
        public static Delegates.CallList CallList = new Delegates.CallList(Imports.CallList);
        public static Delegates.CallLists_ CallLists_ = new Delegates.CallLists_(Imports.CallLists_);
        public static Delegates.DeleteLists DeleteLists = new Delegates.DeleteLists(Imports.DeleteLists);
        public static Delegates.GenLists GenLists = new Delegates.GenLists(Imports.GenLists);
        public static Delegates.ListBase ListBase = new Delegates.ListBase(Imports.ListBase);
        public static Delegates.Begin Begin = new Delegates.Begin(Imports.Begin);
        public static Delegates.Bitmap_ Bitmap_ = new Delegates.Bitmap_(Imports.Bitmap_);
        public static Delegates.Color3b Color3b = new Delegates.Color3b(Imports.Color3b);
        public static Delegates.Color3bv_ Color3bv_ = new Delegates.Color3bv_(Imports.Color3bv_);
        public static Delegates.Color3d Color3d = new Delegates.Color3d(Imports.Color3d);
        public static Delegates.Color3dv_ Color3dv_ = new Delegates.Color3dv_(Imports.Color3dv_);
        public static Delegates.Color3f Color3f = new Delegates.Color3f(Imports.Color3f);
        public static Delegates.Color3fv_ Color3fv_ = new Delegates.Color3fv_(Imports.Color3fv_);
        public static Delegates.Color3i Color3i = new Delegates.Color3i(Imports.Color3i);
        public static Delegates.Color3iv_ Color3iv_ = new Delegates.Color3iv_(Imports.Color3iv_);
        public static Delegates.Color3s Color3s = new Delegates.Color3s(Imports.Color3s);
        public static Delegates.Color3sv_ Color3sv_ = new Delegates.Color3sv_(Imports.Color3sv_);
        public static Delegates.Color3ub Color3ub = new Delegates.Color3ub(Imports.Color3ub);
        public static Delegates.Color3ubv_ Color3ubv_ = new Delegates.Color3ubv_(Imports.Color3ubv_);
        public static Delegates.Color3ui Color3ui = new Delegates.Color3ui(Imports.Color3ui);
        public static Delegates.Color3uiv_ Color3uiv_ = new Delegates.Color3uiv_(Imports.Color3uiv_);
        public static Delegates.Color3us Color3us = new Delegates.Color3us(Imports.Color3us);
        public static Delegates.Color3usv_ Color3usv_ = new Delegates.Color3usv_(Imports.Color3usv_);
        public static Delegates.Color4b Color4b = new Delegates.Color4b(Imports.Color4b);
        public static Delegates.Color4bv_ Color4bv_ = new Delegates.Color4bv_(Imports.Color4bv_);
        public static Delegates.Color4d Color4d = new Delegates.Color4d(Imports.Color4d);
        public static Delegates.Color4dv_ Color4dv_ = new Delegates.Color4dv_(Imports.Color4dv_);
        public static Delegates.Color4f Color4f = new Delegates.Color4f(Imports.Color4f);
        public static Delegates.Color4fv_ Color4fv_ = new Delegates.Color4fv_(Imports.Color4fv_);
        public static Delegates.Color4i Color4i = new Delegates.Color4i(Imports.Color4i);
        public static Delegates.Color4iv_ Color4iv_ = new Delegates.Color4iv_(Imports.Color4iv_);
        public static Delegates.Color4s Color4s = new Delegates.Color4s(Imports.Color4s);
        public static Delegates.Color4sv_ Color4sv_ = new Delegates.Color4sv_(Imports.Color4sv_);
        public static Delegates.Color4ub Color4ub = new Delegates.Color4ub(Imports.Color4ub);
        public static Delegates.Color4ubv_ Color4ubv_ = new Delegates.Color4ubv_(Imports.Color4ubv_);
        public static Delegates.Color4ui Color4ui = new Delegates.Color4ui(Imports.Color4ui);
        public static Delegates.Color4uiv_ Color4uiv_ = new Delegates.Color4uiv_(Imports.Color4uiv_);
        public static Delegates.Color4us Color4us = new Delegates.Color4us(Imports.Color4us);
        public static Delegates.Color4usv_ Color4usv_ = new Delegates.Color4usv_(Imports.Color4usv_);
        public static Delegates.EdgeFlag EdgeFlag = new Delegates.EdgeFlag(Imports.EdgeFlag);
        public static Delegates.EdgeFlagv_ EdgeFlagv_ = new Delegates.EdgeFlagv_(Imports.EdgeFlagv_);
        public static Delegates.End End = new Delegates.End(Imports.End);
        public static Delegates.Indexd Indexd = new Delegates.Indexd(Imports.Indexd);
        public static Delegates.Indexdv_ Indexdv_ = new Delegates.Indexdv_(Imports.Indexdv_);
        public static Delegates.Indexf Indexf = new Delegates.Indexf(Imports.Indexf);
        public static Delegates.Indexfv_ Indexfv_ = new Delegates.Indexfv_(Imports.Indexfv_);
        public static Delegates.Indexi Indexi = new Delegates.Indexi(Imports.Indexi);
        public static Delegates.Indexiv_ Indexiv_ = new Delegates.Indexiv_(Imports.Indexiv_);
        public static Delegates.Indexs Indexs = new Delegates.Indexs(Imports.Indexs);
        public static Delegates.Indexsv_ Indexsv_ = new Delegates.Indexsv_(Imports.Indexsv_);
        public static Delegates.Normal3b Normal3b = new Delegates.Normal3b(Imports.Normal3b);
        public static Delegates.Normal3bv_ Normal3bv_ = new Delegates.Normal3bv_(Imports.Normal3bv_);
        public static Delegates.Normal3d Normal3d = new Delegates.Normal3d(Imports.Normal3d);
        public static Delegates.Normal3dv_ Normal3dv_ = new Delegates.Normal3dv_(Imports.Normal3dv_);
        public static Delegates.Normal3f Normal3f = new Delegates.Normal3f(Imports.Normal3f);
        public static Delegates.Normal3fv_ Normal3fv_ = new Delegates.Normal3fv_(Imports.Normal3fv_);
        public static Delegates.Normal3i Normal3i = new Delegates.Normal3i(Imports.Normal3i);
        public static Delegates.Normal3iv_ Normal3iv_ = new Delegates.Normal3iv_(Imports.Normal3iv_);
        public static Delegates.Normal3s Normal3s = new Delegates.Normal3s(Imports.Normal3s);
        public static Delegates.Normal3sv_ Normal3sv_ = new Delegates.Normal3sv_(Imports.Normal3sv_);
        public static Delegates.RasterPos2d RasterPos2d = new Delegates.RasterPos2d(Imports.RasterPos2d);
        public static Delegates.RasterPos2dv_ RasterPos2dv_ = new Delegates.RasterPos2dv_(Imports.RasterPos2dv_);
        public static Delegates.RasterPos2f RasterPos2f = new Delegates.RasterPos2f(Imports.RasterPos2f);
        public static Delegates.RasterPos2fv_ RasterPos2fv_ = new Delegates.RasterPos2fv_(Imports.RasterPos2fv_);
        public static Delegates.RasterPos2i RasterPos2i = new Delegates.RasterPos2i(Imports.RasterPos2i);
        public static Delegates.RasterPos2iv_ RasterPos2iv_ = new Delegates.RasterPos2iv_(Imports.RasterPos2iv_);
        public static Delegates.RasterPos2s RasterPos2s = new Delegates.RasterPos2s(Imports.RasterPos2s);
        public static Delegates.RasterPos2sv_ RasterPos2sv_ = new Delegates.RasterPos2sv_(Imports.RasterPos2sv_);
        public static Delegates.RasterPos3d RasterPos3d = new Delegates.RasterPos3d(Imports.RasterPos3d);
        public static Delegates.RasterPos3dv_ RasterPos3dv_ = new Delegates.RasterPos3dv_(Imports.RasterPos3dv_);
        public static Delegates.RasterPos3f RasterPos3f = new Delegates.RasterPos3f(Imports.RasterPos3f);
        public static Delegates.RasterPos3fv_ RasterPos3fv_ = new Delegates.RasterPos3fv_(Imports.RasterPos3fv_);
        public static Delegates.RasterPos3i RasterPos3i = new Delegates.RasterPos3i(Imports.RasterPos3i);
        public static Delegates.RasterPos3iv_ RasterPos3iv_ = new Delegates.RasterPos3iv_(Imports.RasterPos3iv_);
        public static Delegates.RasterPos3s RasterPos3s = new Delegates.RasterPos3s(Imports.RasterPos3s);
        public static Delegates.RasterPos3sv_ RasterPos3sv_ = new Delegates.RasterPos3sv_(Imports.RasterPos3sv_);
        public static Delegates.RasterPos4d RasterPos4d = new Delegates.RasterPos4d(Imports.RasterPos4d);
        public static Delegates.RasterPos4dv_ RasterPos4dv_ = new Delegates.RasterPos4dv_(Imports.RasterPos4dv_);
        public static Delegates.RasterPos4f RasterPos4f = new Delegates.RasterPos4f(Imports.RasterPos4f);
        public static Delegates.RasterPos4fv_ RasterPos4fv_ = new Delegates.RasterPos4fv_(Imports.RasterPos4fv_);
        public static Delegates.RasterPos4i RasterPos4i = new Delegates.RasterPos4i(Imports.RasterPos4i);
        public static Delegates.RasterPos4iv_ RasterPos4iv_ = new Delegates.RasterPos4iv_(Imports.RasterPos4iv_);
        public static Delegates.RasterPos4s RasterPos4s = new Delegates.RasterPos4s(Imports.RasterPos4s);
        public static Delegates.RasterPos4sv_ RasterPos4sv_ = new Delegates.RasterPos4sv_(Imports.RasterPos4sv_);
        public static Delegates.Rectd Rectd = new Delegates.Rectd(Imports.Rectd);
        public static Delegates.Rectdv_ Rectdv_ = new Delegates.Rectdv_(Imports.Rectdv_);
        public static Delegates.Rectf Rectf = new Delegates.Rectf(Imports.Rectf);
        public static Delegates.Rectfv_ Rectfv_ = new Delegates.Rectfv_(Imports.Rectfv_);
        public static Delegates.Recti Recti = new Delegates.Recti(Imports.Recti);
        public static Delegates.Rectiv_ Rectiv_ = new Delegates.Rectiv_(Imports.Rectiv_);
        public static Delegates.Rects Rects = new Delegates.Rects(Imports.Rects);
        public static Delegates.Rectsv_ Rectsv_ = new Delegates.Rectsv_(Imports.Rectsv_);
        public static Delegates.TexCoord1d TexCoord1d = new Delegates.TexCoord1d(Imports.TexCoord1d);
        public static Delegates.TexCoord1dv_ TexCoord1dv_ = new Delegates.TexCoord1dv_(Imports.TexCoord1dv_);
        public static Delegates.TexCoord1f TexCoord1f = new Delegates.TexCoord1f(Imports.TexCoord1f);
        public static Delegates.TexCoord1fv_ TexCoord1fv_ = new Delegates.TexCoord1fv_(Imports.TexCoord1fv_);
        public static Delegates.TexCoord1i TexCoord1i = new Delegates.TexCoord1i(Imports.TexCoord1i);
        public static Delegates.TexCoord1iv_ TexCoord1iv_ = new Delegates.TexCoord1iv_(Imports.TexCoord1iv_);
        public static Delegates.TexCoord1s TexCoord1s = new Delegates.TexCoord1s(Imports.TexCoord1s);
        public static Delegates.TexCoord1sv_ TexCoord1sv_ = new Delegates.TexCoord1sv_(Imports.TexCoord1sv_);
        public static Delegates.TexCoord2d TexCoord2d = new Delegates.TexCoord2d(Imports.TexCoord2d);
        public static Delegates.TexCoord2dv_ TexCoord2dv_ = new Delegates.TexCoord2dv_(Imports.TexCoord2dv_);
        public static Delegates.TexCoord2f TexCoord2f = new Delegates.TexCoord2f(Imports.TexCoord2f);
        public static Delegates.TexCoord2fv_ TexCoord2fv_ = new Delegates.TexCoord2fv_(Imports.TexCoord2fv_);
        public static Delegates.TexCoord2i TexCoord2i = new Delegates.TexCoord2i(Imports.TexCoord2i);
        public static Delegates.TexCoord2iv_ TexCoord2iv_ = new Delegates.TexCoord2iv_(Imports.TexCoord2iv_);
        public static Delegates.TexCoord2s TexCoord2s = new Delegates.TexCoord2s(Imports.TexCoord2s);
        public static Delegates.TexCoord2sv_ TexCoord2sv_ = new Delegates.TexCoord2sv_(Imports.TexCoord2sv_);
        public static Delegates.TexCoord3d TexCoord3d = new Delegates.TexCoord3d(Imports.TexCoord3d);
        public static Delegates.TexCoord3dv_ TexCoord3dv_ = new Delegates.TexCoord3dv_(Imports.TexCoord3dv_);
        public static Delegates.TexCoord3f TexCoord3f = new Delegates.TexCoord3f(Imports.TexCoord3f);
        public static Delegates.TexCoord3fv_ TexCoord3fv_ = new Delegates.TexCoord3fv_(Imports.TexCoord3fv_);
        public static Delegates.TexCoord3i TexCoord3i = new Delegates.TexCoord3i(Imports.TexCoord3i);
        public static Delegates.TexCoord3iv_ TexCoord3iv_ = new Delegates.TexCoord3iv_(Imports.TexCoord3iv_);
        public static Delegates.TexCoord3s TexCoord3s = new Delegates.TexCoord3s(Imports.TexCoord3s);
        public static Delegates.TexCoord3sv_ TexCoord3sv_ = new Delegates.TexCoord3sv_(Imports.TexCoord3sv_);
        public static Delegates.TexCoord4d TexCoord4d = new Delegates.TexCoord4d(Imports.TexCoord4d);
        public static Delegates.TexCoord4dv_ TexCoord4dv_ = new Delegates.TexCoord4dv_(Imports.TexCoord4dv_);
        public static Delegates.TexCoord4f TexCoord4f = new Delegates.TexCoord4f(Imports.TexCoord4f);
        public static Delegates.TexCoord4fv_ TexCoord4fv_ = new Delegates.TexCoord4fv_(Imports.TexCoord4fv_);
        public static Delegates.TexCoord4i TexCoord4i = new Delegates.TexCoord4i(Imports.TexCoord4i);
        public static Delegates.TexCoord4iv_ TexCoord4iv_ = new Delegates.TexCoord4iv_(Imports.TexCoord4iv_);
        public static Delegates.TexCoord4s TexCoord4s = new Delegates.TexCoord4s(Imports.TexCoord4s);
        public static Delegates.TexCoord4sv_ TexCoord4sv_ = new Delegates.TexCoord4sv_(Imports.TexCoord4sv_);
        public static Delegates.Vertex2d Vertex2d = new Delegates.Vertex2d(Imports.Vertex2d);
        public static Delegates.Vertex2dv_ Vertex2dv_ = new Delegates.Vertex2dv_(Imports.Vertex2dv_);
        public static Delegates.Vertex2f Vertex2f = new Delegates.Vertex2f(Imports.Vertex2f);
        public static Delegates.Vertex2fv_ Vertex2fv_ = new Delegates.Vertex2fv_(Imports.Vertex2fv_);
        public static Delegates.Vertex2i Vertex2i = new Delegates.Vertex2i(Imports.Vertex2i);
        public static Delegates.Vertex2iv_ Vertex2iv_ = new Delegates.Vertex2iv_(Imports.Vertex2iv_);
        public static Delegates.Vertex2s Vertex2s = new Delegates.Vertex2s(Imports.Vertex2s);
        public static Delegates.Vertex2sv_ Vertex2sv_ = new Delegates.Vertex2sv_(Imports.Vertex2sv_);
        public static Delegates.Vertex3d Vertex3d = new Delegates.Vertex3d(Imports.Vertex3d);
        public static Delegates.Vertex3dv_ Vertex3dv_ = new Delegates.Vertex3dv_(Imports.Vertex3dv_);
        public static Delegates.Vertex3f Vertex3f = new Delegates.Vertex3f(Imports.Vertex3f);
        public static Delegates.Vertex3fv_ Vertex3fv_ = new Delegates.Vertex3fv_(Imports.Vertex3fv_);
        public static Delegates.Vertex3i Vertex3i = new Delegates.Vertex3i(Imports.Vertex3i);
        public static Delegates.Vertex3iv_ Vertex3iv_ = new Delegates.Vertex3iv_(Imports.Vertex3iv_);
        public static Delegates.Vertex3s Vertex3s = new Delegates.Vertex3s(Imports.Vertex3s);
        public static Delegates.Vertex3sv_ Vertex3sv_ = new Delegates.Vertex3sv_(Imports.Vertex3sv_);
        public static Delegates.Vertex4d Vertex4d = new Delegates.Vertex4d(Imports.Vertex4d);
        public static Delegates.Vertex4dv_ Vertex4dv_ = new Delegates.Vertex4dv_(Imports.Vertex4dv_);
        public static Delegates.Vertex4f Vertex4f = new Delegates.Vertex4f(Imports.Vertex4f);
        public static Delegates.Vertex4fv_ Vertex4fv_ = new Delegates.Vertex4fv_(Imports.Vertex4fv_);
        public static Delegates.Vertex4i Vertex4i = new Delegates.Vertex4i(Imports.Vertex4i);
        public static Delegates.Vertex4iv_ Vertex4iv_ = new Delegates.Vertex4iv_(Imports.Vertex4iv_);
        public static Delegates.Vertex4s Vertex4s = new Delegates.Vertex4s(Imports.Vertex4s);
        public static Delegates.Vertex4sv_ Vertex4sv_ = new Delegates.Vertex4sv_(Imports.Vertex4sv_);
        public static Delegates.ClipPlane_ ClipPlane_ = new Delegates.ClipPlane_(Imports.ClipPlane_);
        public static Delegates.ColorMaterial ColorMaterial = new Delegates.ColorMaterial(Imports.ColorMaterial);
        public static Delegates.CullFace CullFace = new Delegates.CullFace(Imports.CullFace);
        public static Delegates.Fogf Fogf = new Delegates.Fogf(Imports.Fogf);
        public static Delegates.Fogfv_ Fogfv_ = new Delegates.Fogfv_(Imports.Fogfv_);
        public static Delegates.Fogi Fogi = new Delegates.Fogi(Imports.Fogi);
        public static Delegates.Fogiv_ Fogiv_ = new Delegates.Fogiv_(Imports.Fogiv_);
        public static Delegates.FrontFace FrontFace = new Delegates.FrontFace(Imports.FrontFace);
        public static Delegates.Hint Hint = new Delegates.Hint(Imports.Hint);
        public static Delegates.Lightf Lightf = new Delegates.Lightf(Imports.Lightf);
        public static Delegates.Lightfv_ Lightfv_ = new Delegates.Lightfv_(Imports.Lightfv_);
        public static Delegates.Lighti Lighti = new Delegates.Lighti(Imports.Lighti);
        public static Delegates.Lightiv_ Lightiv_ = new Delegates.Lightiv_(Imports.Lightiv_);
        public static Delegates.LightModelf LightModelf = new Delegates.LightModelf(Imports.LightModelf);
        public static Delegates.LightModelfv_ LightModelfv_ = new Delegates.LightModelfv_(Imports.LightModelfv_);
        public static Delegates.LightModeli LightModeli = new Delegates.LightModeli(Imports.LightModeli);
        public static Delegates.LightModeliv_ LightModeliv_ = new Delegates.LightModeliv_(Imports.LightModeliv_);
        public static Delegates.LineStipple_ LineStipple_ = new Delegates.LineStipple_(Imports.LineStipple_);
        public static Delegates.LineWidth LineWidth = new Delegates.LineWidth(Imports.LineWidth);
        public static Delegates.Materialf Materialf = new Delegates.Materialf(Imports.Materialf);
        public static Delegates.Materialfv_ Materialfv_ = new Delegates.Materialfv_(Imports.Materialfv_);
        public static Delegates.Materiali Materiali = new Delegates.Materiali(Imports.Materiali);
        public static Delegates.Materialiv_ Materialiv_ = new Delegates.Materialiv_(Imports.Materialiv_);
        public static Delegates.PointSize PointSize = new Delegates.PointSize(Imports.PointSize);
        public static Delegates.PolygonMode PolygonMode = new Delegates.PolygonMode(Imports.PolygonMode);
        public static Delegates.PolygonStipple_ PolygonStipple_ = new Delegates.PolygonStipple_(Imports.PolygonStipple_);
        public static Delegates.Scissor Scissor = new Delegates.Scissor(Imports.Scissor);
        public static Delegates.ShadeModel ShadeModel = new Delegates.ShadeModel(Imports.ShadeModel);
        public static Delegates.TexParameterf TexParameterf = new Delegates.TexParameterf(Imports.TexParameterf);
        public static Delegates.TexParameterfv_ TexParameterfv_ = new Delegates.TexParameterfv_(Imports.TexParameterfv_);
        public static Delegates.TexParameteri TexParameteri = new Delegates.TexParameteri(Imports.TexParameteri);
        public static Delegates.TexParameteriv_ TexParameteriv_ = new Delegates.TexParameteriv_(Imports.TexParameteriv_);
        public static Delegates.TexImage1D_ TexImage1D_ = new Delegates.TexImage1D_(Imports.TexImage1D_);
        public static Delegates.TexImage2D_ TexImage2D_ = new Delegates.TexImage2D_(Imports.TexImage2D_);
        public static Delegates.TexEnvf TexEnvf = new Delegates.TexEnvf(Imports.TexEnvf);
        public static Delegates.TexEnvfv_ TexEnvfv_ = new Delegates.TexEnvfv_(Imports.TexEnvfv_);
        public static Delegates.TexEnvi TexEnvi = new Delegates.TexEnvi(Imports.TexEnvi);
        public static Delegates.TexEnviv_ TexEnviv_ = new Delegates.TexEnviv_(Imports.TexEnviv_);
        public static Delegates.TexGend TexGend = new Delegates.TexGend(Imports.TexGend);
        public static Delegates.TexGendv_ TexGendv_ = new Delegates.TexGendv_(Imports.TexGendv_);
        public static Delegates.TexGenf TexGenf = new Delegates.TexGenf(Imports.TexGenf);
        public static Delegates.TexGenfv_ TexGenfv_ = new Delegates.TexGenfv_(Imports.TexGenfv_);
        public static Delegates.TexGeni TexGeni = new Delegates.TexGeni(Imports.TexGeni);
        public static Delegates.TexGeniv_ TexGeniv_ = new Delegates.TexGeniv_(Imports.TexGeniv_);
        public static Delegates.FeedbackBuffer_ FeedbackBuffer_ = new Delegates.FeedbackBuffer_(Imports.FeedbackBuffer_);
        public static Delegates.SelectBuffer_ SelectBuffer_ = new Delegates.SelectBuffer_(Imports.SelectBuffer_);
        public static Delegates.RenderMode RenderMode = new Delegates.RenderMode(Imports.RenderMode);
        public static Delegates.InitNames InitNames = new Delegates.InitNames(Imports.InitNames);
        public static Delegates.LoadName LoadName = new Delegates.LoadName(Imports.LoadName);
        public static Delegates.PassThrough PassThrough = new Delegates.PassThrough(Imports.PassThrough);
        public static Delegates.PopName PopName = new Delegates.PopName(Imports.PopName);
        public static Delegates.PushName PushName = new Delegates.PushName(Imports.PushName);
        public static Delegates.DrawBuffer DrawBuffer = new Delegates.DrawBuffer(Imports.DrawBuffer);
        public static Delegates.Clear Clear = new Delegates.Clear(Imports.Clear);
        public static Delegates.ClearAccum ClearAccum = new Delegates.ClearAccum(Imports.ClearAccum);
        public static Delegates.ClearIndex ClearIndex = new Delegates.ClearIndex(Imports.ClearIndex);
        public static Delegates.ClearColor ClearColor = new Delegates.ClearColor(Imports.ClearColor);
        public static Delegates.ClearStencil ClearStencil = new Delegates.ClearStencil(Imports.ClearStencil);
        public static Delegates.ClearDepth ClearDepth = new Delegates.ClearDepth(Imports.ClearDepth);
        public static Delegates.StencilMask StencilMask = new Delegates.StencilMask(Imports.StencilMask);
        public static Delegates.ColorMask ColorMask = new Delegates.ColorMask(Imports.ColorMask);
        public static Delegates.DepthMask DepthMask = new Delegates.DepthMask(Imports.DepthMask);
        public static Delegates.IndexMask IndexMask = new Delegates.IndexMask(Imports.IndexMask);
        public static Delegates.Accum Accum = new Delegates.Accum(Imports.Accum);
        public static Delegates.Disable Disable = new Delegates.Disable(Imports.Disable);
        public static Delegates.Enable Enable = new Delegates.Enable(Imports.Enable);
        public static Delegates.Finish Finish = new Delegates.Finish(Imports.Finish);
        public static Delegates.Flush Flush = new Delegates.Flush(Imports.Flush);
        public static Delegates.PopAttrib PopAttrib = new Delegates.PopAttrib(Imports.PopAttrib);
        public static Delegates.PushAttrib PushAttrib = new Delegates.PushAttrib(Imports.PushAttrib);
        public static Delegates.Map1d_ Map1d_ = new Delegates.Map1d_(Imports.Map1d_);
        public static Delegates.Map1f_ Map1f_ = new Delegates.Map1f_(Imports.Map1f_);
        public static Delegates.Map2d_ Map2d_ = new Delegates.Map2d_(Imports.Map2d_);
        public static Delegates.Map2f_ Map2f_ = new Delegates.Map2f_(Imports.Map2f_);
        public static Delegates.MapGrid1d MapGrid1d = new Delegates.MapGrid1d(Imports.MapGrid1d);
        public static Delegates.MapGrid1f MapGrid1f = new Delegates.MapGrid1f(Imports.MapGrid1f);
        public static Delegates.MapGrid2d MapGrid2d = new Delegates.MapGrid2d(Imports.MapGrid2d);
        public static Delegates.MapGrid2f MapGrid2f = new Delegates.MapGrid2f(Imports.MapGrid2f);
        public static Delegates.EvalCoord1d EvalCoord1d = new Delegates.EvalCoord1d(Imports.EvalCoord1d);
        public static Delegates.EvalCoord1dv_ EvalCoord1dv_ = new Delegates.EvalCoord1dv_(Imports.EvalCoord1dv_);
        public static Delegates.EvalCoord1f EvalCoord1f = new Delegates.EvalCoord1f(Imports.EvalCoord1f);
        public static Delegates.EvalCoord1fv_ EvalCoord1fv_ = new Delegates.EvalCoord1fv_(Imports.EvalCoord1fv_);
        public static Delegates.EvalCoord2d EvalCoord2d = new Delegates.EvalCoord2d(Imports.EvalCoord2d);
        public static Delegates.EvalCoord2dv_ EvalCoord2dv_ = new Delegates.EvalCoord2dv_(Imports.EvalCoord2dv_);
        public static Delegates.EvalCoord2f EvalCoord2f = new Delegates.EvalCoord2f(Imports.EvalCoord2f);
        public static Delegates.EvalCoord2fv_ EvalCoord2fv_ = new Delegates.EvalCoord2fv_(Imports.EvalCoord2fv_);
        public static Delegates.EvalMesh1 EvalMesh1 = new Delegates.EvalMesh1(Imports.EvalMesh1);
        public static Delegates.EvalPoint1 EvalPoint1 = new Delegates.EvalPoint1(Imports.EvalPoint1);
        public static Delegates.EvalMesh2 EvalMesh2 = new Delegates.EvalMesh2(Imports.EvalMesh2);
        public static Delegates.EvalPoint2 EvalPoint2 = new Delegates.EvalPoint2(Imports.EvalPoint2);
        public static Delegates.AlphaFunc AlphaFunc = new Delegates.AlphaFunc(Imports.AlphaFunc);
        public static Delegates.BlendFunc BlendFunc = new Delegates.BlendFunc(Imports.BlendFunc);
        public static Delegates.LogicOp LogicOp = new Delegates.LogicOp(Imports.LogicOp);
        public static Delegates.StencilFunc StencilFunc = new Delegates.StencilFunc(Imports.StencilFunc);
        public static Delegates.StencilOp StencilOp = new Delegates.StencilOp(Imports.StencilOp);
        public static Delegates.DepthFunc DepthFunc = new Delegates.DepthFunc(Imports.DepthFunc);
        public static Delegates.PixelZoom PixelZoom = new Delegates.PixelZoom(Imports.PixelZoom);
        public static Delegates.PixelTransferf PixelTransferf = new Delegates.PixelTransferf(Imports.PixelTransferf);
        public static Delegates.PixelTransferi PixelTransferi = new Delegates.PixelTransferi(Imports.PixelTransferi);
        public static Delegates.PixelStoref PixelStoref = new Delegates.PixelStoref(Imports.PixelStoref);
        public static Delegates.PixelStorei PixelStorei = new Delegates.PixelStorei(Imports.PixelStorei);
        public static Delegates.PixelMapfv_ PixelMapfv_ = new Delegates.PixelMapfv_(Imports.PixelMapfv_);
        public static Delegates.PixelMapuiv_ PixelMapuiv_ = new Delegates.PixelMapuiv_(Imports.PixelMapuiv_);
        public static Delegates.PixelMapusv_ PixelMapusv_ = new Delegates.PixelMapusv_(Imports.PixelMapusv_);
        public static Delegates.ReadBuffer ReadBuffer = new Delegates.ReadBuffer(Imports.ReadBuffer);
        public static Delegates.CopyPixels CopyPixels = new Delegates.CopyPixels(Imports.CopyPixels);
        public static Delegates.ReadPixels_ ReadPixels_ = new Delegates.ReadPixels_(Imports.ReadPixels_);
        public static Delegates.DrawPixels_ DrawPixels_ = new Delegates.DrawPixels_(Imports.DrawPixels_);
        public static Delegates.GetBooleanv_ GetBooleanv_ = new Delegates.GetBooleanv_(Imports.GetBooleanv_);
        public static Delegates.GetClipPlane_ GetClipPlane_ = new Delegates.GetClipPlane_(Imports.GetClipPlane_);
        public static Delegates.GetDoublev_ GetDoublev_ = new Delegates.GetDoublev_(Imports.GetDoublev_);
        public static Delegates.GetError GetError = new Delegates.GetError(Imports.GetError);
        public static Delegates.GetFloatv_ GetFloatv_ = new Delegates.GetFloatv_(Imports.GetFloatv_);
        public static Delegates.GetIntegerv_ GetIntegerv_ = new Delegates.GetIntegerv_(Imports.GetIntegerv_);
        public static Delegates.GetLightfv_ GetLightfv_ = new Delegates.GetLightfv_(Imports.GetLightfv_);
        public static Delegates.GetLightiv_ GetLightiv_ = new Delegates.GetLightiv_(Imports.GetLightiv_);
        public static Delegates.GetMapdv_ GetMapdv_ = new Delegates.GetMapdv_(Imports.GetMapdv_);
        public static Delegates.GetMapfv_ GetMapfv_ = new Delegates.GetMapfv_(Imports.GetMapfv_);
        public static Delegates.GetMapiv_ GetMapiv_ = new Delegates.GetMapiv_(Imports.GetMapiv_);
        public static Delegates.GetMaterialfv_ GetMaterialfv_ = new Delegates.GetMaterialfv_(Imports.GetMaterialfv_);
        public static Delegates.GetMaterialiv_ GetMaterialiv_ = new Delegates.GetMaterialiv_(Imports.GetMaterialiv_);
        public static Delegates.GetPixelMapfv_ GetPixelMapfv_ = new Delegates.GetPixelMapfv_(Imports.GetPixelMapfv_);
        public static Delegates.GetPixelMapuiv_ GetPixelMapuiv_ = new Delegates.GetPixelMapuiv_(Imports.GetPixelMapuiv_);
        public static Delegates.GetPixelMapusv_ GetPixelMapusv_ = new Delegates.GetPixelMapusv_(Imports.GetPixelMapusv_);
        public static Delegates.GetPolygonStipple_ GetPolygonStipple_ = new Delegates.GetPolygonStipple_(Imports.GetPolygonStipple_);
        public static Delegates.GetString_ GetString_ = new Delegates.GetString_(Imports.GetString_);
        public static Delegates.GetTexEnvfv_ GetTexEnvfv_ = new Delegates.GetTexEnvfv_(Imports.GetTexEnvfv_);
        public static Delegates.GetTexEnviv_ GetTexEnviv_ = new Delegates.GetTexEnviv_(Imports.GetTexEnviv_);
        public static Delegates.GetTexGendv_ GetTexGendv_ = new Delegates.GetTexGendv_(Imports.GetTexGendv_);
        public static Delegates.GetTexGenfv_ GetTexGenfv_ = new Delegates.GetTexGenfv_(Imports.GetTexGenfv_);
        public static Delegates.GetTexGeniv_ GetTexGeniv_ = new Delegates.GetTexGeniv_(Imports.GetTexGeniv_);
        public static Delegates.GetTexImage_ GetTexImage_ = new Delegates.GetTexImage_(Imports.GetTexImage_);
        public static Delegates.GetTexParameterfv_ GetTexParameterfv_ = new Delegates.GetTexParameterfv_(Imports.GetTexParameterfv_);
        public static Delegates.GetTexParameteriv_ GetTexParameteriv_ = new Delegates.GetTexParameteriv_(Imports.GetTexParameteriv_);
        public static Delegates.GetTexLevelParameterfv_ GetTexLevelParameterfv_ = new Delegates.GetTexLevelParameterfv_(Imports.GetTexLevelParameterfv_);
        public static Delegates.GetTexLevelParameteriv_ GetTexLevelParameteriv_ = new Delegates.GetTexLevelParameteriv_(Imports.GetTexLevelParameteriv_);
        public static Delegates.IsEnabled IsEnabled = new Delegates.IsEnabled(Imports.IsEnabled);
        public static Delegates.IsList IsList = new Delegates.IsList(Imports.IsList);
        public static Delegates.DepthRange DepthRange = new Delegates.DepthRange(Imports.DepthRange);
        public static Delegates.Frustum Frustum = new Delegates.Frustum(Imports.Frustum);
        public static Delegates.LoadIdentity LoadIdentity = new Delegates.LoadIdentity(Imports.LoadIdentity);
        public static Delegates.LoadMatrixf_ LoadMatrixf_ = new Delegates.LoadMatrixf_(Imports.LoadMatrixf_);
        public static Delegates.LoadMatrixd_ LoadMatrixd_ = new Delegates.LoadMatrixd_(Imports.LoadMatrixd_);
        public static Delegates.MatrixMode MatrixMode = new Delegates.MatrixMode(Imports.MatrixMode);
        public static Delegates.MultMatrixf_ MultMatrixf_ = new Delegates.MultMatrixf_(Imports.MultMatrixf_);
        public static Delegates.MultMatrixd_ MultMatrixd_ = new Delegates.MultMatrixd_(Imports.MultMatrixd_);
        public static Delegates.Ortho Ortho = new Delegates.Ortho(Imports.Ortho);
        public static Delegates.PopMatrix PopMatrix = new Delegates.PopMatrix(Imports.PopMatrix);
        public static Delegates.PushMatrix PushMatrix = new Delegates.PushMatrix(Imports.PushMatrix);
        public static Delegates.Rotated Rotated = new Delegates.Rotated(Imports.Rotated);
        public static Delegates.Rotatef Rotatef = new Delegates.Rotatef(Imports.Rotatef);
        public static Delegates.Scaled Scaled = new Delegates.Scaled(Imports.Scaled);
        public static Delegates.Scalef Scalef = new Delegates.Scalef(Imports.Scalef);
        public static Delegates.Translated Translated = new Delegates.Translated(Imports.Translated);
        public static Delegates.Translatef Translatef = new Delegates.Translatef(Imports.Translatef);
        public static Delegates.Viewport Viewport = new Delegates.Viewport(Imports.Viewport);
        public static Delegates.ArrayElement ArrayElement = new Delegates.ArrayElement(Imports.ArrayElement);
        public static Delegates.ColorPointer_ ColorPointer_ = new Delegates.ColorPointer_(Imports.ColorPointer_);
        public static Delegates.DisableClientState DisableClientState = new Delegates.DisableClientState(Imports.DisableClientState);
        public static Delegates.DrawArrays DrawArrays = new Delegates.DrawArrays(Imports.DrawArrays);
        public static Delegates.DrawElements_ DrawElements_ = new Delegates.DrawElements_(Imports.DrawElements_);
        public static Delegates.EdgeFlagPointer_ EdgeFlagPointer_ = new Delegates.EdgeFlagPointer_(Imports.EdgeFlagPointer_);
        public static Delegates.EnableClientState EnableClientState = new Delegates.EnableClientState(Imports.EnableClientState);
        public static Delegates.GetPointerv_ GetPointerv_ = new Delegates.GetPointerv_(Imports.GetPointerv_);
        public static Delegates.IndexPointer_ IndexPointer_ = new Delegates.IndexPointer_(Imports.IndexPointer_);
        public static Delegates.InterleavedArrays_ InterleavedArrays_ = new Delegates.InterleavedArrays_(Imports.InterleavedArrays_);
        public static Delegates.NormalPointer_ NormalPointer_ = new Delegates.NormalPointer_(Imports.NormalPointer_);
        public static Delegates.TexCoordPointer_ TexCoordPointer_ = new Delegates.TexCoordPointer_(Imports.TexCoordPointer_);
        public static Delegates.VertexPointer_ VertexPointer_ = new Delegates.VertexPointer_(Imports.VertexPointer_);
        public static Delegates.PolygonOffset PolygonOffset = new Delegates.PolygonOffset(Imports.PolygonOffset);
        public static Delegates.CopyTexImage1D CopyTexImage1D = new Delegates.CopyTexImage1D(Imports.CopyTexImage1D);
        public static Delegates.CopyTexImage2D CopyTexImage2D = new Delegates.CopyTexImage2D(Imports.CopyTexImage2D);
        public static Delegates.CopyTexSubImage1D CopyTexSubImage1D = new Delegates.CopyTexSubImage1D(Imports.CopyTexSubImage1D);
        public static Delegates.CopyTexSubImage2D CopyTexSubImage2D = new Delegates.CopyTexSubImage2D(Imports.CopyTexSubImage2D);
        public static Delegates.TexSubImage1D_ TexSubImage1D_ = new Delegates.TexSubImage1D_(Imports.TexSubImage1D_);
        public static Delegates.TexSubImage2D_ TexSubImage2D_ = new Delegates.TexSubImage2D_(Imports.TexSubImage2D_);
        public static Delegates.AreTexturesResident_ AreTexturesResident_ = new Delegates.AreTexturesResident_(Imports.AreTexturesResident_);
        public static Delegates.BindTexture BindTexture = new Delegates.BindTexture(Imports.BindTexture);
        public static Delegates.DeleteTextures_ DeleteTextures_ = new Delegates.DeleteTextures_(Imports.DeleteTextures_);
        public static Delegates.GenTextures_ GenTextures_ = new Delegates.GenTextures_(Imports.GenTextures_);
        public static Delegates.IsTexture IsTexture = new Delegates.IsTexture(Imports.IsTexture);
        public static Delegates.PrioritizeTextures_ PrioritizeTextures_ = new Delegates.PrioritizeTextures_(Imports.PrioritizeTextures_);
        public static Delegates.Indexub Indexub = new Delegates.Indexub(Imports.Indexub);
        public static Delegates.Indexubv_ Indexubv_ = new Delegates.Indexubv_(Imports.Indexubv_);
        public static Delegates.PopClientAttrib PopClientAttrib = new Delegates.PopClientAttrib(Imports.PopClientAttrib);
        public static Delegates.PushClientAttrib PushClientAttrib = new Delegates.PushClientAttrib(Imports.PushClientAttrib);
        public static Delegates.BlendColor BlendColor = new Delegates.BlendColor(Imports.BlendColor);
        public static Delegates.BlendEquation BlendEquation = new Delegates.BlendEquation(Imports.BlendEquation);
        public static Delegates.DrawRangeElements_ DrawRangeElements_ = new Delegates.DrawRangeElements_(Imports.DrawRangeElements_);
        public static Delegates.ColorTable_ ColorTable_ = new Delegates.ColorTable_(Imports.ColorTable_);
        public static Delegates.ColorTableParameterfv_ ColorTableParameterfv_ = new Delegates.ColorTableParameterfv_(Imports.ColorTableParameterfv_);
        public static Delegates.ColorTableParameteriv_ ColorTableParameteriv_ = new Delegates.ColorTableParameteriv_(Imports.ColorTableParameteriv_);
        public static Delegates.CopyColorTable CopyColorTable = new Delegates.CopyColorTable(Imports.CopyColorTable);
        public static Delegates.GetColorTable_ GetColorTable_ = new Delegates.GetColorTable_(Imports.GetColorTable_);
        public static Delegates.GetColorTableParameterfv_ GetColorTableParameterfv_ = new Delegates.GetColorTableParameterfv_(Imports.GetColorTableParameterfv_);
        public static Delegates.GetColorTableParameteriv_ GetColorTableParameteriv_ = new Delegates.GetColorTableParameteriv_(Imports.GetColorTableParameteriv_);
        public static Delegates.ColorSubTable_ ColorSubTable_ = new Delegates.ColorSubTable_(Imports.ColorSubTable_);
        public static Delegates.CopyColorSubTable CopyColorSubTable = new Delegates.CopyColorSubTable(Imports.CopyColorSubTable);
        public static Delegates.ConvolutionFilter1D_ ConvolutionFilter1D_ = new Delegates.ConvolutionFilter1D_(Imports.ConvolutionFilter1D_);
        public static Delegates.ConvolutionFilter2D_ ConvolutionFilter2D_ = new Delegates.ConvolutionFilter2D_(Imports.ConvolutionFilter2D_);
        public static Delegates.ConvolutionParameterf ConvolutionParameterf = new Delegates.ConvolutionParameterf(Imports.ConvolutionParameterf);
        public static Delegates.ConvolutionParameterfv_ ConvolutionParameterfv_ = new Delegates.ConvolutionParameterfv_(Imports.ConvolutionParameterfv_);
        public static Delegates.ConvolutionParameteri ConvolutionParameteri = new Delegates.ConvolutionParameteri(Imports.ConvolutionParameteri);
        public static Delegates.ConvolutionParameteriv_ ConvolutionParameteriv_ = new Delegates.ConvolutionParameteriv_(Imports.ConvolutionParameteriv_);
        public static Delegates.CopyConvolutionFilter1D CopyConvolutionFilter1D = new Delegates.CopyConvolutionFilter1D(Imports.CopyConvolutionFilter1D);
        public static Delegates.CopyConvolutionFilter2D CopyConvolutionFilter2D = new Delegates.CopyConvolutionFilter2D(Imports.CopyConvolutionFilter2D);
        public static Delegates.GetConvolutionFilter_ GetConvolutionFilter_ = new Delegates.GetConvolutionFilter_(Imports.GetConvolutionFilter_);
        public static Delegates.GetConvolutionParameterfv_ GetConvolutionParameterfv_ = new Delegates.GetConvolutionParameterfv_(Imports.GetConvolutionParameterfv_);
        public static Delegates.GetConvolutionParameteriv_ GetConvolutionParameteriv_ = new Delegates.GetConvolutionParameteriv_(Imports.GetConvolutionParameteriv_);
        public static Delegates.GetSeparableFilter_ GetSeparableFilter_ = new Delegates.GetSeparableFilter_(Imports.GetSeparableFilter_);
        public static Delegates.SeparableFilter2D_ SeparableFilter2D_ = new Delegates.SeparableFilter2D_(Imports.SeparableFilter2D_);
        public static Delegates.GetHistogram_ GetHistogram_ = new Delegates.GetHistogram_(Imports.GetHistogram_);
        public static Delegates.GetHistogramParameterfv_ GetHistogramParameterfv_ = new Delegates.GetHistogramParameterfv_(Imports.GetHistogramParameterfv_);
        public static Delegates.GetHistogramParameteriv_ GetHistogramParameteriv_ = new Delegates.GetHistogramParameteriv_(Imports.GetHistogramParameteriv_);
        public static Delegates.GetMinmax_ GetMinmax_ = new Delegates.GetMinmax_(Imports.GetMinmax_);
        public static Delegates.GetMinmaxParameterfv_ GetMinmaxParameterfv_ = new Delegates.GetMinmaxParameterfv_(Imports.GetMinmaxParameterfv_);
        public static Delegates.GetMinmaxParameteriv_ GetMinmaxParameteriv_ = new Delegates.GetMinmaxParameteriv_(Imports.GetMinmaxParameteriv_);
        public static Delegates.Histogram Histogram = new Delegates.Histogram(Imports.Histogram);
        public static Delegates.Minmax Minmax = new Delegates.Minmax(Imports.Minmax);
        public static Delegates.ResetHistogram ResetHistogram = new Delegates.ResetHistogram(Imports.ResetHistogram);
        public static Delegates.ResetMinmax ResetMinmax = new Delegates.ResetMinmax(Imports.ResetMinmax);
        public static Delegates.TexImage3D_ TexImage3D_ = new Delegates.TexImage3D_(Imports.TexImage3D_);
        public static Delegates.TexSubImage3D_ TexSubImage3D_ = new Delegates.TexSubImage3D_(Imports.TexSubImage3D_);
        public static Delegates.CopyTexSubImage3D CopyTexSubImage3D = new Delegates.CopyTexSubImage3D(Imports.CopyTexSubImage3D);
        public static Delegates.ActiveTexture ActiveTexture = new Delegates.ActiveTexture(Imports.ActiveTexture);
        public static Delegates.ClientActiveTexture ClientActiveTexture = new Delegates.ClientActiveTexture(Imports.ClientActiveTexture);
        public static Delegates.MultiTexCoord1d MultiTexCoord1d = new Delegates.MultiTexCoord1d(Imports.MultiTexCoord1d);
        public static Delegates.MultiTexCoord1dv_ MultiTexCoord1dv_ = new Delegates.MultiTexCoord1dv_(Imports.MultiTexCoord1dv_);
        public static Delegates.MultiTexCoord1f MultiTexCoord1f = new Delegates.MultiTexCoord1f(Imports.MultiTexCoord1f);
        public static Delegates.MultiTexCoord1fv_ MultiTexCoord1fv_ = new Delegates.MultiTexCoord1fv_(Imports.MultiTexCoord1fv_);
        public static Delegates.MultiTexCoord1i MultiTexCoord1i = new Delegates.MultiTexCoord1i(Imports.MultiTexCoord1i);
        public static Delegates.MultiTexCoord1iv_ MultiTexCoord1iv_ = new Delegates.MultiTexCoord1iv_(Imports.MultiTexCoord1iv_);
        public static Delegates.MultiTexCoord1s MultiTexCoord1s = new Delegates.MultiTexCoord1s(Imports.MultiTexCoord1s);
        public static Delegates.MultiTexCoord1sv_ MultiTexCoord1sv_ = new Delegates.MultiTexCoord1sv_(Imports.MultiTexCoord1sv_);
        public static Delegates.MultiTexCoord2d MultiTexCoord2d = new Delegates.MultiTexCoord2d(Imports.MultiTexCoord2d);
        public static Delegates.MultiTexCoord2dv_ MultiTexCoord2dv_ = new Delegates.MultiTexCoord2dv_(Imports.MultiTexCoord2dv_);
        public static Delegates.MultiTexCoord2f MultiTexCoord2f = new Delegates.MultiTexCoord2f(Imports.MultiTexCoord2f);
        public static Delegates.MultiTexCoord2fv_ MultiTexCoord2fv_ = new Delegates.MultiTexCoord2fv_(Imports.MultiTexCoord2fv_);
        public static Delegates.MultiTexCoord2i MultiTexCoord2i = new Delegates.MultiTexCoord2i(Imports.MultiTexCoord2i);
        public static Delegates.MultiTexCoord2iv_ MultiTexCoord2iv_ = new Delegates.MultiTexCoord2iv_(Imports.MultiTexCoord2iv_);
        public static Delegates.MultiTexCoord2s MultiTexCoord2s = new Delegates.MultiTexCoord2s(Imports.MultiTexCoord2s);
        public static Delegates.MultiTexCoord2sv_ MultiTexCoord2sv_ = new Delegates.MultiTexCoord2sv_(Imports.MultiTexCoord2sv_);
        public static Delegates.MultiTexCoord3d MultiTexCoord3d = new Delegates.MultiTexCoord3d(Imports.MultiTexCoord3d);
        public static Delegates.MultiTexCoord3dv_ MultiTexCoord3dv_ = new Delegates.MultiTexCoord3dv_(Imports.MultiTexCoord3dv_);
        public static Delegates.MultiTexCoord3f MultiTexCoord3f = new Delegates.MultiTexCoord3f(Imports.MultiTexCoord3f);
        public static Delegates.MultiTexCoord3fv_ MultiTexCoord3fv_ = new Delegates.MultiTexCoord3fv_(Imports.MultiTexCoord3fv_);
        public static Delegates.MultiTexCoord3i MultiTexCoord3i = new Delegates.MultiTexCoord3i(Imports.MultiTexCoord3i);
        public static Delegates.MultiTexCoord3iv_ MultiTexCoord3iv_ = new Delegates.MultiTexCoord3iv_(Imports.MultiTexCoord3iv_);
        public static Delegates.MultiTexCoord3s MultiTexCoord3s = new Delegates.MultiTexCoord3s(Imports.MultiTexCoord3s);
        public static Delegates.MultiTexCoord3sv_ MultiTexCoord3sv_ = new Delegates.MultiTexCoord3sv_(Imports.MultiTexCoord3sv_);
        public static Delegates.MultiTexCoord4d MultiTexCoord4d = new Delegates.MultiTexCoord4d(Imports.MultiTexCoord4d);
        public static Delegates.MultiTexCoord4dv_ MultiTexCoord4dv_ = new Delegates.MultiTexCoord4dv_(Imports.MultiTexCoord4dv_);
        public static Delegates.MultiTexCoord4f MultiTexCoord4f = new Delegates.MultiTexCoord4f(Imports.MultiTexCoord4f);
        public static Delegates.MultiTexCoord4fv_ MultiTexCoord4fv_ = new Delegates.MultiTexCoord4fv_(Imports.MultiTexCoord4fv_);
        public static Delegates.MultiTexCoord4i MultiTexCoord4i = new Delegates.MultiTexCoord4i(Imports.MultiTexCoord4i);
        public static Delegates.MultiTexCoord4iv_ MultiTexCoord4iv_ = new Delegates.MultiTexCoord4iv_(Imports.MultiTexCoord4iv_);
        public static Delegates.MultiTexCoord4s MultiTexCoord4s = new Delegates.MultiTexCoord4s(Imports.MultiTexCoord4s);
        public static Delegates.MultiTexCoord4sv_ MultiTexCoord4sv_ = new Delegates.MultiTexCoord4sv_(Imports.MultiTexCoord4sv_);
        public static Delegates.LoadTransposeMatrixf_ LoadTransposeMatrixf_ = new Delegates.LoadTransposeMatrixf_(Imports.LoadTransposeMatrixf_);
        public static Delegates.LoadTransposeMatrixd_ LoadTransposeMatrixd_ = new Delegates.LoadTransposeMatrixd_(Imports.LoadTransposeMatrixd_);
        public static Delegates.MultTransposeMatrixf_ MultTransposeMatrixf_ = new Delegates.MultTransposeMatrixf_(Imports.MultTransposeMatrixf_);
        public static Delegates.MultTransposeMatrixd_ MultTransposeMatrixd_ = new Delegates.MultTransposeMatrixd_(Imports.MultTransposeMatrixd_);
        public static Delegates.SampleCoverage SampleCoverage = new Delegates.SampleCoverage(Imports.SampleCoverage);
        public static Delegates.CompressedTexImage3D_ CompressedTexImage3D_ = new Delegates.CompressedTexImage3D_(Imports.CompressedTexImage3D_);
        public static Delegates.CompressedTexImage2D_ CompressedTexImage2D_ = new Delegates.CompressedTexImage2D_(Imports.CompressedTexImage2D_);
        public static Delegates.CompressedTexImage1D_ CompressedTexImage1D_ = new Delegates.CompressedTexImage1D_(Imports.CompressedTexImage1D_);
        public static Delegates.CompressedTexSubImage3D_ CompressedTexSubImage3D_ = new Delegates.CompressedTexSubImage3D_(Imports.CompressedTexSubImage3D_);
        public static Delegates.CompressedTexSubImage2D_ CompressedTexSubImage2D_ = new Delegates.CompressedTexSubImage2D_(Imports.CompressedTexSubImage2D_);
        public static Delegates.CompressedTexSubImage1D_ CompressedTexSubImage1D_ = new Delegates.CompressedTexSubImage1D_(Imports.CompressedTexSubImage1D_);
        public static Delegates.GetCompressedTexImage_ GetCompressedTexImage_ = new Delegates.GetCompressedTexImage_(Imports.GetCompressedTexImage_);
        public static Delegates.BlendFuncSeparate BlendFuncSeparate = new Delegates.BlendFuncSeparate(Imports.BlendFuncSeparate);
        public static Delegates.FogCoordf FogCoordf = new Delegates.FogCoordf(Imports.FogCoordf);
        public static Delegates.FogCoordfv_ FogCoordfv_ = new Delegates.FogCoordfv_(Imports.FogCoordfv_);
        public static Delegates.FogCoordd FogCoordd = new Delegates.FogCoordd(Imports.FogCoordd);
        public static Delegates.FogCoorddv_ FogCoorddv_ = new Delegates.FogCoorddv_(Imports.FogCoorddv_);
        public static Delegates.FogCoordPointer_ FogCoordPointer_ = new Delegates.FogCoordPointer_(Imports.FogCoordPointer_);
        public static Delegates.MultiDrawArrays_ MultiDrawArrays_ = new Delegates.MultiDrawArrays_(Imports.MultiDrawArrays_);
        public static Delegates.MultiDrawElements_ MultiDrawElements_ = new Delegates.MultiDrawElements_(Imports.MultiDrawElements_);
        public static Delegates.PointParameterf PointParameterf = new Delegates.PointParameterf(Imports.PointParameterf);
        public static Delegates.PointParameterfv_ PointParameterfv_ = new Delegates.PointParameterfv_(Imports.PointParameterfv_);
        public static Delegates.PointParameteri PointParameteri = new Delegates.PointParameteri(Imports.PointParameteri);
        public static Delegates.PointParameteriv_ PointParameteriv_ = new Delegates.PointParameteriv_(Imports.PointParameteriv_);
        public static Delegates.SecondaryColor3b SecondaryColor3b = new Delegates.SecondaryColor3b(Imports.SecondaryColor3b);
        public static Delegates.SecondaryColor3bv_ SecondaryColor3bv_ = new Delegates.SecondaryColor3bv_(Imports.SecondaryColor3bv_);
        public static Delegates.SecondaryColor3d SecondaryColor3d = new Delegates.SecondaryColor3d(Imports.SecondaryColor3d);
        public static Delegates.SecondaryColor3dv_ SecondaryColor3dv_ = new Delegates.SecondaryColor3dv_(Imports.SecondaryColor3dv_);
        public static Delegates.SecondaryColor3f SecondaryColor3f = new Delegates.SecondaryColor3f(Imports.SecondaryColor3f);
        public static Delegates.SecondaryColor3fv_ SecondaryColor3fv_ = new Delegates.SecondaryColor3fv_(Imports.SecondaryColor3fv_);
        public static Delegates.SecondaryColor3i SecondaryColor3i = new Delegates.SecondaryColor3i(Imports.SecondaryColor3i);
        public static Delegates.SecondaryColor3iv_ SecondaryColor3iv_ = new Delegates.SecondaryColor3iv_(Imports.SecondaryColor3iv_);
        public static Delegates.SecondaryColor3s SecondaryColor3s = new Delegates.SecondaryColor3s(Imports.SecondaryColor3s);
        public static Delegates.SecondaryColor3sv_ SecondaryColor3sv_ = new Delegates.SecondaryColor3sv_(Imports.SecondaryColor3sv_);
        public static Delegates.SecondaryColor3ub SecondaryColor3ub = new Delegates.SecondaryColor3ub(Imports.SecondaryColor3ub);
        public static Delegates.SecondaryColor3ubv_ SecondaryColor3ubv_ = new Delegates.SecondaryColor3ubv_(Imports.SecondaryColor3ubv_);
        public static Delegates.SecondaryColor3ui SecondaryColor3ui = new Delegates.SecondaryColor3ui(Imports.SecondaryColor3ui);
        public static Delegates.SecondaryColor3uiv_ SecondaryColor3uiv_ = new Delegates.SecondaryColor3uiv_(Imports.SecondaryColor3uiv_);
        public static Delegates.SecondaryColor3us SecondaryColor3us = new Delegates.SecondaryColor3us(Imports.SecondaryColor3us);
        public static Delegates.SecondaryColor3usv_ SecondaryColor3usv_ = new Delegates.SecondaryColor3usv_(Imports.SecondaryColor3usv_);
        public static Delegates.SecondaryColorPointer_ SecondaryColorPointer_ = new Delegates.SecondaryColorPointer_(Imports.SecondaryColorPointer_);
        public static Delegates.WindowPos2d WindowPos2d = new Delegates.WindowPos2d(Imports.WindowPos2d);
        public static Delegates.WindowPos2dv_ WindowPos2dv_ = new Delegates.WindowPos2dv_(Imports.WindowPos2dv_);
        public static Delegates.WindowPos2f WindowPos2f = new Delegates.WindowPos2f(Imports.WindowPos2f);
        public static Delegates.WindowPos2fv_ WindowPos2fv_ = new Delegates.WindowPos2fv_(Imports.WindowPos2fv_);
        public static Delegates.WindowPos2i WindowPos2i = new Delegates.WindowPos2i(Imports.WindowPos2i);
        public static Delegates.WindowPos2iv_ WindowPos2iv_ = new Delegates.WindowPos2iv_(Imports.WindowPos2iv_);
        public static Delegates.WindowPos2s WindowPos2s = new Delegates.WindowPos2s(Imports.WindowPos2s);
        public static Delegates.WindowPos2sv_ WindowPos2sv_ = new Delegates.WindowPos2sv_(Imports.WindowPos2sv_);
        public static Delegates.WindowPos3d WindowPos3d = new Delegates.WindowPos3d(Imports.WindowPos3d);
        public static Delegates.WindowPos3dv_ WindowPos3dv_ = new Delegates.WindowPos3dv_(Imports.WindowPos3dv_);
        public static Delegates.WindowPos3f WindowPos3f = new Delegates.WindowPos3f(Imports.WindowPos3f);
        public static Delegates.WindowPos3fv_ WindowPos3fv_ = new Delegates.WindowPos3fv_(Imports.WindowPos3fv_);
        public static Delegates.WindowPos3i WindowPos3i = new Delegates.WindowPos3i(Imports.WindowPos3i);
        public static Delegates.WindowPos3iv_ WindowPos3iv_ = new Delegates.WindowPos3iv_(Imports.WindowPos3iv_);
        public static Delegates.WindowPos3s WindowPos3s = new Delegates.WindowPos3s(Imports.WindowPos3s);
        public static Delegates.WindowPos3sv_ WindowPos3sv_ = new Delegates.WindowPos3sv_(Imports.WindowPos3sv_);
        public static Delegates.GenQueries_ GenQueries_ = new Delegates.GenQueries_(Imports.GenQueries_);
        public static Delegates.DeleteQueries_ DeleteQueries_ = new Delegates.DeleteQueries_(Imports.DeleteQueries_);
        public static Delegates.IsQuery IsQuery = new Delegates.IsQuery(Imports.IsQuery);
        public static Delegates.BeginQuery BeginQuery = new Delegates.BeginQuery(Imports.BeginQuery);
        public static Delegates.EndQuery EndQuery = new Delegates.EndQuery(Imports.EndQuery);
        public static Delegates.GetQueryiv_ GetQueryiv_ = new Delegates.GetQueryiv_(Imports.GetQueryiv_);
        public static Delegates.GetQueryObjectiv_ GetQueryObjectiv_ = new Delegates.GetQueryObjectiv_(Imports.GetQueryObjectiv_);
        public static Delegates.GetQueryObjectuiv_ GetQueryObjectuiv_ = new Delegates.GetQueryObjectuiv_(Imports.GetQueryObjectuiv_);
        public static Delegates.BindBuffer BindBuffer = new Delegates.BindBuffer(Imports.BindBuffer);
        public static Delegates.DeleteBuffers_ DeleteBuffers_ = new Delegates.DeleteBuffers_(Imports.DeleteBuffers_);
        public static Delegates.GenBuffers_ GenBuffers_ = new Delegates.GenBuffers_(Imports.GenBuffers_);
        public static Delegates.IsBuffer IsBuffer = new Delegates.IsBuffer(Imports.IsBuffer);
        public static Delegates.BufferData_ BufferData_ = new Delegates.BufferData_(Imports.BufferData_);
        public static Delegates.BufferSubData_ BufferSubData_ = new Delegates.BufferSubData_(Imports.BufferSubData_);
        public static Delegates.GetBufferSubData_ GetBufferSubData_ = new Delegates.GetBufferSubData_(Imports.GetBufferSubData_);
        public static Delegates.MapBuffer MapBuffer = new Delegates.MapBuffer(Imports.MapBuffer);
        public static Delegates.UnmapBuffer UnmapBuffer = new Delegates.UnmapBuffer(Imports.UnmapBuffer);
        public static Delegates.GetBufferParameteriv_ GetBufferParameteriv_ = new Delegates.GetBufferParameteriv_(Imports.GetBufferParameteriv_);
        public static Delegates.GetBufferPointerv_ GetBufferPointerv_ = new Delegates.GetBufferPointerv_(Imports.GetBufferPointerv_);
        public static Delegates.BlendEquationSeparate BlendEquationSeparate = new Delegates.BlendEquationSeparate(Imports.BlendEquationSeparate);
        public static Delegates.DrawBuffers_ DrawBuffers_ = new Delegates.DrawBuffers_(Imports.DrawBuffers_);
        public static Delegates.StencilOpSeparate StencilOpSeparate = new Delegates.StencilOpSeparate(Imports.StencilOpSeparate);
        public static Delegates.StencilFuncSeparate StencilFuncSeparate = new Delegates.StencilFuncSeparate(Imports.StencilFuncSeparate);
        public static Delegates.StencilMaskSeparate StencilMaskSeparate = new Delegates.StencilMaskSeparate(Imports.StencilMaskSeparate);
        public static Delegates.AttachShader AttachShader = new Delegates.AttachShader(Imports.AttachShader);
        public static Delegates.BindAttribLocation BindAttribLocation = new Delegates.BindAttribLocation(Imports.BindAttribLocation);
        public static Delegates.CompileShader CompileShader = new Delegates.CompileShader(Imports.CompileShader);
        public static Delegates.CreateProgram CreateProgram = new Delegates.CreateProgram(Imports.CreateProgram);
        public static Delegates.CreateShader CreateShader = new Delegates.CreateShader(Imports.CreateShader);
        public static Delegates.DeleteProgram DeleteProgram = new Delegates.DeleteProgram(Imports.DeleteProgram);
        public static Delegates.DeleteShader DeleteShader = new Delegates.DeleteShader(Imports.DeleteShader);
        public static Delegates.DetachShader DetachShader = new Delegates.DetachShader(Imports.DetachShader);
        public static Delegates.DisableVertexAttribArray DisableVertexAttribArray = new Delegates.DisableVertexAttribArray(Imports.DisableVertexAttribArray);
        public static Delegates.EnableVertexAttribArray EnableVertexAttribArray = new Delegates.EnableVertexAttribArray(Imports.EnableVertexAttribArray);
        public static Delegates.GetActiveAttrib_ GetActiveAttrib_ = new Delegates.GetActiveAttrib_(Imports.GetActiveAttrib_);
        public static Delegates.GetActiveUniform_ GetActiveUniform_ = new Delegates.GetActiveUniform_(Imports.GetActiveUniform_);
        public static Delegates.GetAttachedShaders_ GetAttachedShaders_ = new Delegates.GetAttachedShaders_(Imports.GetAttachedShaders_);
        public static Delegates.GetAttribLocation GetAttribLocation = new Delegates.GetAttribLocation(Imports.GetAttribLocation);
        public static Delegates.GetProgramiv_ GetProgramiv_ = new Delegates.GetProgramiv_(Imports.GetProgramiv_);
        public static Delegates.GetProgramInfoLog_ GetProgramInfoLog_ = new Delegates.GetProgramInfoLog_(Imports.GetProgramInfoLog_);
        public static Delegates.GetShaderiv_ GetShaderiv_ = new Delegates.GetShaderiv_(Imports.GetShaderiv_);
        public static Delegates.GetShaderInfoLog_ GetShaderInfoLog_ = new Delegates.GetShaderInfoLog_(Imports.GetShaderInfoLog_);
        public static Delegates.GetShaderSource_ GetShaderSource_ = new Delegates.GetShaderSource_(Imports.GetShaderSource_);
        public static Delegates.GetUniformLocation GetUniformLocation = new Delegates.GetUniformLocation(Imports.GetUniformLocation);
        public static Delegates.GetUniformfv_ GetUniformfv_ = new Delegates.GetUniformfv_(Imports.GetUniformfv_);
        public static Delegates.GetUniformiv_ GetUniformiv_ = new Delegates.GetUniformiv_(Imports.GetUniformiv_);
        public static Delegates.GetVertexAttribdv_ GetVertexAttribdv_ = new Delegates.GetVertexAttribdv_(Imports.GetVertexAttribdv_);
        public static Delegates.GetVertexAttribfv_ GetVertexAttribfv_ = new Delegates.GetVertexAttribfv_(Imports.GetVertexAttribfv_);
        public static Delegates.GetVertexAttribiv_ GetVertexAttribiv_ = new Delegates.GetVertexAttribiv_(Imports.GetVertexAttribiv_);
        public static Delegates.GetVertexAttribPointerv_ GetVertexAttribPointerv_ = new Delegates.GetVertexAttribPointerv_(Imports.GetVertexAttribPointerv_);
        public static Delegates.IsProgram IsProgram = new Delegates.IsProgram(Imports.IsProgram);
        public static Delegates.IsShader IsShader = new Delegates.IsShader(Imports.IsShader);
        public static Delegates.LinkProgram LinkProgram = new Delegates.LinkProgram(Imports.LinkProgram);
        public static Delegates.ShaderSource_ ShaderSource_ = new Delegates.ShaderSource_(Imports.ShaderSource_);
        public static Delegates.UseProgram UseProgram = new Delegates.UseProgram(Imports.UseProgram);
        public static Delegates.Uniform1f Uniform1f = new Delegates.Uniform1f(Imports.Uniform1f);
        public static Delegates.Uniform2f Uniform2f = new Delegates.Uniform2f(Imports.Uniform2f);
        public static Delegates.Uniform3f Uniform3f = new Delegates.Uniform3f(Imports.Uniform3f);
        public static Delegates.Uniform4f Uniform4f = new Delegates.Uniform4f(Imports.Uniform4f);
        public static Delegates.Uniform1i Uniform1i = new Delegates.Uniform1i(Imports.Uniform1i);
        public static Delegates.Uniform2i Uniform2i = new Delegates.Uniform2i(Imports.Uniform2i);
        public static Delegates.Uniform3i Uniform3i = new Delegates.Uniform3i(Imports.Uniform3i);
        public static Delegates.Uniform4i Uniform4i = new Delegates.Uniform4i(Imports.Uniform4i);
        public static Delegates.Uniform1fv_ Uniform1fv_ = new Delegates.Uniform1fv_(Imports.Uniform1fv_);
        public static Delegates.Uniform2fv_ Uniform2fv_ = new Delegates.Uniform2fv_(Imports.Uniform2fv_);
        public static Delegates.Uniform3fv_ Uniform3fv_ = new Delegates.Uniform3fv_(Imports.Uniform3fv_);
        public static Delegates.Uniform4fv_ Uniform4fv_ = new Delegates.Uniform4fv_(Imports.Uniform4fv_);
        public static Delegates.Uniform1iv_ Uniform1iv_ = new Delegates.Uniform1iv_(Imports.Uniform1iv_);
        public static Delegates.Uniform2iv_ Uniform2iv_ = new Delegates.Uniform2iv_(Imports.Uniform2iv_);
        public static Delegates.Uniform3iv_ Uniform3iv_ = new Delegates.Uniform3iv_(Imports.Uniform3iv_);
        public static Delegates.Uniform4iv_ Uniform4iv_ = new Delegates.Uniform4iv_(Imports.Uniform4iv_);
        public static Delegates.UniformMatrix2fv_ UniformMatrix2fv_ = new Delegates.UniformMatrix2fv_(Imports.UniformMatrix2fv_);
        public static Delegates.UniformMatrix3fv_ UniformMatrix3fv_ = new Delegates.UniformMatrix3fv_(Imports.UniformMatrix3fv_);
        public static Delegates.UniformMatrix4fv_ UniformMatrix4fv_ = new Delegates.UniformMatrix4fv_(Imports.UniformMatrix4fv_);
        public static Delegates.ValidateProgram ValidateProgram = new Delegates.ValidateProgram(Imports.ValidateProgram);
        public static Delegates.VertexAttrib1d VertexAttrib1d = new Delegates.VertexAttrib1d(Imports.VertexAttrib1d);
        public static Delegates.VertexAttrib1dv_ VertexAttrib1dv_ = new Delegates.VertexAttrib1dv_(Imports.VertexAttrib1dv_);
        public static Delegates.VertexAttrib1f VertexAttrib1f = new Delegates.VertexAttrib1f(Imports.VertexAttrib1f);
        public static Delegates.VertexAttrib1fv_ VertexAttrib1fv_ = new Delegates.VertexAttrib1fv_(Imports.VertexAttrib1fv_);
        public static Delegates.VertexAttrib1s VertexAttrib1s = new Delegates.VertexAttrib1s(Imports.VertexAttrib1s);
        public static Delegates.VertexAttrib1sv_ VertexAttrib1sv_ = new Delegates.VertexAttrib1sv_(Imports.VertexAttrib1sv_);
        public static Delegates.VertexAttrib2d VertexAttrib2d = new Delegates.VertexAttrib2d(Imports.VertexAttrib2d);
        public static Delegates.VertexAttrib2dv_ VertexAttrib2dv_ = new Delegates.VertexAttrib2dv_(Imports.VertexAttrib2dv_);
        public static Delegates.VertexAttrib2f VertexAttrib2f = new Delegates.VertexAttrib2f(Imports.VertexAttrib2f);
        public static Delegates.VertexAttrib2fv_ VertexAttrib2fv_ = new Delegates.VertexAttrib2fv_(Imports.VertexAttrib2fv_);
        public static Delegates.VertexAttrib2s VertexAttrib2s = new Delegates.VertexAttrib2s(Imports.VertexAttrib2s);
        public static Delegates.VertexAttrib2sv_ VertexAttrib2sv_ = new Delegates.VertexAttrib2sv_(Imports.VertexAttrib2sv_);
        public static Delegates.VertexAttrib3d VertexAttrib3d = new Delegates.VertexAttrib3d(Imports.VertexAttrib3d);
        public static Delegates.VertexAttrib3dv_ VertexAttrib3dv_ = new Delegates.VertexAttrib3dv_(Imports.VertexAttrib3dv_);
        public static Delegates.VertexAttrib3f VertexAttrib3f = new Delegates.VertexAttrib3f(Imports.VertexAttrib3f);
        public static Delegates.VertexAttrib3fv_ VertexAttrib3fv_ = new Delegates.VertexAttrib3fv_(Imports.VertexAttrib3fv_);
        public static Delegates.VertexAttrib3s VertexAttrib3s = new Delegates.VertexAttrib3s(Imports.VertexAttrib3s);
        public static Delegates.VertexAttrib3sv_ VertexAttrib3sv_ = new Delegates.VertexAttrib3sv_(Imports.VertexAttrib3sv_);
        public static Delegates.VertexAttrib4Nbv_ VertexAttrib4Nbv_ = new Delegates.VertexAttrib4Nbv_(Imports.VertexAttrib4Nbv_);
        public static Delegates.VertexAttrib4Niv_ VertexAttrib4Niv_ = new Delegates.VertexAttrib4Niv_(Imports.VertexAttrib4Niv_);
        public static Delegates.VertexAttrib4Nsv_ VertexAttrib4Nsv_ = new Delegates.VertexAttrib4Nsv_(Imports.VertexAttrib4Nsv_);
        public static Delegates.VertexAttrib4Nub VertexAttrib4Nub = new Delegates.VertexAttrib4Nub(Imports.VertexAttrib4Nub);
        public static Delegates.VertexAttrib4Nubv_ VertexAttrib4Nubv_ = new Delegates.VertexAttrib4Nubv_(Imports.VertexAttrib4Nubv_);
        public static Delegates.VertexAttrib4Nuiv_ VertexAttrib4Nuiv_ = new Delegates.VertexAttrib4Nuiv_(Imports.VertexAttrib4Nuiv_);
        public static Delegates.VertexAttrib4Nusv_ VertexAttrib4Nusv_ = new Delegates.VertexAttrib4Nusv_(Imports.VertexAttrib4Nusv_);
        public static Delegates.VertexAttrib4bv_ VertexAttrib4bv_ = new Delegates.VertexAttrib4bv_(Imports.VertexAttrib4bv_);
        public static Delegates.VertexAttrib4d VertexAttrib4d = new Delegates.VertexAttrib4d(Imports.VertexAttrib4d);
        public static Delegates.VertexAttrib4dv_ VertexAttrib4dv_ = new Delegates.VertexAttrib4dv_(Imports.VertexAttrib4dv_);
        public static Delegates.VertexAttrib4f VertexAttrib4f = new Delegates.VertexAttrib4f(Imports.VertexAttrib4f);
        public static Delegates.VertexAttrib4fv_ VertexAttrib4fv_ = new Delegates.VertexAttrib4fv_(Imports.VertexAttrib4fv_);
        public static Delegates.VertexAttrib4iv_ VertexAttrib4iv_ = new Delegates.VertexAttrib4iv_(Imports.VertexAttrib4iv_);
        public static Delegates.VertexAttrib4s VertexAttrib4s = new Delegates.VertexAttrib4s(Imports.VertexAttrib4s);
        public static Delegates.VertexAttrib4sv_ VertexAttrib4sv_ = new Delegates.VertexAttrib4sv_(Imports.VertexAttrib4sv_);
        public static Delegates.VertexAttrib4ubv_ VertexAttrib4ubv_ = new Delegates.VertexAttrib4ubv_(Imports.VertexAttrib4ubv_);
        public static Delegates.VertexAttrib4uiv_ VertexAttrib4uiv_ = new Delegates.VertexAttrib4uiv_(Imports.VertexAttrib4uiv_);
        public static Delegates.VertexAttrib4usv_ VertexAttrib4usv_ = new Delegates.VertexAttrib4usv_(Imports.VertexAttrib4usv_);
        public static Delegates.VertexAttribPointer_ VertexAttribPointer_ = new Delegates.VertexAttribPointer_(Imports.VertexAttribPointer_);
        public static Delegates.UniformMatrix2x3fv_ UniformMatrix2x3fv_ = new Delegates.UniformMatrix2x3fv_(Imports.UniformMatrix2x3fv_);
        public static Delegates.UniformMatrix3x2fv_ UniformMatrix3x2fv_ = new Delegates.UniformMatrix3x2fv_(Imports.UniformMatrix3x2fv_);
        public static Delegates.UniformMatrix2x4fv_ UniformMatrix2x4fv_ = new Delegates.UniformMatrix2x4fv_(Imports.UniformMatrix2x4fv_);
        public static Delegates.UniformMatrix4x2fv_ UniformMatrix4x2fv_ = new Delegates.UniformMatrix4x2fv_(Imports.UniformMatrix4x2fv_);
        public static Delegates.UniformMatrix3x4fv_ UniformMatrix3x4fv_ = new Delegates.UniformMatrix3x4fv_(Imports.UniformMatrix3x4fv_);
        public static Delegates.UniformMatrix4x3fv_ UniformMatrix4x3fv_ = new Delegates.UniformMatrix4x3fv_(Imports.UniformMatrix4x3fv_);

        #endregion

        #region Wrappers

        #region CallLists(GLsizei n, Enums.ListNameType type, IntPtr lists)

        public static
        void CallLists(GLsizei n, Enums.ListNameType type, IntPtr lists)
        {
            CallLists_(n, type, lists);
        }

        #endregion

        #region CallLists(GLsizei n, Enums.ListNameType type, object lists)

        public static
        void CallLists(GLsizei n, Enums.ListNameType type, object lists)
        {
            GCHandle h0 = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                CallLists_(n, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)

        public static
        void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)
        {
            Bitmap_(width, height, xorig, yorig, xmove, ymove, bitmap);
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)

        public static
        void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Bitmap_(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)

        public static
        void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Bitmap_(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3bv(IntPtr v)

        public static
        void Color3bv(IntPtr v)
        {
            Color3bv_(v);
        }

        #endregion

        #region Color3bv(object v)

        public static
        void Color3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3bv(GLbyte[] v)

        public static
        void Color3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3dv(IntPtr v)

        public static
        void Color3dv(IntPtr v)
        {
            Color3dv_(v);
        }

        #endregion

        #region Color3dv(object v)

        public static
        void Color3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3dv(GLdouble[] v)

        public static
        void Color3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fv(IntPtr v)

        public static
        void Color3fv(IntPtr v)
        {
            Color3fv_(v);
        }

        #endregion

        #region Color3fv(object v)

        public static
        void Color3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fv(GLfloat[] v)

        public static
        void Color3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3iv(IntPtr v)

        public static
        void Color3iv(IntPtr v)
        {
            Color3iv_(v);
        }

        #endregion

        #region Color3iv(object v)

        public static
        void Color3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3iv(GLint[] v)

        public static
        void Color3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3sv(IntPtr v)

        public static
        void Color3sv(IntPtr v)
        {
            Color3sv_(v);
        }

        #endregion

        #region Color3sv(object v)

        public static
        void Color3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3sv(GLshort[] v)

        public static
        void Color3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3ubv(IntPtr v)

        public static
        void Color3ubv(IntPtr v)
        {
            Color3ubv_(v);
        }

        #endregion

        #region Color3ubv(object v)

        public static
        void Color3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3ubv(GLubyte[] v)

        public static
        void Color3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3uiv(IntPtr v)

        public static
        void Color3uiv(IntPtr v)
        {
            Color3uiv_(v);
        }

        #endregion

        #region Color3uiv(object v)

        public static
        void Color3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3uiv(GLuint[] v)

        public static
        void Color3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3usv(IntPtr v)

        public static
        void Color3usv(IntPtr v)
        {
            Color3usv_(v);
        }

        #endregion

        #region Color3usv(object v)

        public static
        void Color3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3usv(GLushort[] v)

        public static
        void Color3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4bv(IntPtr v)

        public static
        void Color4bv(IntPtr v)
        {
            Color4bv_(v);
        }

        #endregion

        #region Color4bv(object v)

        public static
        void Color4bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4bv(GLbyte[] v)

        public static
        void Color4bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4dv(IntPtr v)

        public static
        void Color4dv(IntPtr v)
        {
            Color4dv_(v);
        }

        #endregion

        #region Color4dv(object v)

        public static
        void Color4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4dv(GLdouble[] v)

        public static
        void Color4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fv(IntPtr v)

        public static
        void Color4fv(IntPtr v)
        {
            Color4fv_(v);
        }

        #endregion

        #region Color4fv(object v)

        public static
        void Color4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fv(GLfloat[] v)

        public static
        void Color4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4iv(IntPtr v)

        public static
        void Color4iv(IntPtr v)
        {
            Color4iv_(v);
        }

        #endregion

        #region Color4iv(object v)

        public static
        void Color4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4iv(GLint[] v)

        public static
        void Color4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4sv(IntPtr v)

        public static
        void Color4sv(IntPtr v)
        {
            Color4sv_(v);
        }

        #endregion

        #region Color4sv(object v)

        public static
        void Color4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4sv(GLshort[] v)

        public static
        void Color4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubv(IntPtr v)

        public static
        void Color4ubv(IntPtr v)
        {
            Color4ubv_(v);
        }

        #endregion

        #region Color4ubv(object v)

        public static
        void Color4ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubv(GLubyte[] v)

        public static
        void Color4ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4uiv(IntPtr v)

        public static
        void Color4uiv(IntPtr v)
        {
            Color4uiv_(v);
        }

        #endregion

        #region Color4uiv(object v)

        public static
        void Color4uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4uiv(GLuint[] v)

        public static
        void Color4uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4usv(IntPtr v)

        public static
        void Color4usv(IntPtr v)
        {
            Color4usv_(v);
        }

        #endregion

        #region Color4usv(object v)

        public static
        void Color4usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4usv(GLushort[] v)

        public static
        void Color4usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagv(IntPtr flag)

        public static
        void EdgeFlagv(IntPtr flag)
        {
            EdgeFlagv_(flag);
        }

        #endregion

        #region EdgeFlagv(object flag)

        public static
        void EdgeFlagv(object flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                EdgeFlagv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagv(Enums.Boolean[] flag)

        public static
        void EdgeFlagv(Enums.Boolean[] flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                EdgeFlagv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexdv(IntPtr c)

        public static
        void Indexdv(IntPtr c)
        {
            Indexdv_(c);
        }

        #endregion

        #region Indexdv(object c)

        public static
        void Indexdv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexdv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexdv(GLdouble[] c)

        public static
        void Indexdv(GLdouble[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexdv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexfv(IntPtr c)

        public static
        void Indexfv(IntPtr c)
        {
            Indexfv_(c);
        }

        #endregion

        #region Indexfv(object c)

        public static
        void Indexfv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexfv(GLfloat[] c)

        public static
        void Indexfv(GLfloat[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexiv(IntPtr c)

        public static
        void Indexiv(IntPtr c)
        {
            Indexiv_(c);
        }

        #endregion

        #region Indexiv(object c)

        public static
        void Indexiv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexiv(GLint[] c)

        public static
        void Indexiv(GLint[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexsv(IntPtr c)

        public static
        void Indexsv(IntPtr c)
        {
            Indexsv_(c);
        }

        #endregion

        #region Indexsv(object c)

        public static
        void Indexsv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexsv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexsv(GLshort[] c)

        public static
        void Indexsv(GLshort[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexsv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3bv(IntPtr v)

        public static
        void Normal3bv(IntPtr v)
        {
            Normal3bv_(v);
        }

        #endregion

        #region Normal3bv(object v)

        public static
        void Normal3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3bv(GLbyte[] v)

        public static
        void Normal3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3dv(IntPtr v)

        public static
        void Normal3dv(IntPtr v)
        {
            Normal3dv_(v);
        }

        #endregion

        #region Normal3dv(object v)

        public static
        void Normal3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3dv(GLdouble[] v)

        public static
        void Normal3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fv(IntPtr v)

        public static
        void Normal3fv(IntPtr v)
        {
            Normal3fv_(v);
        }

        #endregion

        #region Normal3fv(object v)

        public static
        void Normal3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fv(GLfloat[] v)

        public static
        void Normal3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3iv(IntPtr v)

        public static
        void Normal3iv(IntPtr v)
        {
            Normal3iv_(v);
        }

        #endregion

        #region Normal3iv(object v)

        public static
        void Normal3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3iv(GLint[] v)

        public static
        void Normal3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3sv(IntPtr v)

        public static
        void Normal3sv(IntPtr v)
        {
            Normal3sv_(v);
        }

        #endregion

        #region Normal3sv(object v)

        public static
        void Normal3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3sv(GLshort[] v)

        public static
        void Normal3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2dv(IntPtr v)

        public static
        void RasterPos2dv(IntPtr v)
        {
            RasterPos2dv_(v);
        }

        #endregion

        #region RasterPos2dv(object v)

        public static
        void RasterPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2dv(GLdouble[] v)

        public static
        void RasterPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2fv(IntPtr v)

        public static
        void RasterPos2fv(IntPtr v)
        {
            RasterPos2fv_(v);
        }

        #endregion

        #region RasterPos2fv(object v)

        public static
        void RasterPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2fv(GLfloat[] v)

        public static
        void RasterPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2iv(IntPtr v)

        public static
        void RasterPos2iv(IntPtr v)
        {
            RasterPos2iv_(v);
        }

        #endregion

        #region RasterPos2iv(object v)

        public static
        void RasterPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2iv(GLint[] v)

        public static
        void RasterPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2sv(IntPtr v)

        public static
        void RasterPos2sv(IntPtr v)
        {
            RasterPos2sv_(v);
        }

        #endregion

        #region RasterPos2sv(object v)

        public static
        void RasterPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2sv(GLshort[] v)

        public static
        void RasterPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3dv(IntPtr v)

        public static
        void RasterPos3dv(IntPtr v)
        {
            RasterPos3dv_(v);
        }

        #endregion

        #region RasterPos3dv(object v)

        public static
        void RasterPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3dv(GLdouble[] v)

        public static
        void RasterPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3fv(IntPtr v)

        public static
        void RasterPos3fv(IntPtr v)
        {
            RasterPos3fv_(v);
        }

        #endregion

        #region RasterPos3fv(object v)

        public static
        void RasterPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3fv(GLfloat[] v)

        public static
        void RasterPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3iv(IntPtr v)

        public static
        void RasterPos3iv(IntPtr v)
        {
            RasterPos3iv_(v);
        }

        #endregion

        #region RasterPos3iv(object v)

        public static
        void RasterPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3iv(GLint[] v)

        public static
        void RasterPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3sv(IntPtr v)

        public static
        void RasterPos3sv(IntPtr v)
        {
            RasterPos3sv_(v);
        }

        #endregion

        #region RasterPos3sv(object v)

        public static
        void RasterPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3sv(GLshort[] v)

        public static
        void RasterPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4dv(IntPtr v)

        public static
        void RasterPos4dv(IntPtr v)
        {
            RasterPos4dv_(v);
        }

        #endregion

        #region RasterPos4dv(object v)

        public static
        void RasterPos4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4dv(GLdouble[] v)

        public static
        void RasterPos4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4fv(IntPtr v)

        public static
        void RasterPos4fv(IntPtr v)
        {
            RasterPos4fv_(v);
        }

        #endregion

        #region RasterPos4fv(object v)

        public static
        void RasterPos4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4fv(GLfloat[] v)

        public static
        void RasterPos4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4iv(IntPtr v)

        public static
        void RasterPos4iv(IntPtr v)
        {
            RasterPos4iv_(v);
        }

        #endregion

        #region RasterPos4iv(object v)

        public static
        void RasterPos4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4iv(GLint[] v)

        public static
        void RasterPos4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4sv(IntPtr v)

        public static
        void RasterPos4sv(IntPtr v)
        {
            RasterPos4sv_(v);
        }

        #endregion

        #region RasterPos4sv(object v)

        public static
        void RasterPos4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4sv(GLshort[] v)

        public static
        void RasterPos4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                RasterPos4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(IntPtr v1, IntPtr v2)

        public static
        void Rectdv(IntPtr v1, IntPtr v2)
        {
            Rectdv_(v1, v2);
        }

        #endregion

        #region Rectdv(IntPtr v1, object v2)

        public static
        void Rectdv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(IntPtr v1, GLdouble[] v2)

        public static
        void Rectdv(IntPtr v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, IntPtr v2)

        public static
        void Rectdv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, object v2)

        public static
        void Rectdv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, GLdouble[] v2)

        public static
        void Rectdv(object v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, IntPtr v2)

        public static
        void Rectdv(GLdouble[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, object v2)

        public static
        void Rectdv(GLdouble[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, GLdouble[] v2)

        public static
        void Rectdv(GLdouble[] v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(IntPtr v1, IntPtr v2)

        public static
        void Rectfv(IntPtr v1, IntPtr v2)
        {
            Rectfv_(v1, v2);
        }

        #endregion

        #region Rectfv(IntPtr v1, object v2)

        public static
        void Rectfv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(IntPtr v1, GLfloat[] v2)

        public static
        void Rectfv(IntPtr v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, IntPtr v2)

        public static
        void Rectfv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, object v2)

        public static
        void Rectfv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, GLfloat[] v2)

        public static
        void Rectfv(object v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, IntPtr v2)

        public static
        void Rectfv(GLfloat[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, object v2)

        public static
        void Rectfv(GLfloat[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, GLfloat[] v2)

        public static
        void Rectfv(GLfloat[] v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(IntPtr v1, IntPtr v2)

        public static
        void Rectiv(IntPtr v1, IntPtr v2)
        {
            Rectiv_(v1, v2);
        }

        #endregion

        #region Rectiv(IntPtr v1, object v2)

        public static
        void Rectiv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(IntPtr v1, GLint[] v2)

        public static
        void Rectiv(IntPtr v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, IntPtr v2)

        public static
        void Rectiv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, object v2)

        public static
        void Rectiv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, GLint[] v2)

        public static
        void Rectiv(object v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, IntPtr v2)

        public static
        void Rectiv(GLint[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, object v2)

        public static
        void Rectiv(GLint[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, GLint[] v2)

        public static
        void Rectiv(GLint[] v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(IntPtr v1, IntPtr v2)

        public static
        void Rectsv(IntPtr v1, IntPtr v2)
        {
            Rectsv_(v1, v2);
        }

        #endregion

        #region Rectsv(IntPtr v1, object v2)

        public static
        void Rectsv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(IntPtr v1, GLshort[] v2)

        public static
        void Rectsv(IntPtr v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, IntPtr v2)

        public static
        void Rectsv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, object v2)

        public static
        void Rectsv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, GLshort[] v2)

        public static
        void Rectsv(object v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, IntPtr v2)

        public static
        void Rectsv(GLshort[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, object v2)

        public static
        void Rectsv(GLshort[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, GLshort[] v2)

        public static
        void Rectsv(GLshort[] v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Rectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1dv(IntPtr v)

        public static
        void TexCoord1dv(IntPtr v)
        {
            TexCoord1dv_(v);
        }

        #endregion

        #region TexCoord1dv(object v)

        public static
        void TexCoord1dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1dv(GLdouble[] v)

        public static
        void TexCoord1dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1fv(IntPtr v)

        public static
        void TexCoord1fv(IntPtr v)
        {
            TexCoord1fv_(v);
        }

        #endregion

        #region TexCoord1fv(object v)

        public static
        void TexCoord1fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1fv(GLfloat[] v)

        public static
        void TexCoord1fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1iv(IntPtr v)

        public static
        void TexCoord1iv(IntPtr v)
        {
            TexCoord1iv_(v);
        }

        #endregion

        #region TexCoord1iv(object v)

        public static
        void TexCoord1iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1iv(GLint[] v)

        public static
        void TexCoord1iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1sv(IntPtr v)

        public static
        void TexCoord1sv(IntPtr v)
        {
            TexCoord1sv_(v);
        }

        #endregion

        #region TexCoord1sv(object v)

        public static
        void TexCoord1sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1sv(GLshort[] v)

        public static
        void TexCoord1sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2dv(IntPtr v)

        public static
        void TexCoord2dv(IntPtr v)
        {
            TexCoord2dv_(v);
        }

        #endregion

        #region TexCoord2dv(object v)

        public static
        void TexCoord2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2dv(GLdouble[] v)

        public static
        void TexCoord2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fv(IntPtr v)

        public static
        void TexCoord2fv(IntPtr v)
        {
            TexCoord2fv_(v);
        }

        #endregion

        #region TexCoord2fv(object v)

        public static
        void TexCoord2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fv(GLfloat[] v)

        public static
        void TexCoord2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2iv(IntPtr v)

        public static
        void TexCoord2iv(IntPtr v)
        {
            TexCoord2iv_(v);
        }

        #endregion

        #region TexCoord2iv(object v)

        public static
        void TexCoord2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2iv(GLint[] v)

        public static
        void TexCoord2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2sv(IntPtr v)

        public static
        void TexCoord2sv(IntPtr v)
        {
            TexCoord2sv_(v);
        }

        #endregion

        #region TexCoord2sv(object v)

        public static
        void TexCoord2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2sv(GLshort[] v)

        public static
        void TexCoord2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3dv(IntPtr v)

        public static
        void TexCoord3dv(IntPtr v)
        {
            TexCoord3dv_(v);
        }

        #endregion

        #region TexCoord3dv(object v)

        public static
        void TexCoord3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3dv(GLdouble[] v)

        public static
        void TexCoord3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3fv(IntPtr v)

        public static
        void TexCoord3fv(IntPtr v)
        {
            TexCoord3fv_(v);
        }

        #endregion

        #region TexCoord3fv(object v)

        public static
        void TexCoord3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3fv(GLfloat[] v)

        public static
        void TexCoord3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3iv(IntPtr v)

        public static
        void TexCoord3iv(IntPtr v)
        {
            TexCoord3iv_(v);
        }

        #endregion

        #region TexCoord3iv(object v)

        public static
        void TexCoord3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3iv(GLint[] v)

        public static
        void TexCoord3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3sv(IntPtr v)

        public static
        void TexCoord3sv(IntPtr v)
        {
            TexCoord3sv_(v);
        }

        #endregion

        #region TexCoord3sv(object v)

        public static
        void TexCoord3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3sv(GLshort[] v)

        public static
        void TexCoord3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4dv(IntPtr v)

        public static
        void TexCoord4dv(IntPtr v)
        {
            TexCoord4dv_(v);
        }

        #endregion

        #region TexCoord4dv(object v)

        public static
        void TexCoord4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4dv(GLdouble[] v)

        public static
        void TexCoord4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fv(IntPtr v)

        public static
        void TexCoord4fv(IntPtr v)
        {
            TexCoord4fv_(v);
        }

        #endregion

        #region TexCoord4fv(object v)

        public static
        void TexCoord4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fv(GLfloat[] v)

        public static
        void TexCoord4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4iv(IntPtr v)

        public static
        void TexCoord4iv(IntPtr v)
        {
            TexCoord4iv_(v);
        }

        #endregion

        #region TexCoord4iv(object v)

        public static
        void TexCoord4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4iv(GLint[] v)

        public static
        void TexCoord4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4sv(IntPtr v)

        public static
        void TexCoord4sv(IntPtr v)
        {
            TexCoord4sv_(v);
        }

        #endregion

        #region TexCoord4sv(object v)

        public static
        void TexCoord4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4sv(GLshort[] v)

        public static
        void TexCoord4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2dv(IntPtr v)

        public static
        void Vertex2dv(IntPtr v)
        {
            Vertex2dv_(v);
        }

        #endregion

        #region Vertex2dv(object v)

        public static
        void Vertex2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2dv(GLdouble[] v)

        public static
        void Vertex2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2fv(IntPtr v)

        public static
        void Vertex2fv(IntPtr v)
        {
            Vertex2fv_(v);
        }

        #endregion

        #region Vertex2fv(object v)

        public static
        void Vertex2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2fv(GLfloat[] v)

        public static
        void Vertex2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2iv(IntPtr v)

        public static
        void Vertex2iv(IntPtr v)
        {
            Vertex2iv_(v);
        }

        #endregion

        #region Vertex2iv(object v)

        public static
        void Vertex2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2iv(GLint[] v)

        public static
        void Vertex2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2sv(IntPtr v)

        public static
        void Vertex2sv(IntPtr v)
        {
            Vertex2sv_(v);
        }

        #endregion

        #region Vertex2sv(object v)

        public static
        void Vertex2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2sv(GLshort[] v)

        public static
        void Vertex2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3dv(IntPtr v)

        public static
        void Vertex3dv(IntPtr v)
        {
            Vertex3dv_(v);
        }

        #endregion

        #region Vertex3dv(object v)

        public static
        void Vertex3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3dv(GLdouble[] v)

        public static
        void Vertex3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3fv(IntPtr v)

        public static
        void Vertex3fv(IntPtr v)
        {
            Vertex3fv_(v);
        }

        #endregion

        #region Vertex3fv(object v)

        public static
        void Vertex3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3fv(GLfloat[] v)

        public static
        void Vertex3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3iv(IntPtr v)

        public static
        void Vertex3iv(IntPtr v)
        {
            Vertex3iv_(v);
        }

        #endregion

        #region Vertex3iv(object v)

        public static
        void Vertex3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3iv(GLint[] v)

        public static
        void Vertex3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3sv(IntPtr v)

        public static
        void Vertex3sv(IntPtr v)
        {
            Vertex3sv_(v);
        }

        #endregion

        #region Vertex3sv(object v)

        public static
        void Vertex3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3sv(GLshort[] v)

        public static
        void Vertex3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4dv(IntPtr v)

        public static
        void Vertex4dv(IntPtr v)
        {
            Vertex4dv_(v);
        }

        #endregion

        #region Vertex4dv(object v)

        public static
        void Vertex4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4dv(GLdouble[] v)

        public static
        void Vertex4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4fv(IntPtr v)

        public static
        void Vertex4fv(IntPtr v)
        {
            Vertex4fv_(v);
        }

        #endregion

        #region Vertex4fv(object v)

        public static
        void Vertex4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4fv(GLfloat[] v)

        public static
        void Vertex4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4iv(IntPtr v)

        public static
        void Vertex4iv(IntPtr v)
        {
            Vertex4iv_(v);
        }

        #endregion

        #region Vertex4iv(object v)

        public static
        void Vertex4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4iv(GLint[] v)

        public static
        void Vertex4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4sv(IntPtr v)

        public static
        void Vertex4sv(IntPtr v)
        {
            Vertex4sv_(v);
        }

        #endregion

        #region Vertex4sv(object v)

        public static
        void Vertex4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4sv(GLshort[] v)

        public static
        void Vertex4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClipPlane(Enums.ClipPlaneName plane, IntPtr equation)

        public static
        void ClipPlane(Enums.ClipPlaneName plane, IntPtr equation)
        {
            ClipPlane_(plane, equation);
        }

        #endregion

        #region ClipPlane(Enums.ClipPlaneName plane, object equation)

        public static
        void ClipPlane(Enums.ClipPlaneName plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                ClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)

        public static
        void ClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                ClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogfv(Enums.FogParameter pname, IntPtr parameters)

        public static
        void Fogfv(Enums.FogParameter pname, IntPtr parameters)
        {
            Fogfv_(pname, parameters);
        }

        #endregion

        #region Fogfv(Enums.FogParameter pname, object parameters)

        public static
        void Fogfv(Enums.FogParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Fogfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogfv(Enums.FogParameter pname, GLfloat[] parameters)

        public static
        void Fogfv(Enums.FogParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Fogfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogiv(Enums.FogParameter pname, IntPtr parameters)

        public static
        void Fogiv(Enums.FogParameter pname, IntPtr parameters)
        {
            Fogiv_(pname, parameters);
        }

        #endregion

        #region Fogiv(Enums.FogParameter pname, object parameters)

        public static
        void Fogiv(Enums.FogParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Fogiv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogiv(Enums.FogParameter pname, GLint[] parameters)

        public static
        void Fogiv(Enums.FogParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Fogiv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightfv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)

        public static
        void Lightfv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)
        {
            Lightfv_(light, pname, parameters);
        }

        #endregion

        #region Lightfv(Enums.LightName light, Enums.LightParameter pname, object parameters)

        public static
        void Lightfv(Enums.LightName light, Enums.LightParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Lightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] parameters)

        public static
        void Lightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Lightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightiv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)

        public static
        void Lightiv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)
        {
            Lightiv_(light, pname, parameters);
        }

        #endregion

        #region Lightiv(Enums.LightName light, Enums.LightParameter pname, object parameters)

        public static
        void Lightiv(Enums.LightName light, Enums.LightParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Lightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] parameters)

        public static
        void Lightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Lightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModelfv(Enums.LightModelParameter pname, IntPtr parameters)

        public static
        void LightModelfv(Enums.LightModelParameter pname, IntPtr parameters)
        {
            LightModelfv_(pname, parameters);
        }

        #endregion

        #region LightModelfv(Enums.LightModelParameter pname, object parameters)

        public static
        void LightModelfv(Enums.LightModelParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                LightModelfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModelfv(Enums.LightModelParameter pname, GLfloat[] parameters)

        public static
        void LightModelfv(Enums.LightModelParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                LightModelfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModeliv(Enums.LightModelParameter pname, IntPtr parameters)

        public static
        void LightModeliv(Enums.LightModelParameter pname, IntPtr parameters)
        {
            LightModeliv_(pname, parameters);
        }

        #endregion

        #region LightModeliv(Enums.LightModelParameter pname, object parameters)

        public static
        void LightModeliv(Enums.LightModelParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                LightModeliv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModeliv(Enums.LightModelParameter pname, GLint[] parameters)

        public static
        void LightModeliv(Enums.LightModelParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                LightModeliv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LineStipple(GLint factor, GLint pattern)

        public static
        void LineStipple(GLint factor, GLint pattern)
        {
            LineStipple_(factor, unchecked((GLushort)pattern));
        }

        #endregion

        #region Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            Materialfv_(face, pname, parameters);
        }

        #endregion

        #region Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Materialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)

        public static
        void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Materialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            Materialiv_(face, pname, parameters);
        }

        #endregion

        #region Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Materialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)

        public static
        void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Materialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PolygonStipple(IntPtr mask)

        public static
        void PolygonStipple(IntPtr mask)
        {
            PolygonStipple_(mask);
        }

        #endregion

        #region PolygonStipple(object mask)

        public static
        void PolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                PolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PolygonStipple(GLubyte[] mask)

        public static
        void PolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                PolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters)

        public static
        void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters)
        {
            TexParameterfv_(target, pname, parameters);
        }

        #endregion

        #region TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, object parameters)

        public static
        void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat[] parameters)

        public static
        void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters)

        public static
        void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, IntPtr parameters)
        {
            TexParameteriv_(target, pname, parameters);
        }

        #endregion

        #region TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, object parameters)

        public static
        void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint[] parameters)

        public static
        void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexImage1D_(target, level, internalformat, width, border, format, type, pixels);
        }

        #endregion

        #region TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexImage1D_(target, level, internalformat, width, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexImage2D_(target, level, internalformat, width, height, border, format, type, pixels);
        }

        #endregion

        #region TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexImage2D_(target, level, internalformat, width, height, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)

        public static
        void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)
        {
            TexEnvfv_(target, pname, parameters);
        }

        #endregion

        #region TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)

        public static
        void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] parameters)

        public static
        void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)

        public static
        void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)
        {
            TexEnviv_(target, pname, parameters);
        }

        #endregion

        #region TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)

        public static
        void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] parameters)

        public static
        void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            TexGendv_(coord, pname, parameters);
        }

        #endregion

        #region TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] parameters)

        public static
        void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            TexGenfv_(coord, pname, parameters);
        }

        #endregion

        #region TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] parameters)

        public static
        void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            TexGeniv_(coord, pname, parameters);
        }

        #endregion

        #region TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] parameters)

        public static
        void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                TexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, Enums.FeedbackType type, IntPtr buffer)

        public static
        void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, IntPtr buffer)
        {
            FeedbackBuffer_(size, type, buffer);
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, Enums.FeedbackType type, object buffer)

        public static
        void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                FeedbackBuffer_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, Enums.FeedbackType type, GLfloat[] buffer)

        public static
        void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, GLfloat[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                FeedbackBuffer_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SelectBuffer(GLsizei size, IntPtr buffer)

        public static
        void SelectBuffer(GLsizei size, IntPtr buffer)
        {
            SelectBuffer_(size, buffer);
        }

        #endregion

        #region SelectBuffer(GLsizei size, object buffer)

        public static
        void SelectBuffer(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                SelectBuffer_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SelectBuffer(GLsizei size, GLuint[] buffer)

        public static
        void SelectBuffer(GLsizei size, GLuint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                SelectBuffer_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)

        public static
        void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)
        {
            Map1d_(target, u1, u2, stride, order, points);
        }

        #endregion

        #region Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)

        public static
        void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map1d_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)

        public static
        void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map1d_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)

        public static
        void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)
        {
            Map1f_(target, u1, u2, stride, order, points);
        }

        #endregion

        #region Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)

        public static
        void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map1f_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)

        public static
        void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map1f_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)

        public static
        void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)
        {
            Map2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)

        public static
        void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)

        public static
        void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)

        public static
        void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)
        {
            Map2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)

        public static
        void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)

        public static
        void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Map2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1dv(IntPtr u)

        public static
        void EvalCoord1dv(IntPtr u)
        {
            EvalCoord1dv_(u);
        }

        #endregion

        #region EvalCoord1dv(object u)

        public static
        void EvalCoord1dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1dv(GLdouble[] u)

        public static
        void EvalCoord1dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1fv(IntPtr u)

        public static
        void EvalCoord1fv(IntPtr u)
        {
            EvalCoord1fv_(u);
        }

        #endregion

        #region EvalCoord1fv(object u)

        public static
        void EvalCoord1fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1fv(GLfloat[] u)

        public static
        void EvalCoord1fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2dv(IntPtr u)

        public static
        void EvalCoord2dv(IntPtr u)
        {
            EvalCoord2dv_(u);
        }

        #endregion

        #region EvalCoord2dv(object u)

        public static
        void EvalCoord2dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2dv(GLdouble[] u)

        public static
        void EvalCoord2dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2fv(IntPtr u)

        public static
        void EvalCoord2fv(IntPtr u)
        {
            EvalCoord2fv_(u);
        }

        #endregion

        #region EvalCoord2fv(object u)

        public static
        void EvalCoord2fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2fv(GLfloat[] u)

        public static
        void EvalCoord2fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                EvalCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapfv(Enums.PixelMap map, GLint mapsize, IntPtr values)

        public static
        void PixelMapfv(Enums.PixelMap map, GLint mapsize, IntPtr values)
        {
            PixelMapfv_(map, mapsize, values);
        }

        #endregion

        #region PixelMapfv(Enums.PixelMap map, GLint mapsize, object values)

        public static
        void PixelMapfv(Enums.PixelMap map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapfv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapfv(Enums.PixelMap map, GLint mapsize, GLfloat[] values)

        public static
        void PixelMapfv(Enums.PixelMap map, GLint mapsize, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapfv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapuiv(Enums.PixelMap map, GLint mapsize, IntPtr values)

        public static
        void PixelMapuiv(Enums.PixelMap map, GLint mapsize, IntPtr values)
        {
            PixelMapuiv_(map, mapsize, values);
        }

        #endregion

        #region PixelMapuiv(Enums.PixelMap map, GLint mapsize, object values)

        public static
        void PixelMapuiv(Enums.PixelMap map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapuiv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapuiv(Enums.PixelMap map, GLint mapsize, GLuint[] values)

        public static
        void PixelMapuiv(Enums.PixelMap map, GLint mapsize, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapuiv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapusv(Enums.PixelMap map, GLint mapsize, IntPtr values)

        public static
        void PixelMapusv(Enums.PixelMap map, GLint mapsize, IntPtr values)
        {
            PixelMapusv_(map, mapsize, values);
        }

        #endregion

        #region PixelMapusv(Enums.PixelMap map, GLint mapsize, object values)

        public static
        void PixelMapusv(Enums.PixelMap map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapusv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapusv(Enums.PixelMap map, GLint mapsize, GLushort[] values)

        public static
        void PixelMapusv(Enums.PixelMap map, GLint mapsize, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                PixelMapusv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            ReadPixels_(x, y, width, height, format, type, pixels);
        }

        #endregion

        #region ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                ReadPixels_(x, y, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            DrawPixels_(width, height, format, type, pixels);
        }

        #endregion

        #region DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                DrawPixels_(width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBooleanv(Enums.GetPName pname, IntPtr parameters)

        public static
        void GetBooleanv(Enums.GetPName pname, IntPtr parameters)
        {
            GetBooleanv_(pname, parameters);
        }

        #endregion

        #region GetBooleanv(Enums.GetPName pname, object parameters)

        public static
        void GetBooleanv(Enums.GetPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBooleanv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBooleanv(Enums.GetPName pname, Enums.Boolean[] parameters)

        public static
        void GetBooleanv(Enums.GetPName pname, Enums.Boolean[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBooleanv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetClipPlane(Enums.ClipPlaneName plane, IntPtr equation)

        public static
        void GetClipPlane(Enums.ClipPlaneName plane, IntPtr equation)
        {
            GetClipPlane_(plane, equation);
        }

        #endregion

        #region GetClipPlane(Enums.ClipPlaneName plane, object equation)

        public static
        void GetClipPlane(Enums.ClipPlaneName plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                GetClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)

        public static
        void GetClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                GetClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDoublev(Enums.GetPName pname, IntPtr parameters)

        public static
        void GetDoublev(Enums.GetPName pname, IntPtr parameters)
        {
            GetDoublev_(pname, parameters);
        }

        #endregion

        #region GetDoublev(Enums.GetPName pname, object parameters)

        public static
        void GetDoublev(Enums.GetPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetDoublev_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDoublev(Enums.GetPName pname, GLdouble[] parameters)

        public static
        void GetDoublev(Enums.GetPName pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetDoublev_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFloatv(Enums.GetPName pname, IntPtr parameters)

        public static
        void GetFloatv(Enums.GetPName pname, IntPtr parameters)
        {
            GetFloatv_(pname, parameters);
        }

        #endregion

        #region GetFloatv(Enums.GetPName pname, object parameters)

        public static
        void GetFloatv(Enums.GetPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFloatv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFloatv(Enums.GetPName pname, GLfloat[] parameters)

        public static
        void GetFloatv(Enums.GetPName pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFloatv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetIntegerv(Enums.GetPName pname, IntPtr parameters)

        public static
        void GetIntegerv(Enums.GetPName pname, IntPtr parameters)
        {
            GetIntegerv_(pname, parameters);
        }

        #endregion

        #region GetIntegerv(Enums.GetPName pname, object parameters)

        public static
        void GetIntegerv(Enums.GetPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetIntegerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetIntegerv(Enums.GetPName pname, GLint[] parameters)

        public static
        void GetIntegerv(Enums.GetPName pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetIntegerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightfv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)

        public static
        void GetLightfv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)
        {
            GetLightfv_(light, pname, parameters);
        }

        #endregion

        #region GetLightfv(Enums.LightName light, Enums.LightParameter pname, object parameters)

        public static
        void GetLightfv(Enums.LightName light, Enums.LightParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] parameters)

        public static
        void GetLightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightiv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)

        public static
        void GetLightiv(Enums.LightName light, Enums.LightParameter pname, IntPtr parameters)
        {
            GetLightiv_(light, pname, parameters);
        }

        #endregion

        #region GetLightiv(Enums.LightName light, Enums.LightParameter pname, object parameters)

        public static
        void GetLightiv(Enums.LightName light, Enums.LightParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] parameters)

        public static
        void GetLightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)

        public static
        void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)
        {
            GetMapdv_(target, query, v);
        }

        #endregion

        #region GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, object v)

        public static
        void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapdv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, GLdouble[] v)

        public static
        void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapdv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)

        public static
        void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)
        {
            GetMapfv_(target, query, v);
        }

        #endregion

        #region GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, object v)

        public static
        void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapfv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, GLfloat[] v)

        public static
        void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapfv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)

        public static
        void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, IntPtr v)
        {
            GetMapiv_(target, query, v);
        }

        #endregion

        #region GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, object v)

        public static
        void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapiv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, GLint[] v)

        public static
        void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                GetMapiv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            GetMaterialfv_(face, pname, parameters);
        }

        #endregion

        #region GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)

        public static
        void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            GetMaterialiv_(face, pname, parameters);
        }

        #endregion

        #region GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)

        public static
        void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapfv(Enums.PixelMap map, IntPtr values)

        public static
        void GetPixelMapfv(Enums.PixelMap map, IntPtr values)
        {
            GetPixelMapfv_(map, values);
        }

        #endregion

        #region GetPixelMapfv(Enums.PixelMap map, object values)

        public static
        void GetPixelMapfv(Enums.PixelMap map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapfv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapfv(Enums.PixelMap map, GLfloat[] values)

        public static
        void GetPixelMapfv(Enums.PixelMap map, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapfv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapuiv(Enums.PixelMap map, IntPtr values)

        public static
        void GetPixelMapuiv(Enums.PixelMap map, IntPtr values)
        {
            GetPixelMapuiv_(map, values);
        }

        #endregion

        #region GetPixelMapuiv(Enums.PixelMap map, object values)

        public static
        void GetPixelMapuiv(Enums.PixelMap map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapuiv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapuiv(Enums.PixelMap map, GLuint[] values)

        public static
        void GetPixelMapuiv(Enums.PixelMap map, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapuiv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapusv(Enums.PixelMap map, IntPtr values)

        public static
        void GetPixelMapusv(Enums.PixelMap map, IntPtr values)
        {
            GetPixelMapusv_(map, values);
        }

        #endregion

        #region GetPixelMapusv(Enums.PixelMap map, object values)

        public static
        void GetPixelMapusv(Enums.PixelMap map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapusv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapusv(Enums.PixelMap map, GLushort[] values)

        public static
        void GetPixelMapusv(Enums.PixelMap map, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetPixelMapusv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPolygonStipple(IntPtr mask)

        public static
        void GetPolygonStipple(IntPtr mask)
        {
            GetPolygonStipple_(mask);
        }

        #endregion

        #region GetPolygonStipple(object mask)

        public static
        void GetPolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                GetPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPolygonStipple(GLubyte[] mask)

        public static
        void GetPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                GetPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetString(Enums.StringName name)

        public static
        string GetString(Enums.StringName name)
        {
            return Marshal.PtrToStringAnsi(GetString_(name));
        }

        #endregion

        #region GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)

        public static
        void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)
        {
            GetTexEnvfv_(target, pname, parameters);
        }

        #endregion

        #region GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)

        public static
        void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] parameters)

        public static
        void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)

        public static
        void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, IntPtr parameters)
        {
            GetTexEnviv_(target, pname, parameters);
        }

        #endregion

        #region GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)

        public static
        void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] parameters)

        public static
        void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            GetTexGendv_(coord, pname, parameters);
        }

        #endregion

        #region GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] parameters)

        public static
        void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            GetTexGenfv_(coord, pname, parameters);
        }

        #endregion

        #region GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] parameters)

        public static
        void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)

        public static
        void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, IntPtr parameters)
        {
            GetTexGeniv_(coord, pname, parameters);
        }

        #endregion

        #region GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)

        public static
        void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] parameters)

        public static
        void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            GetTexImage_(target, level, format, type, pixels);
        }

        #endregion

        #region GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                GetTexImage_(target, level, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters)

        public static
        void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters)
        {
            GetTexParameterfv_(target, pname, parameters);
        }

        #endregion

        #region GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, object parameters)

        public static
        void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLfloat[] parameters)

        public static
        void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters)

        public static
        void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, IntPtr parameters)
        {
            GetTexParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, object parameters)

        public static
        void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLint[] parameters)

        public static
        void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters)

        public static
        void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters)
        {
            GetTexLevelParameterfv_(target, level, pname, parameters);
        }

        #endregion

        #region GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, object parameters)

        public static
        void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexLevelParameterfv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLfloat[] parameters)

        public static
        void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexLevelParameterfv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters)

        public static
        void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, IntPtr parameters)
        {
            GetTexLevelParameteriv_(target, level, pname, parameters);
        }

        #endregion

        #region GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, object parameters)

        public static
        void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexLevelParameteriv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLint[] parameters)

        public static
        void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTexLevelParameteriv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixf(IntPtr m)

        public static
        void LoadMatrixf(IntPtr m)
        {
            LoadMatrixf_(m);
        }

        #endregion

        #region LoadMatrixf(object m)

        public static
        void LoadMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixf(GLfloat[] m)

        public static
        void LoadMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixd(IntPtr m)

        public static
        void LoadMatrixd(IntPtr m)
        {
            LoadMatrixd_(m);
        }

        #endregion

        #region LoadMatrixd(object m)

        public static
        void LoadMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixd(GLdouble[] m)

        public static
        void LoadMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixf(IntPtr m)

        public static
        void MultMatrixf(IntPtr m)
        {
            MultMatrixf_(m);
        }

        #endregion

        #region MultMatrixf(object m)

        public static
        void MultMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixf(GLfloat[] m)

        public static
        void MultMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixd(IntPtr m)

        public static
        void MultMatrixd(IntPtr m)
        {
            MultMatrixd_(m);
        }

        #endregion

        #region MultMatrixd(object m)

        public static
        void MultMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixd(GLdouble[] m)

        public static
        void MultMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)
        {
            ColorPointer_(size, type, stride, pointer);
        }

        #endregion

        #region ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)

        public static
        void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, IntPtr indices)

        public static
        void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, IntPtr indices)
        {
            DrawElements_(mode, count, type, indices);
        }

        #endregion

        #region DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, object indices)

        public static
        void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                DrawElements_(mode, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointer(GLsizei stride, IntPtr pointer)

        public static
        void EdgeFlagPointer(GLsizei stride, IntPtr pointer)
        {
            EdgeFlagPointer_(stride, pointer);
        }

        #endregion

        #region EdgeFlagPointer(GLsizei stride, object pointer)

        public static
        void EdgeFlagPointer(GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                EdgeFlagPointer_(stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointerv(Enums.GetPointervPName pname, IntPtr parameters)

        public static
        void GetPointerv(Enums.GetPointervPName pname, IntPtr parameters)
        {
            GetPointerv_(pname, parameters);
        }

        #endregion

        #region GetPointerv(Enums.GetPointervPName pname, object parameters)

        public static
        void GetPointerv(Enums.GetPointervPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPointerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointerv(Enums.GetPointervPName pname, IntPtr[] parameters)

        public static
        void GetPointerv(Enums.GetPointervPName pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPointerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointer(Enums.IndexPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void IndexPointer(Enums.IndexPointerType type, GLsizei stride, IntPtr pointer)
        {
            IndexPointer_(type, stride, pointer);
        }

        #endregion

        #region IndexPointer(Enums.IndexPointerType type, GLsizei stride, object pointer)

        public static
        void IndexPointer(Enums.IndexPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                IndexPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, IntPtr pointer)

        public static
        void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, IntPtr pointer)
        {
            InterleavedArrays_(format, stride, pointer);
        }

        #endregion

        #region InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, object pointer)

        public static
        void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                InterleavedArrays_(format, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointer(Enums.NormalPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void NormalPointer(Enums.NormalPointerType type, GLsizei stride, IntPtr pointer)
        {
            NormalPointer_(type, stride, pointer);
        }

        #endregion

        #region NormalPointer(Enums.NormalPointerType type, GLsizei stride, object pointer)

        public static
        void NormalPointer(Enums.NormalPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, IntPtr pointer)
        {
            TexCoordPointer_(size, type, stride, pointer);
        }

        #endregion

        #region TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, object pointer)

        public static
        void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, IntPtr pointer)
        {
            VertexPointer_(size, type, stride, pointer);
        }

        #endregion

        #region VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, object pointer)

        public static
        void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage1D_(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage1D_(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage2D_(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage2D_(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return AreTexturesResident_(n, textures, residences);
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, object residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, IntPtr textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, IntPtr residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, object residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, object textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, object residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DeleteTextures(GLsizei n, IntPtr textures)

        public static
        void DeleteTextures(GLsizei n, IntPtr textures)
        {
            DeleteTextures_(n, textures);
        }

        #endregion

        #region DeleteTextures(GLsizei n, object textures)

        public static
        void DeleteTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                DeleteTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteTextures(GLsizei n, GLuint[] textures)

        public static
        void DeleteTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                DeleteTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTextures(GLsizei n, IntPtr textures)

        public static
        void GenTextures(GLsizei n, IntPtr textures)
        {
            GenTextures_(n, textures);
        }

        #endregion

        #region GenTextures(GLsizei n, object textures)

        public static
        void GenTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                GenTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTextures(GLsizei n, GLuint[] textures)

        public static
        void GenTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                GenTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)

        public static
        void PrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            PrioritizeTextures_(n, textures, priorities);
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, object priorities)

        public static
        void PrioritizeTextures(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)

        public static
        void PrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, IntPtr priorities)

        public static
        void PrioritizeTextures(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, object priorities)

        public static
        void PrioritizeTextures(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)

        public static
        void PrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)

        public static
        void PrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)

        public static
        void PrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        public static
        void PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Indexubv(IntPtr c)

        public static
        void Indexubv(IntPtr c)
        {
            Indexubv_(c);
        }

        #endregion

        #region Indexubv(object c)

        public static
        void Indexubv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexubv(GLubyte[] c)

        public static
        void Indexubv(GLubyte[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Indexubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        public static
        void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            DrawRangeElements_(mode, start, end, count, type, indices);
        }

        #endregion

        #region DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        public static
        void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                DrawRangeElements_(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)

        public static
        void ColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)
        {
            ColorTable_(target, internalformat, width, format, type, table);
        }

        #endregion

        #region ColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)

        public static
        void ColorTable(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                ColorTable_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            ColorTableParameterfv_(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void ColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void ColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            ColorTableParameteriv_(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void ColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void ColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTable(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)

        public static
        void GetColorTable(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)
        {
            GetColorTable_(target, format, type, table);
        }

        #endregion

        #region GetColorTable(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object table)

        public static
        void GetColorTable(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                GetColorTable_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetColorTableParameterfv_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void GetColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetColorTableParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void GetColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorSubTable(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)

        public static
        void ColorSubTable(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)
        {
            ColorSubTable_(target, start, count, format, type, data);
        }

        #endregion

        #region ColorSubTable(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)

        public static
        void ColorSubTable(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                ColorSubTable_(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void ConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            ConvolutionFilter1D_(target, internalformat, width, format, type, image);
        }

        #endregion

        #region ConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void ConvolutionFilter1D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                ConvolutionFilter1D_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void ConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            ConvolutionFilter2D_(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region ConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void ConvolutionFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                ConvolutionFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            ConvolutionParameterfv_(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void ConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void ConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            ConvolutionParameteriv_(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void ConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void ConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void GetConvolutionFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            GetConvolutionFilter_(target, format, type, image);
        }

        #endregion

        #region GetConvolutionFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void GetConvolutionFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                GetConvolutionFilter_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetConvolutionParameterfv_(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void GetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetConvolutionParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void GetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            GetSeparableFilter_(target, format, type, row, column, span);
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, object span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, IntPtr span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, object span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, IntPtr span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, object span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, IntPtr span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)

        public static
        void GetSeparableFilter(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column)

        public static
        void SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column)
        {
            SeparableFilter2D_(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column)

        public static
        void SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                SeparableFilter2D_(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column)

        public static
        void SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                SeparableFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)

        public static
        void SeparableFilter2D(GLenum target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                SeparableFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetHistogram(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)

        public static
        void GetHistogram(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)
        {
            GetHistogram_(target, reset, format, type, values);
        }

        #endregion

        #region GetHistogram(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)

        public static
        void GetHistogram(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetHistogram_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetHistogramParameterfv_(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void GetHistogramParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetHistogramParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void GetHistogramParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmax(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)

        public static
        void GetMinmax(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)
        {
            GetMinmax_(target, reset, format, type, values);
        }

        #endregion

        #region GetMinmax(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)

        public static
        void GetMinmax(GLenum target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetMinmax_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetMinmaxParameterfv_(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void GetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetMinmaxParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void GetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexImage3D_(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexImage3D_(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1dv(GLenum target, IntPtr v)
        {
            MultiTexCoord1dv_(target, v);
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, object v)

        public static
        void MultiTexCoord1dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord1dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1fv(GLenum target, IntPtr v)
        {
            MultiTexCoord1fv_(target, v);
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, object v)

        public static
        void MultiTexCoord1fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord1fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1iv(GLenum target, IntPtr v)
        {
            MultiTexCoord1iv_(target, v);
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, object v)

        public static
        void MultiTexCoord1iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, GLint[] v)

        public static
        void MultiTexCoord1iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1sv(GLenum target, IntPtr v)
        {
            MultiTexCoord1sv_(target, v);
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, object v)

        public static
        void MultiTexCoord1sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord1sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2dv(GLenum target, IntPtr v)
        {
            MultiTexCoord2dv_(target, v);
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, object v)

        public static
        void MultiTexCoord2dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord2dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2fv(GLenum target, IntPtr v)
        {
            MultiTexCoord2fv_(target, v);
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, object v)

        public static
        void MultiTexCoord2fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord2fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2iv(GLenum target, IntPtr v)
        {
            MultiTexCoord2iv_(target, v);
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, object v)

        public static
        void MultiTexCoord2iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, GLint[] v)

        public static
        void MultiTexCoord2iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2sv(GLenum target, IntPtr v)
        {
            MultiTexCoord2sv_(target, v);
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, object v)

        public static
        void MultiTexCoord2sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord2sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3dv(GLenum target, IntPtr v)
        {
            MultiTexCoord3dv_(target, v);
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, object v)

        public static
        void MultiTexCoord3dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord3dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3fv(GLenum target, IntPtr v)
        {
            MultiTexCoord3fv_(target, v);
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, object v)

        public static
        void MultiTexCoord3fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord3fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3iv(GLenum target, IntPtr v)
        {
            MultiTexCoord3iv_(target, v);
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, object v)

        public static
        void MultiTexCoord3iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, GLint[] v)

        public static
        void MultiTexCoord3iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3sv(GLenum target, IntPtr v)
        {
            MultiTexCoord3sv_(target, v);
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, object v)

        public static
        void MultiTexCoord3sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord3sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4dv(GLenum target, IntPtr v)
        {
            MultiTexCoord4dv_(target, v);
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, object v)

        public static
        void MultiTexCoord4dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord4dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4fv(GLenum target, IntPtr v)
        {
            MultiTexCoord4fv_(target, v);
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, object v)

        public static
        void MultiTexCoord4fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord4fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4iv(GLenum target, IntPtr v)
        {
            MultiTexCoord4iv_(target, v);
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, object v)

        public static
        void MultiTexCoord4iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, GLint[] v)

        public static
        void MultiTexCoord4iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4sv(GLenum target, IntPtr v)
        {
            MultiTexCoord4sv_(target, v);
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, object v)

        public static
        void MultiTexCoord4sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord4sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixf(IntPtr m)

        public static
        void LoadTransposeMatrixf(IntPtr m)
        {
            LoadTransposeMatrixf_(m);
        }

        #endregion

        #region LoadTransposeMatrixf(object m)

        public static
        void LoadTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixf(GLfloat[] m)

        public static
        void LoadTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixd(IntPtr m)

        public static
        void LoadTransposeMatrixd(IntPtr m)
        {
            LoadTransposeMatrixd_(m);
        }

        #endregion

        #region LoadTransposeMatrixd(object m)

        public static
        void LoadTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixd(GLdouble[] m)

        public static
        void LoadTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixf(IntPtr m)

        public static
        void MultTransposeMatrixf(IntPtr m)
        {
            MultTransposeMatrixf_(m);
        }

        #endregion

        #region MultTransposeMatrixf(object m)

        public static
        void MultTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixf(GLfloat[] m)

        public static
        void MultTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixd(IntPtr m)

        public static
        void MultTransposeMatrixd(IntPtr m)
        {
            MultTransposeMatrixd_(m);
        }

        #endregion

        #region MultTransposeMatrixd(object m)

        public static
        void MultTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixd(GLdouble[] m)

        public static
        void MultTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage3D_(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage3D_(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage2D_(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage2D_(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage1D_(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage1D_(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage1D_(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage1D_(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCompressedTexImage(Enums.TextureTarget target, GLint level, IntPtr img)

        public static
        void GetCompressedTexImage(Enums.TextureTarget target, GLint level, IntPtr img)
        {
            GetCompressedTexImage_(target, level, img);
        }

        #endregion

        #region GetCompressedTexImage(Enums.TextureTarget target, GLint level, object img)

        public static
        void GetCompressedTexImage(Enums.TextureTarget target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                GetCompressedTexImage_(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfv(IntPtr coord)

        public static
        void FogCoordfv(IntPtr coord)
        {
            FogCoordfv_(coord);
        }

        #endregion

        #region FogCoordfv(object coord)

        public static
        void FogCoordfv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoordfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfv(GLfloat[] coord)

        public static
        void FogCoordfv(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoordfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddv(IntPtr coord)

        public static
        void FogCoorddv(IntPtr coord)
        {
            FogCoorddv_(coord);
        }

        #endregion

        #region FogCoorddv(object coord)

        public static
        void FogCoorddv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoorddv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddv(GLdouble[] coord)

        public static
        void FogCoorddv(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoorddv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void FogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            FogCoordPointer_(type, stride, pointer);
        }

        #endregion

        #region FogCoordPointer(GLenum type, GLsizei stride, object pointer)

        public static
        void FogCoordPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                FogCoordPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            MultiDrawArrays_(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, object first, object count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArrays(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            MultiDrawElements_(mode, count, type, indices, primcount);
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfv(GLenum pname, IntPtr parameters)

        public static
        void PointParameterfv(GLenum pname, IntPtr parameters)
        {
            PointParameterfv_(pname, parameters);
        }

        #endregion

        #region PointParameterfv(GLenum pname, object parameters)

        public static
        void PointParameterfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfv(GLenum pname, GLfloat[] parameters)

        public static
        void PointParameterfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameteriv(GLenum pname, IntPtr parameters)

        public static
        void PointParameteriv(GLenum pname, IntPtr parameters)
        {
            PointParameteriv_(pname, parameters);
        }

        #endregion

        #region PointParameteriv(GLenum pname, object parameters)

        public static
        void PointParameteriv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameteriv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameteriv(GLenum pname, GLint[] parameters)

        public static
        void PointParameteriv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameteriv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bv(IntPtr v)

        public static
        void SecondaryColor3bv(IntPtr v)
        {
            SecondaryColor3bv_(v);
        }

        #endregion

        #region SecondaryColor3bv(object v)

        public static
        void SecondaryColor3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bv(GLbyte[] v)

        public static
        void SecondaryColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dv(IntPtr v)

        public static
        void SecondaryColor3dv(IntPtr v)
        {
            SecondaryColor3dv_(v);
        }

        #endregion

        #region SecondaryColor3dv(object v)

        public static
        void SecondaryColor3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dv(GLdouble[] v)

        public static
        void SecondaryColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fv(IntPtr v)

        public static
        void SecondaryColor3fv(IntPtr v)
        {
            SecondaryColor3fv_(v);
        }

        #endregion

        #region SecondaryColor3fv(object v)

        public static
        void SecondaryColor3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fv(GLfloat[] v)

        public static
        void SecondaryColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3iv(IntPtr v)

        public static
        void SecondaryColor3iv(IntPtr v)
        {
            SecondaryColor3iv_(v);
        }

        #endregion

        #region SecondaryColor3iv(object v)

        public static
        void SecondaryColor3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3iv(GLint[] v)

        public static
        void SecondaryColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3sv(IntPtr v)

        public static
        void SecondaryColor3sv(IntPtr v)
        {
            SecondaryColor3sv_(v);
        }

        #endregion

        #region SecondaryColor3sv(object v)

        public static
        void SecondaryColor3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3sv(GLshort[] v)

        public static
        void SecondaryColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubv(IntPtr v)

        public static
        void SecondaryColor3ubv(IntPtr v)
        {
            SecondaryColor3ubv_(v);
        }

        #endregion

        #region SecondaryColor3ubv(object v)

        public static
        void SecondaryColor3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubv(GLubyte[] v)

        public static
        void SecondaryColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uiv(IntPtr v)

        public static
        void SecondaryColor3uiv(IntPtr v)
        {
            SecondaryColor3uiv_(v);
        }

        #endregion

        #region SecondaryColor3uiv(object v)

        public static
        void SecondaryColor3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uiv(GLuint[] v)

        public static
        void SecondaryColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usv(IntPtr v)

        public static
        void SecondaryColor3usv(IntPtr v)
        {
            SecondaryColor3usv_(v);
        }

        #endregion

        #region SecondaryColor3usv(object v)

        public static
        void SecondaryColor3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usv(GLushort[] v)

        public static
        void SecondaryColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)
        {
            SecondaryColorPointer_(size, type, stride, pointer);
        }

        #endregion

        #region SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)

        public static
        void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                SecondaryColorPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dv(IntPtr v)

        public static
        void WindowPos2dv(IntPtr v)
        {
            WindowPos2dv_(v);
        }

        #endregion

        #region WindowPos2dv(object v)

        public static
        void WindowPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dv(GLdouble[] v)

        public static
        void WindowPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fv(IntPtr v)

        public static
        void WindowPos2fv(IntPtr v)
        {
            WindowPos2fv_(v);
        }

        #endregion

        #region WindowPos2fv(object v)

        public static
        void WindowPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fv(GLfloat[] v)

        public static
        void WindowPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2iv(IntPtr v)

        public static
        void WindowPos2iv(IntPtr v)
        {
            WindowPos2iv_(v);
        }

        #endregion

        #region WindowPos2iv(object v)

        public static
        void WindowPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2iv(GLint[] v)

        public static
        void WindowPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2sv(IntPtr v)

        public static
        void WindowPos2sv(IntPtr v)
        {
            WindowPos2sv_(v);
        }

        #endregion

        #region WindowPos2sv(object v)

        public static
        void WindowPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2sv(GLshort[] v)

        public static
        void WindowPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dv(IntPtr v)

        public static
        void WindowPos3dv(IntPtr v)
        {
            WindowPos3dv_(v);
        }

        #endregion

        #region WindowPos3dv(object v)

        public static
        void WindowPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dv(GLdouble[] v)

        public static
        void WindowPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fv(IntPtr v)

        public static
        void WindowPos3fv(IntPtr v)
        {
            WindowPos3fv_(v);
        }

        #endregion

        #region WindowPos3fv(object v)

        public static
        void WindowPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fv(GLfloat[] v)

        public static
        void WindowPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3iv(IntPtr v)

        public static
        void WindowPos3iv(IntPtr v)
        {
            WindowPos3iv_(v);
        }

        #endregion

        #region WindowPos3iv(object v)

        public static
        void WindowPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3iv(GLint[] v)

        public static
        void WindowPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3sv(IntPtr v)

        public static
        void WindowPos3sv(IntPtr v)
        {
            WindowPos3sv_(v);
        }

        #endregion

        #region WindowPos3sv(object v)

        public static
        void WindowPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3sv(GLshort[] v)

        public static
        void WindowPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueries(GLsizei n, IntPtr ids)

        public static
        void GenQueries(GLsizei n, IntPtr ids)
        {
            GenQueries_(n, ids);
        }

        #endregion

        #region GenQueries(GLsizei n, object ids)

        public static
        void GenQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueries(GLsizei n, GLuint[] ids)

        public static
        void GenQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueries(GLsizei n, IntPtr ids)

        public static
        void DeleteQueries(GLsizei n, IntPtr ids)
        {
            DeleteQueries_(n, ids);
        }

        #endregion

        #region DeleteQueries(GLsizei n, object ids)

        public static
        void DeleteQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueries(GLsizei n, GLuint[] ids)

        public static
        void DeleteQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, IntPtr parameters)

        public static
        void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, IntPtr parameters)
        {
            GetQueryiv_(target, pname, parameters);
        }

        #endregion

        #region GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, object parameters)

        public static
        void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryiv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, GLint[] parameters)

        public static
        void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryiv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters)

        public static
        void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters)
        {
            GetQueryObjectiv_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, object parameters)

        public static
        void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, GLint[] parameters)

        public static
        void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters)

        public static
        void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, IntPtr parameters)
        {
            GetQueryObjectuiv_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, object parameters)

        public static
        void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectuiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, GLuint[] parameters)

        public static
        void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectuiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffers(GLsizei n, IntPtr buffers)

        public static
        void DeleteBuffers(GLsizei n, IntPtr buffers)
        {
            DeleteBuffers_(n, buffers);
        }

        #endregion

        #region DeleteBuffers(GLsizei n, object buffers)

        public static
        void DeleteBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                DeleteBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffers(GLsizei n, GLuint[] buffers)

        public static
        void DeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                DeleteBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffers(GLsizei n, IntPtr buffers)

        public static
        void GenBuffers(GLsizei n, IntPtr buffers)
        {
            GenBuffers_(n, buffers);
        }

        #endregion

        #region GenBuffers(GLsizei n, object buffers)

        public static
        void GenBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                GenBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffers(GLsizei n, GLuint[] buffers)

        public static
        void GenBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                GenBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)

        public static
        void BufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)
        {
            BufferData_(target, size, data, usage);
        }

        #endregion

        #region BufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)

        public static
        void BufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                BufferData_(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        public static
        void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            BufferSubData_(target, offset, size, data);
        }

        #endregion

        #region BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        public static
        void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                BufferSubData_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        public static
        void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            GetBufferSubData_(target, offset, size, data);
        }

        #endregion

        #region GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        public static
        void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetBufferSubData_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetBufferParameteriv_(target, pname, parameters);
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void GetBufferParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetBufferPointerv_(target, pname, parameters);
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, object parameters)

        public static
        void GetBufferPointerv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferPointerv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)

        public static
        void GetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferPointerv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffers(GLsizei n, IntPtr bufs)

        public static
        void DrawBuffers(GLsizei n, IntPtr bufs)
        {
            DrawBuffers_(n, bufs);
        }

        #endregion

        #region DrawBuffers(GLsizei n, object bufs)

        public static
        void DrawBuffers(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffers(GLsizei n, GLenum[] bufs)

        public static
        void DrawBuffers(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GetActiveAttrib_(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GetActiveUniform_(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)

        public static
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            GetAttachedShaders_(program, maxCount, count, obj);
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)

        public static
        void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, IntPtr parameters)

        public static
        void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, IntPtr parameters)
        {
            GetProgramiv_(program, pname, parameters);
        }

        #endregion

        #region GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, object parameters)

        public static
        void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramiv_(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, GLint[] parameters)

        public static
        void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramiv_(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        public static
        void GetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            GetProgramInfoLog_(program, bufSize, length, infoLog);
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)

        public static
        void GetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetProgramInfoLog_(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        public static
        void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetProgramInfoLog_(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, IntPtr parameters)

        public static
        void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, IntPtr parameters)
        {
            GetShaderiv_(shader, pname, parameters);
        }

        #endregion

        #region GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, object parameters)

        public static
        void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetShaderiv_(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, GLint[] parameters)

        public static
        void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetShaderiv_(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        public static
        void GetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            GetShaderInfoLog_(shader, bufSize, length, infoLog);
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)

        public static
        void GetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderInfoLog_(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        public static
        void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderInfoLog_(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)

        public static
        void GetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)
        {
            GetShaderSource_(shader, bufSize, length, source);
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)

        public static
        void GetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderSource_(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)

        public static
        void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderSource_(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, IntPtr parameters)

        public static
        void GetUniformfv(GLuint program, GLint location, IntPtr parameters)
        {
            GetUniformfv_(program, location, parameters);
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, object parameters)

        public static
        void GetUniformfv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformfv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, GLfloat[] parameters)

        public static
        void GetUniformfv(GLuint program, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformfv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, IntPtr parameters)

        public static
        void GetUniformiv(GLuint program, GLint location, IntPtr parameters)
        {
            GetUniformiv_(program, location, parameters);
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, object parameters)

        public static
        void GetUniformiv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformiv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, GLint[] parameters)

        public static
        void GetUniformiv(GLuint program, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformiv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribdv_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribdv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void GetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribfv_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribfv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribiv_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribiv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribiv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void GetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribiv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)
        {
            GetVertexAttribPointerv_(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)

        public static
        void GetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointerv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointerv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)

        public static
        void ShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)
        {
            ShaderSource_(shader, count, @string, length);
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, object length)

        public static
        void ShaderSource(GLuint shader, GLsizei count, string[] @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                ShaderSource_(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)

        public static
        void ShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                ShaderSource_(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform1fv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform1fv_(location, count, value);
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, object value)

        public static
        void Uniform1fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform2fv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform2fv_(location, count, value);
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, object value)

        public static
        void Uniform2fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform3fv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform3fv_(location, count, value);
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, object value)

        public static
        void Uniform3fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform4fv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform4fv_(location, count, value);
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, object value)

        public static
        void Uniform4fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform1iv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform1iv_(location, count, value);
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, object value)

        public static
        void Uniform1iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform2iv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform2iv_(location, count, value);
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, object value)

        public static
        void Uniform2iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform3iv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform3iv_(location, count, value);
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, object value)

        public static
        void Uniform3iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform4iv(GLint location, GLsizei count, IntPtr value)
        {
            Uniform4iv_(location, count, value);
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, object value)

        public static
        void Uniform4iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix2fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix3fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix4fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, IntPtr v)

        public static
        void VertexAttrib1dv(GLuint index, IntPtr v)
        {
            VertexAttrib1dv_(index, v);
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, object v)

        public static
        void VertexAttrib1dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, IntPtr v)

        public static
        void VertexAttrib1fv(GLuint index, IntPtr v)
        {
            VertexAttrib1fv_(index, v);
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, object v)

        public static
        void VertexAttrib1fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, IntPtr v)

        public static
        void VertexAttrib1sv(GLuint index, IntPtr v)
        {
            VertexAttrib1sv_(index, v);
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, object v)

        public static
        void VertexAttrib1sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, GLshort[] v)

        public static
        void VertexAttrib1sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, IntPtr v)

        public static
        void VertexAttrib2dv(GLuint index, IntPtr v)
        {
            VertexAttrib2dv_(index, v);
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, object v)

        public static
        void VertexAttrib2dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, IntPtr v)

        public static
        void VertexAttrib2fv(GLuint index, IntPtr v)
        {
            VertexAttrib2fv_(index, v);
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, object v)

        public static
        void VertexAttrib2fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, IntPtr v)

        public static
        void VertexAttrib2sv(GLuint index, IntPtr v)
        {
            VertexAttrib2sv_(index, v);
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, object v)

        public static
        void VertexAttrib2sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, GLshort[] v)

        public static
        void VertexAttrib2sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, IntPtr v)

        public static
        void VertexAttrib3dv(GLuint index, IntPtr v)
        {
            VertexAttrib3dv_(index, v);
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, object v)

        public static
        void VertexAttrib3dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, IntPtr v)

        public static
        void VertexAttrib3fv(GLuint index, IntPtr v)
        {
            VertexAttrib3fv_(index, v);
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, object v)

        public static
        void VertexAttrib3fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, IntPtr v)

        public static
        void VertexAttrib3sv(GLuint index, IntPtr v)
        {
            VertexAttrib3sv_(index, v);
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, object v)

        public static
        void VertexAttrib3sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, GLshort[] v)

        public static
        void VertexAttrib3sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Nbv(GLuint index, IntPtr v)
        {
            VertexAttrib4Nbv_(index, v);
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, object v)

        public static
        void VertexAttrib4Nbv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nbv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, GLbyte[] v)

        public static
        void VertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nbv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Niv(GLuint index, IntPtr v)
        {
            VertexAttrib4Niv_(index, v);
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, object v)

        public static
        void VertexAttrib4Niv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Niv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, GLint[] v)

        public static
        void VertexAttrib4Niv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Niv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Nsv(GLuint index, IntPtr v)
        {
            VertexAttrib4Nsv_(index, v);
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, object v)

        public static
        void VertexAttrib4Nsv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nsv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, GLshort[] v)

        public static
        void VertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nsv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Nubv(GLuint index, IntPtr v)
        {
            VertexAttrib4Nubv_(index, v);
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, object v)

        public static
        void VertexAttrib4Nubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, GLubyte[] v)

        public static
        void VertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Nuiv(GLuint index, IntPtr v)
        {
            VertexAttrib4Nuiv_(index, v);
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, object v)

        public static
        void VertexAttrib4Nuiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nuiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, GLuint[] v)

        public static
        void VertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nuiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4Nusv(GLuint index, IntPtr v)
        {
            VertexAttrib4Nusv_(index, v);
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, object v)

        public static
        void VertexAttrib4Nusv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nusv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, GLushort[] v)

        public static
        void VertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4Nusv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4bv(GLuint index, IntPtr v)
        {
            VertexAttrib4bv_(index, v);
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, object v)

        public static
        void VertexAttrib4bv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4bv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, GLbyte[] v)

        public static
        void VertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4bv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4dv(GLuint index, IntPtr v)
        {
            VertexAttrib4dv_(index, v);
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, object v)

        public static
        void VertexAttrib4dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4fv(GLuint index, IntPtr v)
        {
            VertexAttrib4fv_(index, v);
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, object v)

        public static
        void VertexAttrib4fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4iv(GLuint index, IntPtr v)
        {
            VertexAttrib4iv_(index, v);
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, object v)

        public static
        void VertexAttrib4iv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4iv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, GLint[] v)

        public static
        void VertexAttrib4iv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4iv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4sv(GLuint index, IntPtr v)
        {
            VertexAttrib4sv_(index, v);
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, object v)

        public static
        void VertexAttrib4sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, GLshort[] v)

        public static
        void VertexAttrib4sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4ubv(GLuint index, IntPtr v)
        {
            VertexAttrib4ubv_(index, v);
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, object v)

        public static
        void VertexAttrib4ubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, GLubyte[] v)

        public static
        void VertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4uiv(GLuint index, IntPtr v)
        {
            VertexAttrib4uiv_(index, v);
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, object v)

        public static
        void VertexAttrib4uiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4uiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, GLuint[] v)

        public static
        void VertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4uiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, IntPtr v)

        public static
        void VertexAttrib4usv(GLuint index, IntPtr v)
        {
            VertexAttrib4usv_(index, v);
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, object v)

        public static
        void VertexAttrib4usv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4usv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, GLushort[] v)

        public static
        void VertexAttrib4usv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4usv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribPointer(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer)

        public static
        void VertexAttribPointer(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer)
        {
            VertexAttribPointer_(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region VertexAttribPointer(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, object pointer)

        public static
        void VertexAttribPointer(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexAttribPointer_(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix2x3fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix2x3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix3x2fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix3x2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix2x4fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix2x4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix4x2fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix4x2fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix3x4fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix3x4fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix4x3fv_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix4x3fv(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #endregion

        #region static Constructor

        static GL()
        {
            if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major < 6 || Environment.OSVersion.Platform == PlatformID.Win32Windows)
            {
                #region Older Windows Core
                BlendColor = (Delegates.BlendColor)WindowsGetAddress("glBlendColor", typeof(Delegates.BlendColor));
                BlendEquation = (Delegates.BlendEquation)WindowsGetAddress("glBlendEquation", typeof(Delegates.BlendEquation));
                DrawRangeElements_ = (Delegates.DrawRangeElements_)WindowsGetAddress("glDrawRangeElements", typeof(Delegates.DrawRangeElements_));
                ColorTable_ = (Delegates.ColorTable_)WindowsGetAddress("glColorTable", typeof(Delegates.ColorTable_));
                ColorTableParameterfv_ = (Delegates.ColorTableParameterfv_)WindowsGetAddress("glColorTableParameterfv", typeof(Delegates.ColorTableParameterfv_));
                ColorTableParameteriv_ = (Delegates.ColorTableParameteriv_)WindowsGetAddress("glColorTableParameteriv", typeof(Delegates.ColorTableParameteriv_));
                CopyColorTable = (Delegates.CopyColorTable)WindowsGetAddress("glCopyColorTable", typeof(Delegates.CopyColorTable));
                GetColorTable_ = (Delegates.GetColorTable_)WindowsGetAddress("glGetColorTable", typeof(Delegates.GetColorTable_));
                GetColorTableParameterfv_ = (Delegates.GetColorTableParameterfv_)WindowsGetAddress("glGetColorTableParameterfv", typeof(Delegates.GetColorTableParameterfv_));
                GetColorTableParameteriv_ = (Delegates.GetColorTableParameteriv_)WindowsGetAddress("glGetColorTableParameteriv", typeof(Delegates.GetColorTableParameteriv_));
                ColorSubTable_ = (Delegates.ColorSubTable_)WindowsGetAddress("glColorSubTable", typeof(Delegates.ColorSubTable_));
                CopyColorSubTable = (Delegates.CopyColorSubTable)WindowsGetAddress("glCopyColorSubTable", typeof(Delegates.CopyColorSubTable));
                ConvolutionFilter1D_ = (Delegates.ConvolutionFilter1D_)WindowsGetAddress("glConvolutionFilter1D", typeof(Delegates.ConvolutionFilter1D_));
                ConvolutionFilter2D_ = (Delegates.ConvolutionFilter2D_)WindowsGetAddress("glConvolutionFilter2D", typeof(Delegates.ConvolutionFilter2D_));
                ConvolutionParameterf = (Delegates.ConvolutionParameterf)WindowsGetAddress("glConvolutionParameterf", typeof(Delegates.ConvolutionParameterf));
                ConvolutionParameterfv_ = (Delegates.ConvolutionParameterfv_)WindowsGetAddress("glConvolutionParameterfv", typeof(Delegates.ConvolutionParameterfv_));
                ConvolutionParameteri = (Delegates.ConvolutionParameteri)WindowsGetAddress("glConvolutionParameteri", typeof(Delegates.ConvolutionParameteri));
                ConvolutionParameteriv_ = (Delegates.ConvolutionParameteriv_)WindowsGetAddress("glConvolutionParameteriv", typeof(Delegates.ConvolutionParameteriv_));
                CopyConvolutionFilter1D = (Delegates.CopyConvolutionFilter1D)WindowsGetAddress("glCopyConvolutionFilter1D", typeof(Delegates.CopyConvolutionFilter1D));
                CopyConvolutionFilter2D = (Delegates.CopyConvolutionFilter2D)WindowsGetAddress("glCopyConvolutionFilter2D", typeof(Delegates.CopyConvolutionFilter2D));
                GetConvolutionFilter_ = (Delegates.GetConvolutionFilter_)WindowsGetAddress("glGetConvolutionFilter", typeof(Delegates.GetConvolutionFilter_));
                GetConvolutionParameterfv_ = (Delegates.GetConvolutionParameterfv_)WindowsGetAddress("glGetConvolutionParameterfv", typeof(Delegates.GetConvolutionParameterfv_));
                GetConvolutionParameteriv_ = (Delegates.GetConvolutionParameteriv_)WindowsGetAddress("glGetConvolutionParameteriv", typeof(Delegates.GetConvolutionParameteriv_));
                GetSeparableFilter_ = (Delegates.GetSeparableFilter_)WindowsGetAddress("glGetSeparableFilter", typeof(Delegates.GetSeparableFilter_));
                SeparableFilter2D_ = (Delegates.SeparableFilter2D_)WindowsGetAddress("glSeparableFilter2D", typeof(Delegates.SeparableFilter2D_));
                GetHistogram_ = (Delegates.GetHistogram_)WindowsGetAddress("glGetHistogram", typeof(Delegates.GetHistogram_));
                GetHistogramParameterfv_ = (Delegates.GetHistogramParameterfv_)WindowsGetAddress("glGetHistogramParameterfv", typeof(Delegates.GetHistogramParameterfv_));
                GetHistogramParameteriv_ = (Delegates.GetHistogramParameteriv_)WindowsGetAddress("glGetHistogramParameteriv", typeof(Delegates.GetHistogramParameteriv_));
                GetMinmax_ = (Delegates.GetMinmax_)WindowsGetAddress("glGetMinmax", typeof(Delegates.GetMinmax_));
                GetMinmaxParameterfv_ = (Delegates.GetMinmaxParameterfv_)WindowsGetAddress("glGetMinmaxParameterfv", typeof(Delegates.GetMinmaxParameterfv_));
                GetMinmaxParameteriv_ = (Delegates.GetMinmaxParameteriv_)WindowsGetAddress("glGetMinmaxParameteriv", typeof(Delegates.GetMinmaxParameteriv_));
                Histogram = (Delegates.Histogram)WindowsGetAddress("glHistogram", typeof(Delegates.Histogram));
                Minmax = (Delegates.Minmax)WindowsGetAddress("glMinmax", typeof(Delegates.Minmax));
                ResetHistogram = (Delegates.ResetHistogram)WindowsGetAddress("glResetHistogram", typeof(Delegates.ResetHistogram));
                ResetMinmax = (Delegates.ResetMinmax)WindowsGetAddress("glResetMinmax", typeof(Delegates.ResetMinmax));
                TexImage3D_ = (Delegates.TexImage3D_)WindowsGetAddress("glTexImage3D", typeof(Delegates.TexImage3D_));
                TexSubImage3D_ = (Delegates.TexSubImage3D_)WindowsGetAddress("glTexSubImage3D", typeof(Delegates.TexSubImage3D_));
                CopyTexSubImage3D = (Delegates.CopyTexSubImage3D)WindowsGetAddress("glCopyTexSubImage3D", typeof(Delegates.CopyTexSubImage3D));
                ActiveTexture = (Delegates.ActiveTexture)WindowsGetAddress("glActiveTexture", typeof(Delegates.ActiveTexture));
                ClientActiveTexture = (Delegates.ClientActiveTexture)WindowsGetAddress("glClientActiveTexture", typeof(Delegates.ClientActiveTexture));
                MultiTexCoord1d = (Delegates.MultiTexCoord1d)WindowsGetAddress("glMultiTexCoord1d", typeof(Delegates.MultiTexCoord1d));
                MultiTexCoord1dv_ = (Delegates.MultiTexCoord1dv_)WindowsGetAddress("glMultiTexCoord1dv", typeof(Delegates.MultiTexCoord1dv_));
                MultiTexCoord1f = (Delegates.MultiTexCoord1f)WindowsGetAddress("glMultiTexCoord1f", typeof(Delegates.MultiTexCoord1f));
                MultiTexCoord1fv_ = (Delegates.MultiTexCoord1fv_)WindowsGetAddress("glMultiTexCoord1fv", typeof(Delegates.MultiTexCoord1fv_));
                MultiTexCoord1i = (Delegates.MultiTexCoord1i)WindowsGetAddress("glMultiTexCoord1i", typeof(Delegates.MultiTexCoord1i));
                MultiTexCoord1iv_ = (Delegates.MultiTexCoord1iv_)WindowsGetAddress("glMultiTexCoord1iv", typeof(Delegates.MultiTexCoord1iv_));
                MultiTexCoord1s = (Delegates.MultiTexCoord1s)WindowsGetAddress("glMultiTexCoord1s", typeof(Delegates.MultiTexCoord1s));
                MultiTexCoord1sv_ = (Delegates.MultiTexCoord1sv_)WindowsGetAddress("glMultiTexCoord1sv", typeof(Delegates.MultiTexCoord1sv_));
                MultiTexCoord2d = (Delegates.MultiTexCoord2d)WindowsGetAddress("glMultiTexCoord2d", typeof(Delegates.MultiTexCoord2d));
                MultiTexCoord2dv_ = (Delegates.MultiTexCoord2dv_)WindowsGetAddress("glMultiTexCoord2dv", typeof(Delegates.MultiTexCoord2dv_));
                MultiTexCoord2f = (Delegates.MultiTexCoord2f)WindowsGetAddress("glMultiTexCoord2f", typeof(Delegates.MultiTexCoord2f));
                MultiTexCoord2fv_ = (Delegates.MultiTexCoord2fv_)WindowsGetAddress("glMultiTexCoord2fv", typeof(Delegates.MultiTexCoord2fv_));
                MultiTexCoord2i = (Delegates.MultiTexCoord2i)WindowsGetAddress("glMultiTexCoord2i", typeof(Delegates.MultiTexCoord2i));
                MultiTexCoord2iv_ = (Delegates.MultiTexCoord2iv_)WindowsGetAddress("glMultiTexCoord2iv", typeof(Delegates.MultiTexCoord2iv_));
                MultiTexCoord2s = (Delegates.MultiTexCoord2s)WindowsGetAddress("glMultiTexCoord2s", typeof(Delegates.MultiTexCoord2s));
                MultiTexCoord2sv_ = (Delegates.MultiTexCoord2sv_)WindowsGetAddress("glMultiTexCoord2sv", typeof(Delegates.MultiTexCoord2sv_));
                MultiTexCoord3d = (Delegates.MultiTexCoord3d)WindowsGetAddress("glMultiTexCoord3d", typeof(Delegates.MultiTexCoord3d));
                MultiTexCoord3dv_ = (Delegates.MultiTexCoord3dv_)WindowsGetAddress("glMultiTexCoord3dv", typeof(Delegates.MultiTexCoord3dv_));
                MultiTexCoord3f = (Delegates.MultiTexCoord3f)WindowsGetAddress("glMultiTexCoord3f", typeof(Delegates.MultiTexCoord3f));
                MultiTexCoord3fv_ = (Delegates.MultiTexCoord3fv_)WindowsGetAddress("glMultiTexCoord3fv", typeof(Delegates.MultiTexCoord3fv_));
                MultiTexCoord3i = (Delegates.MultiTexCoord3i)WindowsGetAddress("glMultiTexCoord3i", typeof(Delegates.MultiTexCoord3i));
                MultiTexCoord3iv_ = (Delegates.MultiTexCoord3iv_)WindowsGetAddress("glMultiTexCoord3iv", typeof(Delegates.MultiTexCoord3iv_));
                MultiTexCoord3s = (Delegates.MultiTexCoord3s)WindowsGetAddress("glMultiTexCoord3s", typeof(Delegates.MultiTexCoord3s));
                MultiTexCoord3sv_ = (Delegates.MultiTexCoord3sv_)WindowsGetAddress("glMultiTexCoord3sv", typeof(Delegates.MultiTexCoord3sv_));
                MultiTexCoord4d = (Delegates.MultiTexCoord4d)WindowsGetAddress("glMultiTexCoord4d", typeof(Delegates.MultiTexCoord4d));
                MultiTexCoord4dv_ = (Delegates.MultiTexCoord4dv_)WindowsGetAddress("glMultiTexCoord4dv", typeof(Delegates.MultiTexCoord4dv_));
                MultiTexCoord4f = (Delegates.MultiTexCoord4f)WindowsGetAddress("glMultiTexCoord4f", typeof(Delegates.MultiTexCoord4f));
                MultiTexCoord4fv_ = (Delegates.MultiTexCoord4fv_)WindowsGetAddress("glMultiTexCoord4fv", typeof(Delegates.MultiTexCoord4fv_));
                MultiTexCoord4i = (Delegates.MultiTexCoord4i)WindowsGetAddress("glMultiTexCoord4i", typeof(Delegates.MultiTexCoord4i));
                MultiTexCoord4iv_ = (Delegates.MultiTexCoord4iv_)WindowsGetAddress("glMultiTexCoord4iv", typeof(Delegates.MultiTexCoord4iv_));
                MultiTexCoord4s = (Delegates.MultiTexCoord4s)WindowsGetAddress("glMultiTexCoord4s", typeof(Delegates.MultiTexCoord4s));
                MultiTexCoord4sv_ = (Delegates.MultiTexCoord4sv_)WindowsGetAddress("glMultiTexCoord4sv", typeof(Delegates.MultiTexCoord4sv_));
                LoadTransposeMatrixf_ = (Delegates.LoadTransposeMatrixf_)WindowsGetAddress("glLoadTransposeMatrixf", typeof(Delegates.LoadTransposeMatrixf_));
                LoadTransposeMatrixd_ = (Delegates.LoadTransposeMatrixd_)WindowsGetAddress("glLoadTransposeMatrixd", typeof(Delegates.LoadTransposeMatrixd_));
                MultTransposeMatrixf_ = (Delegates.MultTransposeMatrixf_)WindowsGetAddress("glMultTransposeMatrixf", typeof(Delegates.MultTransposeMatrixf_));
                MultTransposeMatrixd_ = (Delegates.MultTransposeMatrixd_)WindowsGetAddress("glMultTransposeMatrixd", typeof(Delegates.MultTransposeMatrixd_));
                SampleCoverage = (Delegates.SampleCoverage)WindowsGetAddress("glSampleCoverage", typeof(Delegates.SampleCoverage));
                CompressedTexImage3D_ = (Delegates.CompressedTexImage3D_)WindowsGetAddress("glCompressedTexImage3D", typeof(Delegates.CompressedTexImage3D_));
                CompressedTexImage2D_ = (Delegates.CompressedTexImage2D_)WindowsGetAddress("glCompressedTexImage2D", typeof(Delegates.CompressedTexImage2D_));
                CompressedTexImage1D_ = (Delegates.CompressedTexImage1D_)WindowsGetAddress("glCompressedTexImage1D", typeof(Delegates.CompressedTexImage1D_));
                CompressedTexSubImage3D_ = (Delegates.CompressedTexSubImage3D_)WindowsGetAddress("glCompressedTexSubImage3D", typeof(Delegates.CompressedTexSubImage3D_));
                CompressedTexSubImage2D_ = (Delegates.CompressedTexSubImage2D_)WindowsGetAddress("glCompressedTexSubImage2D", typeof(Delegates.CompressedTexSubImage2D_));
                CompressedTexSubImage1D_ = (Delegates.CompressedTexSubImage1D_)WindowsGetAddress("glCompressedTexSubImage1D", typeof(Delegates.CompressedTexSubImage1D_));
                GetCompressedTexImage_ = (Delegates.GetCompressedTexImage_)WindowsGetAddress("glGetCompressedTexImage", typeof(Delegates.GetCompressedTexImage_));
                BlendFuncSeparate = (Delegates.BlendFuncSeparate)WindowsGetAddress("glBlendFuncSeparate", typeof(Delegates.BlendFuncSeparate));
                FogCoordf = (Delegates.FogCoordf)WindowsGetAddress("glFogCoordf", typeof(Delegates.FogCoordf));
                FogCoordfv_ = (Delegates.FogCoordfv_)WindowsGetAddress("glFogCoordfv", typeof(Delegates.FogCoordfv_));
                FogCoordd = (Delegates.FogCoordd)WindowsGetAddress("glFogCoordd", typeof(Delegates.FogCoordd));
                FogCoorddv_ = (Delegates.FogCoorddv_)WindowsGetAddress("glFogCoorddv", typeof(Delegates.FogCoorddv_));
                FogCoordPointer_ = (Delegates.FogCoordPointer_)WindowsGetAddress("glFogCoordPointer", typeof(Delegates.FogCoordPointer_));
                MultiDrawArrays_ = (Delegates.MultiDrawArrays_)WindowsGetAddress("glMultiDrawArrays", typeof(Delegates.MultiDrawArrays_));
                MultiDrawElements_ = (Delegates.MultiDrawElements_)WindowsGetAddress("glMultiDrawElements", typeof(Delegates.MultiDrawElements_));
                PointParameterf = (Delegates.PointParameterf)WindowsGetAddress("glPointParameterf", typeof(Delegates.PointParameterf));
                PointParameterfv_ = (Delegates.PointParameterfv_)WindowsGetAddress("glPointParameterfv", typeof(Delegates.PointParameterfv_));
                PointParameteri = (Delegates.PointParameteri)WindowsGetAddress("glPointParameteri", typeof(Delegates.PointParameteri));
                PointParameteriv_ = (Delegates.PointParameteriv_)WindowsGetAddress("glPointParameteriv", typeof(Delegates.PointParameteriv_));
                SecondaryColor3b = (Delegates.SecondaryColor3b)WindowsGetAddress("glSecondaryColor3b", typeof(Delegates.SecondaryColor3b));
                SecondaryColor3bv_ = (Delegates.SecondaryColor3bv_)WindowsGetAddress("glSecondaryColor3bv", typeof(Delegates.SecondaryColor3bv_));
                SecondaryColor3d = (Delegates.SecondaryColor3d)WindowsGetAddress("glSecondaryColor3d", typeof(Delegates.SecondaryColor3d));
                SecondaryColor3dv_ = (Delegates.SecondaryColor3dv_)WindowsGetAddress("glSecondaryColor3dv", typeof(Delegates.SecondaryColor3dv_));
                SecondaryColor3f = (Delegates.SecondaryColor3f)WindowsGetAddress("glSecondaryColor3f", typeof(Delegates.SecondaryColor3f));
                SecondaryColor3fv_ = (Delegates.SecondaryColor3fv_)WindowsGetAddress("glSecondaryColor3fv", typeof(Delegates.SecondaryColor3fv_));
                SecondaryColor3i = (Delegates.SecondaryColor3i)WindowsGetAddress("glSecondaryColor3i", typeof(Delegates.SecondaryColor3i));
                SecondaryColor3iv_ = (Delegates.SecondaryColor3iv_)WindowsGetAddress("glSecondaryColor3iv", typeof(Delegates.SecondaryColor3iv_));
                SecondaryColor3s = (Delegates.SecondaryColor3s)WindowsGetAddress("glSecondaryColor3s", typeof(Delegates.SecondaryColor3s));
                SecondaryColor3sv_ = (Delegates.SecondaryColor3sv_)WindowsGetAddress("glSecondaryColor3sv", typeof(Delegates.SecondaryColor3sv_));
                SecondaryColor3ub = (Delegates.SecondaryColor3ub)WindowsGetAddress("glSecondaryColor3ub", typeof(Delegates.SecondaryColor3ub));
                SecondaryColor3ubv_ = (Delegates.SecondaryColor3ubv_)WindowsGetAddress("glSecondaryColor3ubv", typeof(Delegates.SecondaryColor3ubv_));
                SecondaryColor3ui = (Delegates.SecondaryColor3ui)WindowsGetAddress("glSecondaryColor3ui", typeof(Delegates.SecondaryColor3ui));
                SecondaryColor3uiv_ = (Delegates.SecondaryColor3uiv_)WindowsGetAddress("glSecondaryColor3uiv", typeof(Delegates.SecondaryColor3uiv_));
                SecondaryColor3us = (Delegates.SecondaryColor3us)WindowsGetAddress("glSecondaryColor3us", typeof(Delegates.SecondaryColor3us));
                SecondaryColor3usv_ = (Delegates.SecondaryColor3usv_)WindowsGetAddress("glSecondaryColor3usv", typeof(Delegates.SecondaryColor3usv_));
                SecondaryColorPointer_ = (Delegates.SecondaryColorPointer_)WindowsGetAddress("glSecondaryColorPointer", typeof(Delegates.SecondaryColorPointer_));
                WindowPos2d = (Delegates.WindowPos2d)WindowsGetAddress("glWindowPos2d", typeof(Delegates.WindowPos2d));
                WindowPos2dv_ = (Delegates.WindowPos2dv_)WindowsGetAddress("glWindowPos2dv", typeof(Delegates.WindowPos2dv_));
                WindowPos2f = (Delegates.WindowPos2f)WindowsGetAddress("glWindowPos2f", typeof(Delegates.WindowPos2f));
                WindowPos2fv_ = (Delegates.WindowPos2fv_)WindowsGetAddress("glWindowPos2fv", typeof(Delegates.WindowPos2fv_));
                WindowPos2i = (Delegates.WindowPos2i)WindowsGetAddress("glWindowPos2i", typeof(Delegates.WindowPos2i));
                WindowPos2iv_ = (Delegates.WindowPos2iv_)WindowsGetAddress("glWindowPos2iv", typeof(Delegates.WindowPos2iv_));
                WindowPos2s = (Delegates.WindowPos2s)WindowsGetAddress("glWindowPos2s", typeof(Delegates.WindowPos2s));
                WindowPos2sv_ = (Delegates.WindowPos2sv_)WindowsGetAddress("glWindowPos2sv", typeof(Delegates.WindowPos2sv_));
                WindowPos3d = (Delegates.WindowPos3d)WindowsGetAddress("glWindowPos3d", typeof(Delegates.WindowPos3d));
                WindowPos3dv_ = (Delegates.WindowPos3dv_)WindowsGetAddress("glWindowPos3dv", typeof(Delegates.WindowPos3dv_));
                WindowPos3f = (Delegates.WindowPos3f)WindowsGetAddress("glWindowPos3f", typeof(Delegates.WindowPos3f));
                WindowPos3fv_ = (Delegates.WindowPos3fv_)WindowsGetAddress("glWindowPos3fv", typeof(Delegates.WindowPos3fv_));
                WindowPos3i = (Delegates.WindowPos3i)WindowsGetAddress("glWindowPos3i", typeof(Delegates.WindowPos3i));
                WindowPos3iv_ = (Delegates.WindowPos3iv_)WindowsGetAddress("glWindowPos3iv", typeof(Delegates.WindowPos3iv_));
                WindowPos3s = (Delegates.WindowPos3s)WindowsGetAddress("glWindowPos3s", typeof(Delegates.WindowPos3s));
                WindowPos3sv_ = (Delegates.WindowPos3sv_)WindowsGetAddress("glWindowPos3sv", typeof(Delegates.WindowPos3sv_));
                GenQueries_ = (Delegates.GenQueries_)WindowsGetAddress("glGenQueries", typeof(Delegates.GenQueries_));
                DeleteQueries_ = (Delegates.DeleteQueries_)WindowsGetAddress("glDeleteQueries", typeof(Delegates.DeleteQueries_));
                IsQuery = (Delegates.IsQuery)WindowsGetAddress("glIsQuery", typeof(Delegates.IsQuery));
                BeginQuery = (Delegates.BeginQuery)WindowsGetAddress("glBeginQuery", typeof(Delegates.BeginQuery));
                EndQuery = (Delegates.EndQuery)WindowsGetAddress("glEndQuery", typeof(Delegates.EndQuery));
                GetQueryiv_ = (Delegates.GetQueryiv_)WindowsGetAddress("glGetQueryiv", typeof(Delegates.GetQueryiv_));
                GetQueryObjectiv_ = (Delegates.GetQueryObjectiv_)WindowsGetAddress("glGetQueryObjectiv", typeof(Delegates.GetQueryObjectiv_));
                GetQueryObjectuiv_ = (Delegates.GetQueryObjectuiv_)WindowsGetAddress("glGetQueryObjectuiv", typeof(Delegates.GetQueryObjectuiv_));
                BindBuffer = (Delegates.BindBuffer)WindowsGetAddress("glBindBuffer", typeof(Delegates.BindBuffer));
                DeleteBuffers_ = (Delegates.DeleteBuffers_)WindowsGetAddress("glDeleteBuffers", typeof(Delegates.DeleteBuffers_));
                GenBuffers_ = (Delegates.GenBuffers_)WindowsGetAddress("glGenBuffers", typeof(Delegates.GenBuffers_));
                IsBuffer = (Delegates.IsBuffer)WindowsGetAddress("glIsBuffer", typeof(Delegates.IsBuffer));
                BufferData_ = (Delegates.BufferData_)WindowsGetAddress("glBufferData", typeof(Delegates.BufferData_));
                BufferSubData_ = (Delegates.BufferSubData_)WindowsGetAddress("glBufferSubData", typeof(Delegates.BufferSubData_));
                GetBufferSubData_ = (Delegates.GetBufferSubData_)WindowsGetAddress("glGetBufferSubData", typeof(Delegates.GetBufferSubData_));
                MapBuffer = (Delegates.MapBuffer)WindowsGetAddress("glMapBuffer", typeof(Delegates.MapBuffer));
                UnmapBuffer = (Delegates.UnmapBuffer)WindowsGetAddress("glUnmapBuffer", typeof(Delegates.UnmapBuffer));
                GetBufferParameteriv_ = (Delegates.GetBufferParameteriv_)WindowsGetAddress("glGetBufferParameteriv", typeof(Delegates.GetBufferParameteriv_));
                GetBufferPointerv_ = (Delegates.GetBufferPointerv_)WindowsGetAddress("glGetBufferPointerv", typeof(Delegates.GetBufferPointerv_));
                BlendEquationSeparate = (Delegates.BlendEquationSeparate)WindowsGetAddress("glBlendEquationSeparate", typeof(Delegates.BlendEquationSeparate));
                DrawBuffers_ = (Delegates.DrawBuffers_)WindowsGetAddress("glDrawBuffers", typeof(Delegates.DrawBuffers_));
                StencilOpSeparate = (Delegates.StencilOpSeparate)WindowsGetAddress("glStencilOpSeparate", typeof(Delegates.StencilOpSeparate));
                StencilFuncSeparate = (Delegates.StencilFuncSeparate)WindowsGetAddress("glStencilFuncSeparate", typeof(Delegates.StencilFuncSeparate));
                StencilMaskSeparate = (Delegates.StencilMaskSeparate)WindowsGetAddress("glStencilMaskSeparate", typeof(Delegates.StencilMaskSeparate));
                AttachShader = (Delegates.AttachShader)WindowsGetAddress("glAttachShader", typeof(Delegates.AttachShader));
                BindAttribLocation = (Delegates.BindAttribLocation)WindowsGetAddress("glBindAttribLocation", typeof(Delegates.BindAttribLocation));
                CompileShader = (Delegates.CompileShader)WindowsGetAddress("glCompileShader", typeof(Delegates.CompileShader));
                CreateProgram = (Delegates.CreateProgram)WindowsGetAddress("glCreateProgram", typeof(Delegates.CreateProgram));
                CreateShader = (Delegates.CreateShader)WindowsGetAddress("glCreateShader", typeof(Delegates.CreateShader));
                DeleteProgram = (Delegates.DeleteProgram)WindowsGetAddress("glDeleteProgram", typeof(Delegates.DeleteProgram));
                DeleteShader = (Delegates.DeleteShader)WindowsGetAddress("glDeleteShader", typeof(Delegates.DeleteShader));
                DetachShader = (Delegates.DetachShader)WindowsGetAddress("glDetachShader", typeof(Delegates.DetachShader));
                DisableVertexAttribArray = (Delegates.DisableVertexAttribArray)WindowsGetAddress("glDisableVertexAttribArray", typeof(Delegates.DisableVertexAttribArray));
                EnableVertexAttribArray = (Delegates.EnableVertexAttribArray)WindowsGetAddress("glEnableVertexAttribArray", typeof(Delegates.EnableVertexAttribArray));
                GetActiveAttrib_ = (Delegates.GetActiveAttrib_)WindowsGetAddress("glGetActiveAttrib", typeof(Delegates.GetActiveAttrib_));
                GetActiveUniform_ = (Delegates.GetActiveUniform_)WindowsGetAddress("glGetActiveUniform", typeof(Delegates.GetActiveUniform_));
                GetAttachedShaders_ = (Delegates.GetAttachedShaders_)WindowsGetAddress("glGetAttachedShaders", typeof(Delegates.GetAttachedShaders_));
                GetAttribLocation = (Delegates.GetAttribLocation)WindowsGetAddress("glGetAttribLocation", typeof(Delegates.GetAttribLocation));
                GetProgramiv_ = (Delegates.GetProgramiv_)WindowsGetAddress("glGetProgramiv", typeof(Delegates.GetProgramiv_));
                GetProgramInfoLog_ = (Delegates.GetProgramInfoLog_)WindowsGetAddress("glGetProgramInfoLog", typeof(Delegates.GetProgramInfoLog_));
                GetShaderiv_ = (Delegates.GetShaderiv_)WindowsGetAddress("glGetShaderiv", typeof(Delegates.GetShaderiv_));
                GetShaderInfoLog_ = (Delegates.GetShaderInfoLog_)WindowsGetAddress("glGetShaderInfoLog", typeof(Delegates.GetShaderInfoLog_));
                GetShaderSource_ = (Delegates.GetShaderSource_)WindowsGetAddress("glGetShaderSource", typeof(Delegates.GetShaderSource_));
                GetUniformLocation = (Delegates.GetUniformLocation)WindowsGetAddress("glGetUniformLocation", typeof(Delegates.GetUniformLocation));
                GetUniformfv_ = (Delegates.GetUniformfv_)WindowsGetAddress("glGetUniformfv", typeof(Delegates.GetUniformfv_));
                GetUniformiv_ = (Delegates.GetUniformiv_)WindowsGetAddress("glGetUniformiv", typeof(Delegates.GetUniformiv_));
                GetVertexAttribdv_ = (Delegates.GetVertexAttribdv_)WindowsGetAddress("glGetVertexAttribdv", typeof(Delegates.GetVertexAttribdv_));
                GetVertexAttribfv_ = (Delegates.GetVertexAttribfv_)WindowsGetAddress("glGetVertexAttribfv", typeof(Delegates.GetVertexAttribfv_));
                GetVertexAttribiv_ = (Delegates.GetVertexAttribiv_)WindowsGetAddress("glGetVertexAttribiv", typeof(Delegates.GetVertexAttribiv_));
                GetVertexAttribPointerv_ = (Delegates.GetVertexAttribPointerv_)WindowsGetAddress("glGetVertexAttribPointerv", typeof(Delegates.GetVertexAttribPointerv_));
                IsProgram = (Delegates.IsProgram)WindowsGetAddress("glIsProgram", typeof(Delegates.IsProgram));
                IsShader = (Delegates.IsShader)WindowsGetAddress("glIsShader", typeof(Delegates.IsShader));
                LinkProgram = (Delegates.LinkProgram)WindowsGetAddress("glLinkProgram", typeof(Delegates.LinkProgram));
                ShaderSource_ = (Delegates.ShaderSource_)WindowsGetAddress("glShaderSource", typeof(Delegates.ShaderSource_));
                UseProgram = (Delegates.UseProgram)WindowsGetAddress("glUseProgram", typeof(Delegates.UseProgram));
                Uniform1f = (Delegates.Uniform1f)WindowsGetAddress("glUniform1f", typeof(Delegates.Uniform1f));
                Uniform2f = (Delegates.Uniform2f)WindowsGetAddress("glUniform2f", typeof(Delegates.Uniform2f));
                Uniform3f = (Delegates.Uniform3f)WindowsGetAddress("glUniform3f", typeof(Delegates.Uniform3f));
                Uniform4f = (Delegates.Uniform4f)WindowsGetAddress("glUniform4f", typeof(Delegates.Uniform4f));
                Uniform1i = (Delegates.Uniform1i)WindowsGetAddress("glUniform1i", typeof(Delegates.Uniform1i));
                Uniform2i = (Delegates.Uniform2i)WindowsGetAddress("glUniform2i", typeof(Delegates.Uniform2i));
                Uniform3i = (Delegates.Uniform3i)WindowsGetAddress("glUniform3i", typeof(Delegates.Uniform3i));
                Uniform4i = (Delegates.Uniform4i)WindowsGetAddress("glUniform4i", typeof(Delegates.Uniform4i));
                Uniform1fv_ = (Delegates.Uniform1fv_)WindowsGetAddress("glUniform1fv", typeof(Delegates.Uniform1fv_));
                Uniform2fv_ = (Delegates.Uniform2fv_)WindowsGetAddress("glUniform2fv", typeof(Delegates.Uniform2fv_));
                Uniform3fv_ = (Delegates.Uniform3fv_)WindowsGetAddress("glUniform3fv", typeof(Delegates.Uniform3fv_));
                Uniform4fv_ = (Delegates.Uniform4fv_)WindowsGetAddress("glUniform4fv", typeof(Delegates.Uniform4fv_));
                Uniform1iv_ = (Delegates.Uniform1iv_)WindowsGetAddress("glUniform1iv", typeof(Delegates.Uniform1iv_));
                Uniform2iv_ = (Delegates.Uniform2iv_)WindowsGetAddress("glUniform2iv", typeof(Delegates.Uniform2iv_));
                Uniform3iv_ = (Delegates.Uniform3iv_)WindowsGetAddress("glUniform3iv", typeof(Delegates.Uniform3iv_));
                Uniform4iv_ = (Delegates.Uniform4iv_)WindowsGetAddress("glUniform4iv", typeof(Delegates.Uniform4iv_));
                UniformMatrix2fv_ = (Delegates.UniformMatrix2fv_)WindowsGetAddress("glUniformMatrix2fv", typeof(Delegates.UniformMatrix2fv_));
                UniformMatrix3fv_ = (Delegates.UniformMatrix3fv_)WindowsGetAddress("glUniformMatrix3fv", typeof(Delegates.UniformMatrix3fv_));
                UniformMatrix4fv_ = (Delegates.UniformMatrix4fv_)WindowsGetAddress("glUniformMatrix4fv", typeof(Delegates.UniformMatrix4fv_));
                ValidateProgram = (Delegates.ValidateProgram)WindowsGetAddress("glValidateProgram", typeof(Delegates.ValidateProgram));
                VertexAttrib1d = (Delegates.VertexAttrib1d)WindowsGetAddress("glVertexAttrib1d", typeof(Delegates.VertexAttrib1d));
                VertexAttrib1dv_ = (Delegates.VertexAttrib1dv_)WindowsGetAddress("glVertexAttrib1dv", typeof(Delegates.VertexAttrib1dv_));
                VertexAttrib1f = (Delegates.VertexAttrib1f)WindowsGetAddress("glVertexAttrib1f", typeof(Delegates.VertexAttrib1f));
                VertexAttrib1fv_ = (Delegates.VertexAttrib1fv_)WindowsGetAddress("glVertexAttrib1fv", typeof(Delegates.VertexAttrib1fv_));
                VertexAttrib1s = (Delegates.VertexAttrib1s)WindowsGetAddress("glVertexAttrib1s", typeof(Delegates.VertexAttrib1s));
                VertexAttrib1sv_ = (Delegates.VertexAttrib1sv_)WindowsGetAddress("glVertexAttrib1sv", typeof(Delegates.VertexAttrib1sv_));
                VertexAttrib2d = (Delegates.VertexAttrib2d)WindowsGetAddress("glVertexAttrib2d", typeof(Delegates.VertexAttrib2d));
                VertexAttrib2dv_ = (Delegates.VertexAttrib2dv_)WindowsGetAddress("glVertexAttrib2dv", typeof(Delegates.VertexAttrib2dv_));
                VertexAttrib2f = (Delegates.VertexAttrib2f)WindowsGetAddress("glVertexAttrib2f", typeof(Delegates.VertexAttrib2f));
                VertexAttrib2fv_ = (Delegates.VertexAttrib2fv_)WindowsGetAddress("glVertexAttrib2fv", typeof(Delegates.VertexAttrib2fv_));
                VertexAttrib2s = (Delegates.VertexAttrib2s)WindowsGetAddress("glVertexAttrib2s", typeof(Delegates.VertexAttrib2s));
                VertexAttrib2sv_ = (Delegates.VertexAttrib2sv_)WindowsGetAddress("glVertexAttrib2sv", typeof(Delegates.VertexAttrib2sv_));
                VertexAttrib3d = (Delegates.VertexAttrib3d)WindowsGetAddress("glVertexAttrib3d", typeof(Delegates.VertexAttrib3d));
                VertexAttrib3dv_ = (Delegates.VertexAttrib3dv_)WindowsGetAddress("glVertexAttrib3dv", typeof(Delegates.VertexAttrib3dv_));
                VertexAttrib3f = (Delegates.VertexAttrib3f)WindowsGetAddress("glVertexAttrib3f", typeof(Delegates.VertexAttrib3f));
                VertexAttrib3fv_ = (Delegates.VertexAttrib3fv_)WindowsGetAddress("glVertexAttrib3fv", typeof(Delegates.VertexAttrib3fv_));
                VertexAttrib3s = (Delegates.VertexAttrib3s)WindowsGetAddress("glVertexAttrib3s", typeof(Delegates.VertexAttrib3s));
                VertexAttrib3sv_ = (Delegates.VertexAttrib3sv_)WindowsGetAddress("glVertexAttrib3sv", typeof(Delegates.VertexAttrib3sv_));
                VertexAttrib4Nbv_ = (Delegates.VertexAttrib4Nbv_)WindowsGetAddress("glVertexAttrib4Nbv", typeof(Delegates.VertexAttrib4Nbv_));
                VertexAttrib4Niv_ = (Delegates.VertexAttrib4Niv_)WindowsGetAddress("glVertexAttrib4Niv", typeof(Delegates.VertexAttrib4Niv_));
                VertexAttrib4Nsv_ = (Delegates.VertexAttrib4Nsv_)WindowsGetAddress("glVertexAttrib4Nsv", typeof(Delegates.VertexAttrib4Nsv_));
                VertexAttrib4Nub = (Delegates.VertexAttrib4Nub)WindowsGetAddress("glVertexAttrib4Nub", typeof(Delegates.VertexAttrib4Nub));
                VertexAttrib4Nubv_ = (Delegates.VertexAttrib4Nubv_)WindowsGetAddress("glVertexAttrib4Nubv", typeof(Delegates.VertexAttrib4Nubv_));
                VertexAttrib4Nuiv_ = (Delegates.VertexAttrib4Nuiv_)WindowsGetAddress("glVertexAttrib4Nuiv", typeof(Delegates.VertexAttrib4Nuiv_));
                VertexAttrib4Nusv_ = (Delegates.VertexAttrib4Nusv_)WindowsGetAddress("glVertexAttrib4Nusv", typeof(Delegates.VertexAttrib4Nusv_));
                VertexAttrib4bv_ = (Delegates.VertexAttrib4bv_)WindowsGetAddress("glVertexAttrib4bv", typeof(Delegates.VertexAttrib4bv_));
                VertexAttrib4d = (Delegates.VertexAttrib4d)WindowsGetAddress("glVertexAttrib4d", typeof(Delegates.VertexAttrib4d));
                VertexAttrib4dv_ = (Delegates.VertexAttrib4dv_)WindowsGetAddress("glVertexAttrib4dv", typeof(Delegates.VertexAttrib4dv_));
                VertexAttrib4f = (Delegates.VertexAttrib4f)WindowsGetAddress("glVertexAttrib4f", typeof(Delegates.VertexAttrib4f));
                VertexAttrib4fv_ = (Delegates.VertexAttrib4fv_)WindowsGetAddress("glVertexAttrib4fv", typeof(Delegates.VertexAttrib4fv_));
                VertexAttrib4iv_ = (Delegates.VertexAttrib4iv_)WindowsGetAddress("glVertexAttrib4iv", typeof(Delegates.VertexAttrib4iv_));
                VertexAttrib4s = (Delegates.VertexAttrib4s)WindowsGetAddress("glVertexAttrib4s", typeof(Delegates.VertexAttrib4s));
                VertexAttrib4sv_ = (Delegates.VertexAttrib4sv_)WindowsGetAddress("glVertexAttrib4sv", typeof(Delegates.VertexAttrib4sv_));
                VertexAttrib4ubv_ = (Delegates.VertexAttrib4ubv_)WindowsGetAddress("glVertexAttrib4ubv", typeof(Delegates.VertexAttrib4ubv_));
                VertexAttrib4uiv_ = (Delegates.VertexAttrib4uiv_)WindowsGetAddress("glVertexAttrib4uiv", typeof(Delegates.VertexAttrib4uiv_));
                VertexAttrib4usv_ = (Delegates.VertexAttrib4usv_)WindowsGetAddress("glVertexAttrib4usv", typeof(Delegates.VertexAttrib4usv_));
                VertexAttribPointer_ = (Delegates.VertexAttribPointer_)WindowsGetAddress("glVertexAttribPointer", typeof(Delegates.VertexAttribPointer_));
                UniformMatrix2x3fv_ = (Delegates.UniformMatrix2x3fv_)WindowsGetAddress("glUniformMatrix2x3fv", typeof(Delegates.UniformMatrix2x3fv_));
                UniformMatrix3x2fv_ = (Delegates.UniformMatrix3x2fv_)WindowsGetAddress("glUniformMatrix3x2fv", typeof(Delegates.UniformMatrix3x2fv_));
                UniformMatrix2x4fv_ = (Delegates.UniformMatrix2x4fv_)WindowsGetAddress("glUniformMatrix2x4fv", typeof(Delegates.UniformMatrix2x4fv_));
                UniformMatrix4x2fv_ = (Delegates.UniformMatrix4x2fv_)WindowsGetAddress("glUniformMatrix4x2fv", typeof(Delegates.UniformMatrix4x2fv_));
                UniformMatrix3x4fv_ = (Delegates.UniformMatrix3x4fv_)WindowsGetAddress("glUniformMatrix3x4fv", typeof(Delegates.UniformMatrix3x4fv_));
                UniformMatrix4x3fv_ = (Delegates.UniformMatrix4x3fv_)WindowsGetAddress("glUniformMatrix4x3fv", typeof(Delegates.UniformMatrix4x3fv_));
                #endregion Older Windows Core
            }
            else if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
            {
                #region Windows Vista Core
                GenQueries_ = (Delegates.GenQueries_)WindowsGetAddress("glGenQueries", typeof(Delegates.GenQueries_));
                DeleteQueries_ = (Delegates.DeleteQueries_)WindowsGetAddress("glDeleteQueries", typeof(Delegates.DeleteQueries_));
                IsQuery = (Delegates.IsQuery)WindowsGetAddress("glIsQuery", typeof(Delegates.IsQuery));
                BeginQuery = (Delegates.BeginQuery)WindowsGetAddress("glBeginQuery", typeof(Delegates.BeginQuery));
                EndQuery = (Delegates.EndQuery)WindowsGetAddress("glEndQuery", typeof(Delegates.EndQuery));
                GetQueryiv_ = (Delegates.GetQueryiv_)WindowsGetAddress("glGetQueryiv", typeof(Delegates.GetQueryiv_));
                GetQueryObjectiv_ = (Delegates.GetQueryObjectiv_)WindowsGetAddress("glGetQueryObjectiv", typeof(Delegates.GetQueryObjectiv_));
                GetQueryObjectuiv_ = (Delegates.GetQueryObjectuiv_)WindowsGetAddress("glGetQueryObjectuiv", typeof(Delegates.GetQueryObjectuiv_));
                BindBuffer = (Delegates.BindBuffer)WindowsGetAddress("glBindBuffer", typeof(Delegates.BindBuffer));
                DeleteBuffers_ = (Delegates.DeleteBuffers_)WindowsGetAddress("glDeleteBuffers", typeof(Delegates.DeleteBuffers_));
                GenBuffers_ = (Delegates.GenBuffers_)WindowsGetAddress("glGenBuffers", typeof(Delegates.GenBuffers_));
                IsBuffer = (Delegates.IsBuffer)WindowsGetAddress("glIsBuffer", typeof(Delegates.IsBuffer));
                BufferData_ = (Delegates.BufferData_)WindowsGetAddress("glBufferData", typeof(Delegates.BufferData_));
                BufferSubData_ = (Delegates.BufferSubData_)WindowsGetAddress("glBufferSubData", typeof(Delegates.BufferSubData_));
                GetBufferSubData_ = (Delegates.GetBufferSubData_)WindowsGetAddress("glGetBufferSubData", typeof(Delegates.GetBufferSubData_));
                MapBuffer = (Delegates.MapBuffer)WindowsGetAddress("glMapBuffer", typeof(Delegates.MapBuffer));
                UnmapBuffer = (Delegates.UnmapBuffer)WindowsGetAddress("glUnmapBuffer", typeof(Delegates.UnmapBuffer));
                GetBufferParameteriv_ = (Delegates.GetBufferParameteriv_)WindowsGetAddress("glGetBufferParameteriv", typeof(Delegates.GetBufferParameteriv_));
                GetBufferPointerv_ = (Delegates.GetBufferPointerv_)WindowsGetAddress("glGetBufferPointerv", typeof(Delegates.GetBufferPointerv_));
                BlendEquationSeparate = (Delegates.BlendEquationSeparate)WindowsGetAddress("glBlendEquationSeparate", typeof(Delegates.BlendEquationSeparate));
                DrawBuffers_ = (Delegates.DrawBuffers_)WindowsGetAddress("glDrawBuffers", typeof(Delegates.DrawBuffers_));
                StencilOpSeparate = (Delegates.StencilOpSeparate)WindowsGetAddress("glStencilOpSeparate", typeof(Delegates.StencilOpSeparate));
                StencilFuncSeparate = (Delegates.StencilFuncSeparate)WindowsGetAddress("glStencilFuncSeparate", typeof(Delegates.StencilFuncSeparate));
                StencilMaskSeparate = (Delegates.StencilMaskSeparate)WindowsGetAddress("glStencilMaskSeparate", typeof(Delegates.StencilMaskSeparate));
                AttachShader = (Delegates.AttachShader)WindowsGetAddress("glAttachShader", typeof(Delegates.AttachShader));
                BindAttribLocation = (Delegates.BindAttribLocation)WindowsGetAddress("glBindAttribLocation", typeof(Delegates.BindAttribLocation));
                CompileShader = (Delegates.CompileShader)WindowsGetAddress("glCompileShader", typeof(Delegates.CompileShader));
                CreateProgram = (Delegates.CreateProgram)WindowsGetAddress("glCreateProgram", typeof(Delegates.CreateProgram));
                CreateShader = (Delegates.CreateShader)WindowsGetAddress("glCreateShader", typeof(Delegates.CreateShader));
                DeleteProgram = (Delegates.DeleteProgram)WindowsGetAddress("glDeleteProgram", typeof(Delegates.DeleteProgram));
                DeleteShader = (Delegates.DeleteShader)WindowsGetAddress("glDeleteShader", typeof(Delegates.DeleteShader));
                DetachShader = (Delegates.DetachShader)WindowsGetAddress("glDetachShader", typeof(Delegates.DetachShader));
                DisableVertexAttribArray = (Delegates.DisableVertexAttribArray)WindowsGetAddress("glDisableVertexAttribArray", typeof(Delegates.DisableVertexAttribArray));
                EnableVertexAttribArray = (Delegates.EnableVertexAttribArray)WindowsGetAddress("glEnableVertexAttribArray", typeof(Delegates.EnableVertexAttribArray));
                GetActiveAttrib_ = (Delegates.GetActiveAttrib_)WindowsGetAddress("glGetActiveAttrib", typeof(Delegates.GetActiveAttrib_));
                GetActiveUniform_ = (Delegates.GetActiveUniform_)WindowsGetAddress("glGetActiveUniform", typeof(Delegates.GetActiveUniform_));
                GetAttachedShaders_ = (Delegates.GetAttachedShaders_)WindowsGetAddress("glGetAttachedShaders", typeof(Delegates.GetAttachedShaders_));
                GetAttribLocation = (Delegates.GetAttribLocation)WindowsGetAddress("glGetAttribLocation", typeof(Delegates.GetAttribLocation));
                GetProgramiv_ = (Delegates.GetProgramiv_)WindowsGetAddress("glGetProgramiv", typeof(Delegates.GetProgramiv_));
                GetProgramInfoLog_ = (Delegates.GetProgramInfoLog_)WindowsGetAddress("glGetProgramInfoLog", typeof(Delegates.GetProgramInfoLog_));
                GetShaderiv_ = (Delegates.GetShaderiv_)WindowsGetAddress("glGetShaderiv", typeof(Delegates.GetShaderiv_));
                GetShaderInfoLog_ = (Delegates.GetShaderInfoLog_)WindowsGetAddress("glGetShaderInfoLog", typeof(Delegates.GetShaderInfoLog_));
                GetShaderSource_ = (Delegates.GetShaderSource_)WindowsGetAddress("glGetShaderSource", typeof(Delegates.GetShaderSource_));
                GetUniformLocation = (Delegates.GetUniformLocation)WindowsGetAddress("glGetUniformLocation", typeof(Delegates.GetUniformLocation));
                GetUniformfv_ = (Delegates.GetUniformfv_)WindowsGetAddress("glGetUniformfv", typeof(Delegates.GetUniformfv_));
                GetUniformiv_ = (Delegates.GetUniformiv_)WindowsGetAddress("glGetUniformiv", typeof(Delegates.GetUniformiv_));
                GetVertexAttribdv_ = (Delegates.GetVertexAttribdv_)WindowsGetAddress("glGetVertexAttribdv", typeof(Delegates.GetVertexAttribdv_));
                GetVertexAttribfv_ = (Delegates.GetVertexAttribfv_)WindowsGetAddress("glGetVertexAttribfv", typeof(Delegates.GetVertexAttribfv_));
                GetVertexAttribiv_ = (Delegates.GetVertexAttribiv_)WindowsGetAddress("glGetVertexAttribiv", typeof(Delegates.GetVertexAttribiv_));
                GetVertexAttribPointerv_ = (Delegates.GetVertexAttribPointerv_)WindowsGetAddress("glGetVertexAttribPointerv", typeof(Delegates.GetVertexAttribPointerv_));
                IsProgram = (Delegates.IsProgram)WindowsGetAddress("glIsProgram", typeof(Delegates.IsProgram));
                IsShader = (Delegates.IsShader)WindowsGetAddress("glIsShader", typeof(Delegates.IsShader));
                LinkProgram = (Delegates.LinkProgram)WindowsGetAddress("glLinkProgram", typeof(Delegates.LinkProgram));
                ShaderSource_ = (Delegates.ShaderSource_)WindowsGetAddress("glShaderSource", typeof(Delegates.ShaderSource_));
                UseProgram = (Delegates.UseProgram)WindowsGetAddress("glUseProgram", typeof(Delegates.UseProgram));
                Uniform1f = (Delegates.Uniform1f)WindowsGetAddress("glUniform1f", typeof(Delegates.Uniform1f));
                Uniform2f = (Delegates.Uniform2f)WindowsGetAddress("glUniform2f", typeof(Delegates.Uniform2f));
                Uniform3f = (Delegates.Uniform3f)WindowsGetAddress("glUniform3f", typeof(Delegates.Uniform3f));
                Uniform4f = (Delegates.Uniform4f)WindowsGetAddress("glUniform4f", typeof(Delegates.Uniform4f));
                Uniform1i = (Delegates.Uniform1i)WindowsGetAddress("glUniform1i", typeof(Delegates.Uniform1i));
                Uniform2i = (Delegates.Uniform2i)WindowsGetAddress("glUniform2i", typeof(Delegates.Uniform2i));
                Uniform3i = (Delegates.Uniform3i)WindowsGetAddress("glUniform3i", typeof(Delegates.Uniform3i));
                Uniform4i = (Delegates.Uniform4i)WindowsGetAddress("glUniform4i", typeof(Delegates.Uniform4i));
                Uniform1fv_ = (Delegates.Uniform1fv_)WindowsGetAddress("glUniform1fv", typeof(Delegates.Uniform1fv_));
                Uniform2fv_ = (Delegates.Uniform2fv_)WindowsGetAddress("glUniform2fv", typeof(Delegates.Uniform2fv_));
                Uniform3fv_ = (Delegates.Uniform3fv_)WindowsGetAddress("glUniform3fv", typeof(Delegates.Uniform3fv_));
                Uniform4fv_ = (Delegates.Uniform4fv_)WindowsGetAddress("glUniform4fv", typeof(Delegates.Uniform4fv_));
                Uniform1iv_ = (Delegates.Uniform1iv_)WindowsGetAddress("glUniform1iv", typeof(Delegates.Uniform1iv_));
                Uniform2iv_ = (Delegates.Uniform2iv_)WindowsGetAddress("glUniform2iv", typeof(Delegates.Uniform2iv_));
                Uniform3iv_ = (Delegates.Uniform3iv_)WindowsGetAddress("glUniform3iv", typeof(Delegates.Uniform3iv_));
                Uniform4iv_ = (Delegates.Uniform4iv_)WindowsGetAddress("glUniform4iv", typeof(Delegates.Uniform4iv_));
                UniformMatrix2fv_ = (Delegates.UniformMatrix2fv_)WindowsGetAddress("glUniformMatrix2fv", typeof(Delegates.UniformMatrix2fv_));
                UniformMatrix3fv_ = (Delegates.UniformMatrix3fv_)WindowsGetAddress("glUniformMatrix3fv", typeof(Delegates.UniformMatrix3fv_));
                UniformMatrix4fv_ = (Delegates.UniformMatrix4fv_)WindowsGetAddress("glUniformMatrix4fv", typeof(Delegates.UniformMatrix4fv_));
                ValidateProgram = (Delegates.ValidateProgram)WindowsGetAddress("glValidateProgram", typeof(Delegates.ValidateProgram));
                VertexAttrib1d = (Delegates.VertexAttrib1d)WindowsGetAddress("glVertexAttrib1d", typeof(Delegates.VertexAttrib1d));
                VertexAttrib1dv_ = (Delegates.VertexAttrib1dv_)WindowsGetAddress("glVertexAttrib1dv", typeof(Delegates.VertexAttrib1dv_));
                VertexAttrib1f = (Delegates.VertexAttrib1f)WindowsGetAddress("glVertexAttrib1f", typeof(Delegates.VertexAttrib1f));
                VertexAttrib1fv_ = (Delegates.VertexAttrib1fv_)WindowsGetAddress("glVertexAttrib1fv", typeof(Delegates.VertexAttrib1fv_));
                VertexAttrib1s = (Delegates.VertexAttrib1s)WindowsGetAddress("glVertexAttrib1s", typeof(Delegates.VertexAttrib1s));
                VertexAttrib1sv_ = (Delegates.VertexAttrib1sv_)WindowsGetAddress("glVertexAttrib1sv", typeof(Delegates.VertexAttrib1sv_));
                VertexAttrib2d = (Delegates.VertexAttrib2d)WindowsGetAddress("glVertexAttrib2d", typeof(Delegates.VertexAttrib2d));
                VertexAttrib2dv_ = (Delegates.VertexAttrib2dv_)WindowsGetAddress("glVertexAttrib2dv", typeof(Delegates.VertexAttrib2dv_));
                VertexAttrib2f = (Delegates.VertexAttrib2f)WindowsGetAddress("glVertexAttrib2f", typeof(Delegates.VertexAttrib2f));
                VertexAttrib2fv_ = (Delegates.VertexAttrib2fv_)WindowsGetAddress("glVertexAttrib2fv", typeof(Delegates.VertexAttrib2fv_));
                VertexAttrib2s = (Delegates.VertexAttrib2s)WindowsGetAddress("glVertexAttrib2s", typeof(Delegates.VertexAttrib2s));
                VertexAttrib2sv_ = (Delegates.VertexAttrib2sv_)WindowsGetAddress("glVertexAttrib2sv", typeof(Delegates.VertexAttrib2sv_));
                VertexAttrib3d = (Delegates.VertexAttrib3d)WindowsGetAddress("glVertexAttrib3d", typeof(Delegates.VertexAttrib3d));
                VertexAttrib3dv_ = (Delegates.VertexAttrib3dv_)WindowsGetAddress("glVertexAttrib3dv", typeof(Delegates.VertexAttrib3dv_));
                VertexAttrib3f = (Delegates.VertexAttrib3f)WindowsGetAddress("glVertexAttrib3f", typeof(Delegates.VertexAttrib3f));
                VertexAttrib3fv_ = (Delegates.VertexAttrib3fv_)WindowsGetAddress("glVertexAttrib3fv", typeof(Delegates.VertexAttrib3fv_));
                VertexAttrib3s = (Delegates.VertexAttrib3s)WindowsGetAddress("glVertexAttrib3s", typeof(Delegates.VertexAttrib3s));
                VertexAttrib3sv_ = (Delegates.VertexAttrib3sv_)WindowsGetAddress("glVertexAttrib3sv", typeof(Delegates.VertexAttrib3sv_));
                VertexAttrib4Nbv_ = (Delegates.VertexAttrib4Nbv_)WindowsGetAddress("glVertexAttrib4Nbv", typeof(Delegates.VertexAttrib4Nbv_));
                VertexAttrib4Niv_ = (Delegates.VertexAttrib4Niv_)WindowsGetAddress("glVertexAttrib4Niv", typeof(Delegates.VertexAttrib4Niv_));
                VertexAttrib4Nsv_ = (Delegates.VertexAttrib4Nsv_)WindowsGetAddress("glVertexAttrib4Nsv", typeof(Delegates.VertexAttrib4Nsv_));
                VertexAttrib4Nub = (Delegates.VertexAttrib4Nub)WindowsGetAddress("glVertexAttrib4Nub", typeof(Delegates.VertexAttrib4Nub));
                VertexAttrib4Nubv_ = (Delegates.VertexAttrib4Nubv_)WindowsGetAddress("glVertexAttrib4Nubv", typeof(Delegates.VertexAttrib4Nubv_));
                VertexAttrib4Nuiv_ = (Delegates.VertexAttrib4Nuiv_)WindowsGetAddress("glVertexAttrib4Nuiv", typeof(Delegates.VertexAttrib4Nuiv_));
                VertexAttrib4Nusv_ = (Delegates.VertexAttrib4Nusv_)WindowsGetAddress("glVertexAttrib4Nusv", typeof(Delegates.VertexAttrib4Nusv_));
                VertexAttrib4bv_ = (Delegates.VertexAttrib4bv_)WindowsGetAddress("glVertexAttrib4bv", typeof(Delegates.VertexAttrib4bv_));
                VertexAttrib4d = (Delegates.VertexAttrib4d)WindowsGetAddress("glVertexAttrib4d", typeof(Delegates.VertexAttrib4d));
                VertexAttrib4dv_ = (Delegates.VertexAttrib4dv_)WindowsGetAddress("glVertexAttrib4dv", typeof(Delegates.VertexAttrib4dv_));
                VertexAttrib4f = (Delegates.VertexAttrib4f)WindowsGetAddress("glVertexAttrib4f", typeof(Delegates.VertexAttrib4f));
                VertexAttrib4fv_ = (Delegates.VertexAttrib4fv_)WindowsGetAddress("glVertexAttrib4fv", typeof(Delegates.VertexAttrib4fv_));
                VertexAttrib4iv_ = (Delegates.VertexAttrib4iv_)WindowsGetAddress("glVertexAttrib4iv", typeof(Delegates.VertexAttrib4iv_));
                VertexAttrib4s = (Delegates.VertexAttrib4s)WindowsGetAddress("glVertexAttrib4s", typeof(Delegates.VertexAttrib4s));
                VertexAttrib4sv_ = (Delegates.VertexAttrib4sv_)WindowsGetAddress("glVertexAttrib4sv", typeof(Delegates.VertexAttrib4sv_));
                VertexAttrib4ubv_ = (Delegates.VertexAttrib4ubv_)WindowsGetAddress("glVertexAttrib4ubv", typeof(Delegates.VertexAttrib4ubv_));
                VertexAttrib4uiv_ = (Delegates.VertexAttrib4uiv_)WindowsGetAddress("glVertexAttrib4uiv", typeof(Delegates.VertexAttrib4uiv_));
                VertexAttrib4usv_ = (Delegates.VertexAttrib4usv_)WindowsGetAddress("glVertexAttrib4usv", typeof(Delegates.VertexAttrib4usv_));
                VertexAttribPointer_ = (Delegates.VertexAttribPointer_)WindowsGetAddress("glVertexAttribPointer", typeof(Delegates.VertexAttribPointer_));
                UniformMatrix2x3fv_ = (Delegates.UniformMatrix2x3fv_)WindowsGetAddress("glUniformMatrix2x3fv", typeof(Delegates.UniformMatrix2x3fv_));
                UniformMatrix3x2fv_ = (Delegates.UniformMatrix3x2fv_)WindowsGetAddress("glUniformMatrix3x2fv", typeof(Delegates.UniformMatrix3x2fv_));
                UniformMatrix2x4fv_ = (Delegates.UniformMatrix2x4fv_)WindowsGetAddress("glUniformMatrix2x4fv", typeof(Delegates.UniformMatrix2x4fv_));
                UniformMatrix4x2fv_ = (Delegates.UniformMatrix4x2fv_)WindowsGetAddress("glUniformMatrix4x2fv", typeof(Delegates.UniformMatrix4x2fv_));
                UniformMatrix3x4fv_ = (Delegates.UniformMatrix3x4fv_)WindowsGetAddress("glUniformMatrix3x4fv", typeof(Delegates.UniformMatrix3x4fv_));
                UniformMatrix4x3fv_ = (Delegates.UniformMatrix4x3fv_)WindowsGetAddress("glUniformMatrix4x3fv", typeof(Delegates.UniformMatrix4x3fv_));
                #endregion Windows Vista Core
            }
            else if (Environment.OSVersion.Platform == PlatformID.Unix)
            {
                #region X11 Core
                #endregion X11 Core
            }
        }
        #endregion static Constructor
    }
}

