#region License
//THIS FILE IS AUTOMATICALLY GENERATED
//DO NOT EDIT BY HAND!!
//See license.txt for license info
#endregion

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenTK.OpenGL
{
    #region Types
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;
    #endregion

    static public partial class GL
    {
        static public class Extensions
        {
        #region Function signatures

        public static class Delegates
        {
            public delegate void ActiveTextureARB(GLenum texture);
            public delegate void ClientActiveTextureARB(GLenum texture);
            public delegate void MultiTexCoord1dARB(GLenum target, GLdouble s);
            public delegate void MultiTexCoord1dvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1fARB(GLenum target, GLfloat s);
            public delegate void MultiTexCoord1fvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1iARB(GLenum target, GLint s);
            public delegate void MultiTexCoord1ivARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord1sARB(GLenum target, GLshort s);
            public delegate void MultiTexCoord1svARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
            public delegate void MultiTexCoord2dvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
            public delegate void MultiTexCoord2fvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2iARB(GLenum target, GLint s, GLint t);
            public delegate void MultiTexCoord2ivARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
            public delegate void MultiTexCoord2svARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
            public delegate void MultiTexCoord3dvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
            public delegate void MultiTexCoord3fvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
            public delegate void MultiTexCoord3ivARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
            public delegate void MultiTexCoord3svARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public delegate void MultiTexCoord4dvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public delegate void MultiTexCoord4fvARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
            public delegate void MultiTexCoord4ivARB_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
            public delegate void MultiTexCoord4svARB_(GLenum target, IntPtr v);
            public delegate void LoadTransposeMatrixfARB_(IntPtr m);
            public delegate void LoadTransposeMatrixdARB_(IntPtr m);
            public delegate void MultTransposeMatrixfARB_(IntPtr m);
            public delegate void MultTransposeMatrixdARB_(IntPtr m);
            public delegate void SampleCoverageARB(GLclampf value, Enums.Boolean invert);
            public delegate void CompressedTexImage3DARB_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexImage2DARB_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexImage1DARB_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage3DARB_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage2DARB_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void CompressedTexSubImage1DARB_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data);
            public delegate void GetCompressedTexImageARB_(Enums.TextureTarget target, GLint level, IntPtr img);
            public delegate void PointParameterfARB(GLenum pname, GLfloat param);
            public delegate void PointParameterfvARB_(GLenum pname, IntPtr parameters);
            public delegate void WeightbvARB_(GLint size, IntPtr weights);
            public delegate void WeightsvARB_(GLint size, IntPtr weights);
            public delegate void WeightivARB_(GLint size, IntPtr weights);
            public delegate void WeightfvARB_(GLint size, IntPtr weights);
            public delegate void WeightdvARB_(GLint size, IntPtr weights);
            public delegate void WeightubvARB_(GLint size, IntPtr weights);
            public delegate void WeightusvARB_(GLint size, IntPtr weights);
            public delegate void WeightuivARB_(GLint size, IntPtr weights);
            public delegate void WeightPointerARB_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void VertexBlendARB(GLint count);
            public delegate void CurrentPaletteMatrixARB(GLint index);
            public delegate void MatrixIndexubvARB_(GLint size, IntPtr indices);
            public delegate void MatrixIndexusvARB_(GLint size, IntPtr indices);
            public delegate void MatrixIndexuivARB_(GLint size, IntPtr indices);
            public delegate void MatrixIndexPointerARB_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void WindowPos2dARB(GLdouble x, GLdouble y);
            public delegate void WindowPos2dvARB_(IntPtr v);
            public delegate void WindowPos2fARB(GLfloat x, GLfloat y);
            public delegate void WindowPos2fvARB_(IntPtr v);
            public delegate void WindowPos2iARB(GLint x, GLint y);
            public delegate void WindowPos2ivARB_(IntPtr v);
            public delegate void WindowPos2sARB(GLshort x, GLshort y);
            public delegate void WindowPos2svARB_(IntPtr v);
            public delegate void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
            public delegate void WindowPos3dvARB_(IntPtr v);
            public delegate void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
            public delegate void WindowPos3fvARB_(IntPtr v);
            public delegate void WindowPos3iARB(GLint x, GLint y, GLint z);
            public delegate void WindowPos3ivARB_(IntPtr v);
            public delegate void WindowPos3sARB(GLshort x, GLshort y, GLshort z);
            public delegate void WindowPos3svARB_(IntPtr v);
            public delegate void VertexAttrib1dARB(GLuint index, GLdouble x);
            public delegate void VertexAttrib1dvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1fARB(GLuint index, GLfloat x);
            public delegate void VertexAttrib1fvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1sARB(GLuint index, GLshort x);
            public delegate void VertexAttrib1svARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
            public delegate void VertexAttrib2dvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
            public delegate void VertexAttrib2fvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
            public delegate void VertexAttrib2svARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public delegate void VertexAttrib3dvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public delegate void VertexAttrib3fvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
            public delegate void VertexAttrib3svARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NbvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NivARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NsvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public delegate void VertexAttrib4NubvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NuivARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4NusvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4bvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void VertexAttrib4dvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void VertexAttrib4fvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4ivARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void VertexAttrib4svARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4ubvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4uivARB_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4usvARB_(GLuint index, IntPtr v);
            public delegate void VertexAttribPointerARB_(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer);
            public delegate void EnableVertexAttribArrayARB(GLuint index);
            public delegate void DisableVertexAttribArrayARB(GLuint index);
            public delegate void ProgramStringARB_(GLenum target, GLenum format, GLsizei len, IntPtr @string);
            public delegate void BindProgramARB(GLenum target, GLuint program);
            public delegate void DeleteProgramsARB_(GLsizei n, IntPtr programs);
            public delegate void GenProgramsARB_(GLsizei n, IntPtr programs);
            public delegate void ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void ProgramEnvParameter4dvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void ProgramEnvParameter4fvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void ProgramLocalParameter4dvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void ProgramLocalParameter4fvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void GetProgramEnvParameterdvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void GetProgramEnvParameterfvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void GetProgramLocalParameterdvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void GetProgramLocalParameterfvARB_(GLenum target, GLuint index, IntPtr parameters);
            public delegate void GetProgramivARB_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetProgramStringARB_(GLenum target, GLenum pname, IntPtr @string);
            public delegate void GetVertexAttribdvARB_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribfvARB_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribivARB_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribPointervARB_(GLuint index, GLenum pname, IntPtr pointer);
            public delegate GLboolean IsProgramARB(GLuint program);
            public delegate void BindBufferARB(GLenum target, GLuint buffer);
            public delegate void DeleteBuffersARB_(GLsizei n, IntPtr buffers);
            public delegate void GenBuffersARB_(GLsizei n, IntPtr buffers);
            public delegate GLboolean IsBufferARB(GLuint buffer);
            public delegate void BufferDataARB_(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage);
            public delegate void BufferSubDataARB_(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);
            public delegate void GetBufferSubDataARB_(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);
            public delegate IntPtr MapBufferARB(GLenum target, GLenum access);
            public delegate GLboolean UnmapBufferARB(GLenum target);
            public delegate void GetBufferParameterivARB_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetBufferPointervARB_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GenQueriesARB_(GLsizei n, IntPtr ids);
            public delegate void DeleteQueriesARB_(GLsizei n, IntPtr ids);
            public delegate GLboolean IsQueryARB(GLuint id);
            public delegate void BeginQueryARB(Enums.ARB_occlusion_query target, GLuint id);
            public delegate void EndQueryARB(Enums.ARB_occlusion_query target);
            public delegate void GetQueryivARB_(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, IntPtr parameters);
            public delegate void GetQueryObjectivARB_(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters);
            public delegate void GetQueryObjectuivARB_(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters);
            public delegate void DeleteObjectARB(GLhandleARB obj);
            public delegate GLhandleARB GetHandleARB(Enums.ARB_shader_objects pname);
            public delegate void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
            public delegate GLhandleARB CreateShaderObjectARB(Enums.ARB_shader_objects shaderType);
            public delegate void ShaderSourceARB_(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length);
            public delegate void CompileShaderARB(GLhandleARB shaderObj);
            public delegate GLhandleARB CreateProgramObjectARB();
            public delegate void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
            public delegate void LinkProgramARB(GLhandleARB programObj);
            public delegate void UseProgramObjectARB(GLhandleARB programObj);
            public delegate void ValidateProgramARB(GLhandleARB programObj);
            public delegate void Uniform1fARB(GLint location, GLfloat v0);
            public delegate void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1);
            public delegate void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
            public delegate void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
            public delegate void Uniform1iARB(GLint location, GLint v0);
            public delegate void Uniform2iARB(GLint location, GLint v0, GLint v1);
            public delegate void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
            public delegate void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
            public delegate void Uniform1fvARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform2fvARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform3fvARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform4fvARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform1ivARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform2ivARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform3ivARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void Uniform4ivARB_(GLint location, GLsizei count, IntPtr value);
            public delegate void UniformMatrix2fvARB_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix3fvARB_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void UniformMatrix4fvARB_(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value);
            public delegate void GetObjectParameterfvARB_(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters);
            public delegate void GetObjectParameterivARB_(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters);
            public delegate void GetInfoLogARB_(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog);
            public delegate void GetAttachedObjectsARB_(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj);
            public delegate GLint GetUniformLocationARB(GLhandleARB programObj, string name);
            public delegate void GetActiveUniformARB_(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public delegate void GetUniformfvARB_(GLhandleARB programObj, GLint location, IntPtr parameters);
            public delegate void GetUniformivARB_(GLhandleARB programObj, GLint location, IntPtr parameters);
            public delegate void GetShaderSourceARB_(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source);
            public delegate void BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name);
            public delegate void GetActiveAttribARB_(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public delegate GLint GetAttribLocationARB(GLhandleARB programObj, string name);
            public delegate void DrawBuffersARB_(GLsizei n, IntPtr bufs);
            public delegate void ClampColorARB(GLenum target, GLenum clamp);
            public delegate void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public delegate void PolygonOffsetEXT(GLfloat factor, GLfloat bias);
            public delegate void TexImage3DEXT_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexSubImage3DEXT_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void GetTexFilterFuncSGIS_(Enums.TextureTarget target, GLenum filter, IntPtr weights);
            public delegate void TexFilterFuncSGIS_(Enums.TextureTarget target, GLenum filter, GLsizei n, IntPtr weights);
            public delegate void TexSubImage1DEXT_(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexSubImage2DEXT_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void CopyTexImage1DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
            public delegate void CopyTexImage2DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
            public delegate void CopyTexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
            public delegate void CopyTexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void CopyTexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void GetHistogramEXT_(Enums.HistogramTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            public delegate void GetHistogramParameterfvEXT_(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters);
            public delegate void GetHistogramParameterivEXT_(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters);
            public delegate void GetMinmaxEXT_(Enums.MinmaxTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values);
            public delegate void GetMinmaxParameterfvEXT_(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters);
            public delegate void GetMinmaxParameterivEXT_(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters);
            public delegate void HistogramEXT(Enums.HistogramTargetEXT target, GLsizei width, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            public delegate void MinmaxEXT(Enums.MinmaxTargetEXT target, Enums.PixelInternalFormat internalformat, Enums.Boolean sink);
            public delegate void ResetHistogramEXT(Enums.HistogramTargetEXT target);
            public delegate void ResetMinmaxEXT(Enums.MinmaxTargetEXT target);
            public delegate void ConvolutionFilter1DEXT_(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void ConvolutionFilter2DEXT_(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void ConvolutionParameterfEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat parameters);
            public delegate void ConvolutionParameterfvEXT_(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters);
            public delegate void ConvolutionParameteriEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint parameters);
            public delegate void ConvolutionParameterivEXT_(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters);
            public delegate void CopyConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            public delegate void CopyConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
            public delegate void GetConvolutionFilterEXT_(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image);
            public delegate void GetConvolutionParameterfvEXT_(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters);
            public delegate void GetConvolutionParameterivEXT_(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters);
            public delegate void GetSeparableFilterEXT_(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span);
            public delegate void SeparableFilter2DEXT_(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column);
            public delegate void ColorTableSGI_(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            public delegate void ColorTableParameterfvSGI_(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters);
            public delegate void ColorTableParameterivSGI_(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters);
            public delegate void CopyColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
            public delegate void GetColorTableSGI_(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            public delegate void GetColorTableParameterfvSGI_(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters);
            public delegate void GetColorTableParameterivSGI_(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters);
            public delegate void PixelTexGenSGIX(GLenum mode);
            public delegate void PixelTexGenParameteriSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint param);
            public delegate void PixelTexGenParameterivSGIS_(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters);
            public delegate void PixelTexGenParameterfSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat param);
            public delegate void PixelTexGenParameterfvSGIS_(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters);
            public delegate void GetPixelTexGenParameterivSGIS_(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters);
            public delegate void GetPixelTexGenParameterfvSGIS_(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters);
            public delegate void TexImage4DSGIS_(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate void TexSubImage4DSGIS_(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels);
            public delegate GLboolean AreTexturesResidentEXT_(GLsizei n, IntPtr textures, IntPtr residences);
            public delegate void BindTextureEXT(Enums.TextureTarget target, GLuint texture);
            public delegate void DeleteTexturesEXT_(GLsizei n, IntPtr textures);
            public delegate void GenTexturesEXT_(GLsizei n, IntPtr textures);
            public delegate GLboolean IsTextureEXT(GLuint texture);
            public delegate void PrioritizeTexturesEXT_(GLsizei n, IntPtr textures, IntPtr priorities);
            public delegate void DetailTexFuncSGIS_(Enums.TextureTarget target, GLsizei n, IntPtr points);
            public delegate void GetDetailTexFuncSGIS_(Enums.TextureTarget target, IntPtr points);
            public delegate void SharpenTexFuncSGIS_(Enums.TextureTarget target, GLsizei n, IntPtr points);
            public delegate void GetSharpenTexFuncSGIS_(Enums.TextureTarget target, IntPtr points);
            public delegate void SampleMaskSGIS(GLclampf value, Enums.Boolean invert);
            public delegate void SamplePatternSGIS(Enums.SamplePatternSGIS pattern);
            public delegate void ArrayElementEXT(GLint i);
            public delegate void ColorPointerEXT_(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void DrawArraysEXT(Enums.BeginMode mode, GLint first, GLsizei count);
            public delegate void EdgeFlagPointerEXT_(GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void GetPointervEXT_(Enums.GetPointervPName pname, IntPtr parameters);
            public delegate void IndexPointerEXT_(Enums.IndexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void NormalPointerEXT_(Enums.NormalPointerType type, GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void TexCoordPointerEXT_(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void VertexPointerEXT_(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer);
            public delegate void BlendEquationEXT(Enums.BlendEquationModeEXT mode);
            public delegate void SpriteParameterfSGIX(GLenum pname, GLfloat param);
            public delegate void SpriteParameterfvSGIX_(GLenum pname, IntPtr parameters);
            public delegate void SpriteParameteriSGIX(GLenum pname, GLint param);
            public delegate void SpriteParameterivSGIX_(GLenum pname, IntPtr parameters);
            public delegate void PointParameterfEXT(GLenum pname, GLfloat param);
            public delegate void PointParameterfvEXT_(GLenum pname, IntPtr parameters);
            public delegate void PointParameterfSGIS(GLenum pname, GLfloat param);
            public delegate void PointParameterfvSGIS_(GLenum pname, IntPtr parameters);
            public delegate GLint GetInstrumentsSGIX();
            public delegate void InstrumentsBufferSGIX_(GLsizei size, IntPtr buffer);
            public delegate GLint PollInstrumentsSGIX_(IntPtr marker_p);
            public delegate void ReadInstrumentsSGIX(GLint marker);
            public delegate void StartInstrumentsSGIX();
            public delegate void StopInstrumentsSGIX(GLint marker);
            public delegate void FrameZoomSGIX(GLint factor);
            public delegate void TagSampleBufferSGIX();
            public delegate void DeformationMap3dSGIX_(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points);
            public delegate void DeformationMap3fSGIX_(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points);
            public delegate void DeformSGIX(Enums.FfdMaskSGIX mask);
            public delegate void LoadIdentityDeformationMapSGIX(Enums.FfdMaskSGIX mask);
            public delegate void ReferencePlaneSGIX_(IntPtr equation);
            public delegate void FlushRasterSGIX();
            public delegate void FogFuncSGIS_(GLsizei n, IntPtr points);
            public delegate void GetFogFuncSGIS_(IntPtr points);
            public delegate void ImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
            public delegate void ImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
            public delegate void ImageTransformParameterivHP_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void ImageTransformParameterfvHP_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetImageTransformParameterivHP_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetImageTransformParameterfvHP_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void ColorSubTableEXT_(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data);
            public delegate void CopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
            public delegate void HintPGI(GLenum target, GLint mode);
            public delegate void ColorTableEXT_(GLenum target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table);
            public delegate void GetColorTableEXT_(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr data);
            public delegate void GetColorTableParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetColorTableParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetListParameterfvSGIX_(GLuint list, Enums.ListParameterName pname, IntPtr parameters);
            public delegate void GetListParameterivSGIX_(GLuint list, Enums.ListParameterName pname, IntPtr parameters);
            public delegate void ListParameterfSGIX(GLuint list, Enums.ListParameterName pname, GLfloat param);
            public delegate void ListParameterfvSGIX_(GLuint list, Enums.ListParameterName pname, IntPtr parameters);
            public delegate void ListParameteriSGIX(GLuint list, Enums.ListParameterName pname, GLint param);
            public delegate void ListParameterivSGIX_(GLuint list, Enums.ListParameterName pname, IntPtr parameters);
            public delegate void IndexMaterialEXT(Enums.MaterialFace face, GLenum mode);
            public delegate void IndexFuncEXT(GLenum func, GLclampf reference);
            public delegate void LockArraysEXT(GLint first, GLsizei count);
            public delegate void UnlockArraysEXT();
            public delegate void CullParameterdvEXT_(GLenum pname, IntPtr parameters);
            public delegate void CullParameterfvEXT_(GLenum pname, IntPtr parameters);
            public delegate void FragmentColorMaterialSGIX(Enums.MaterialFace face, Enums.MaterialParameter mode);
            public delegate void FragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
            public delegate void FragmentLightfvSGIX_(GLenum light, GLenum pname, IntPtr parameters);
            public delegate void FragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
            public delegate void FragmentLightivSGIX_(GLenum light, GLenum pname, IntPtr parameters);
            public delegate void FragmentLightModelfSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat param);
            public delegate void FragmentLightModelfvSGIX_(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters);
            public delegate void FragmentLightModeliSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint param);
            public delegate void FragmentLightModelivSGIX_(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters);
            public delegate void FragmentMaterialfSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
            public delegate void FragmentMaterialfvSGIX_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void FragmentMaterialiSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
            public delegate void FragmentMaterialivSGIX_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void GetFragmentLightfvSGIX_(GLenum light, GLenum pname, IntPtr parameters);
            public delegate void GetFragmentLightivSGIX_(GLenum light, GLenum pname, IntPtr parameters);
            public delegate void GetFragmentMaterialfvSGIX_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void GetFragmentMaterialivSGIX_(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters);
            public delegate void LightEnviSGIX(Enums.LightEnvParameterSGIX pname, GLint param);
            public delegate void DrawRangeElementsEXT_(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);
            public delegate void ApplyTextureEXT(GLenum mode);
            public delegate void TextureLightEXT(GLenum pname);
            public delegate void TextureMaterialEXT(Enums.MaterialFace face, Enums.MaterialParameter mode);
            public delegate void AsyncMarkerSGIX(GLuint marker);
            public delegate GLint FinishAsyncSGIX_(IntPtr markerp);
            public delegate GLint PollAsyncSGIX_(IntPtr markerp);
            public delegate GLuint GenAsyncMarkersSGIX(GLsizei range);
            public delegate void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
            public delegate GLboolean IsAsyncMarkerSGIX(GLuint marker);
            public delegate void VertexPointervINTEL_(GLint size, Enums.VertexPointerType type, IntPtr pointer);
            public delegate void NormalPointervINTEL_(Enums.NormalPointerType type, IntPtr pointer);
            public delegate void ColorPointervINTEL_(GLint size, Enums.VertexPointerType type, IntPtr pointer);
            public delegate void TexCoordPointervINTEL_(GLint size, Enums.VertexPointerType type, IntPtr pointer);
            public delegate void PixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
            public delegate void PixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
            public delegate void PixelTransformParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void PixelTransformParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
            public delegate void SecondaryColor3bvEXT_(IntPtr v);
            public delegate void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
            public delegate void SecondaryColor3dvEXT_(IntPtr v);
            public delegate void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
            public delegate void SecondaryColor3fvEXT_(IntPtr v);
            public delegate void SecondaryColor3iEXT(GLint red, GLint green, GLint blue);
            public delegate void SecondaryColor3ivEXT_(IntPtr v);
            public delegate void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
            public delegate void SecondaryColor3svEXT_(IntPtr v);
            public delegate void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
            public delegate void SecondaryColor3ubvEXT_(IntPtr v);
            public delegate void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
            public delegate void SecondaryColor3uivEXT_(IntPtr v);
            public delegate void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
            public delegate void SecondaryColor3usvEXT_(IntPtr v);
            public delegate void SecondaryColorPointerEXT_(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer);
            public delegate void TextureNormalEXT(GLenum mode);
            public delegate void MultiDrawArraysEXT_(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount);
            public delegate void MultiDrawElementsEXT_(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);
            public delegate void FogCoordfEXT(GLfloat coord);
            public delegate void FogCoordfvEXT_(IntPtr coord);
            public delegate void FogCoorddEXT(GLdouble coord);
            public delegate void FogCoorddvEXT_(IntPtr coord);
            public delegate void FogCoordPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
            public delegate void Tangent3bvEXT_(IntPtr v);
            public delegate void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
            public delegate void Tangent3dvEXT_(IntPtr v);
            public delegate void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
            public delegate void Tangent3fvEXT_(IntPtr v);
            public delegate void Tangent3iEXT(GLint tx, GLint ty, GLint tz);
            public delegate void Tangent3ivEXT_(IntPtr v);
            public delegate void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
            public delegate void Tangent3svEXT_(IntPtr v);
            public delegate void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
            public delegate void Binormal3bvEXT_(IntPtr v);
            public delegate void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
            public delegate void Binormal3dvEXT_(IntPtr v);
            public delegate void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
            public delegate void Binormal3fvEXT_(IntPtr v);
            public delegate void Binormal3iEXT(GLint bx, GLint by, GLint bz);
            public delegate void Binormal3ivEXT_(IntPtr v);
            public delegate void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz);
            public delegate void Binormal3svEXT_(IntPtr v);
            public delegate void TangentPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void BinormalPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void FinishTextureSUNX();
            public delegate void GlobalAlphaFactorbSUN(GLbyte factor);
            public delegate void GlobalAlphaFactorsSUN(GLshort factor);
            public delegate void GlobalAlphaFactoriSUN(GLint factor);
            public delegate void GlobalAlphaFactorfSUN(GLfloat factor);
            public delegate void GlobalAlphaFactordSUN(GLdouble factor);
            public delegate void GlobalAlphaFactorubSUN(GLubyte factor);
            public delegate void GlobalAlphaFactorusSUN(GLushort factor);
            public delegate void GlobalAlphaFactoruiSUN(GLuint factor);
            public delegate void ReplacementCodeuiSUN(GLuint code);
            public delegate void ReplacementCodeusSUN(GLushort code);
            public delegate void ReplacementCodeubSUN(GLubyte code);
            public delegate void ReplacementCodeuivSUN_(IntPtr code);
            public delegate void ReplacementCodeusvSUN_(IntPtr code);
            public delegate void ReplacementCodeubvSUN_(IntPtr code);
            public delegate void ReplacementCodePointerSUN_(GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
            public delegate void Color4ubVertex2fvSUN_(IntPtr c, IntPtr v);
            public delegate void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public delegate void Color4ubVertex3fvSUN_(IntPtr c, IntPtr v);
            public delegate void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public delegate void Color3fVertex3fvSUN_(IntPtr c, IntPtr v);
            public delegate void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void Normal3fVertex3fvSUN_(IntPtr n, IntPtr v);
            public delegate void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void Color4fNormal3fVertex3fvSUN_(IntPtr c, IntPtr n, IntPtr v);
            public delegate void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
            public delegate void TexCoord2fVertex3fvSUN_(IntPtr tc, IntPtr v);
            public delegate void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void TexCoord4fVertex4fvSUN_(IntPtr tc, IntPtr v);
            public delegate void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public delegate void TexCoord2fColor4ubVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr v);
            public delegate void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public delegate void TexCoord2fColor3fVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr v);
            public delegate void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void TexCoord2fNormal3fVertex3fvSUN_(IntPtr tc, IntPtr n, IntPtr v);
            public delegate void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void TexCoord2fColor4fNormal3fVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public delegate void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void TexCoord4fColor4fNormal3fVertex4fvSUN_(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public delegate void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiVertex3fvSUN_(IntPtr rc, IntPtr v);
            public delegate void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiColor4ubVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr v);
            public delegate void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiColor3fVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr v);
            public delegate void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiNormal3fVertex3fvSUN_(IntPtr rc, IntPtr n, IntPtr v);
            public delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr n, IntPtr v);
            public delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr v);
            public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v);
            public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public delegate void BlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public delegate void BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public delegate void VertexWeightfEXT(GLfloat weight);
            public delegate void VertexWeightfvEXT_(IntPtr weight);
            public delegate void VertexWeightPointerEXT_(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void FlushVertexArrayRangeNV();
            public delegate void VertexArrayRangeNV_(GLsizei length, IntPtr pointer);
            public delegate void CombinerParameterfvNV_(GLenum pname, IntPtr parameters);
            public delegate void CombinerParameterfNV(GLenum pname, GLfloat param);
            public delegate void CombinerParameterivNV_(GLenum pname, IntPtr parameters);
            public delegate void CombinerParameteriNV(GLenum pname, GLint param);
            public delegate void CombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
            public delegate void CombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, Enums.Boolean abDotProduct, Enums.Boolean cdDotProduct, Enums.Boolean muxSum);
            public delegate void FinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
            public delegate void GetCombinerInputParameterfvNV_(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);
            public delegate void GetCombinerInputParameterivNV_(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);
            public delegate void GetCombinerOutputParameterfvNV_(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);
            public delegate void GetCombinerOutputParameterivNV_(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);
            public delegate void GetFinalCombinerInputParameterfvNV_(GLenum variable, GLenum pname, IntPtr parameters);
            public delegate void GetFinalCombinerInputParameterivNV_(GLenum variable, GLenum pname, IntPtr parameters);
            public delegate void ResizeBuffersMESA();
            public delegate void WindowPos2dMESA(GLdouble x, GLdouble y);
            public delegate void WindowPos2dvMESA_(IntPtr v);
            public delegate void WindowPos2fMESA(GLfloat x, GLfloat y);
            public delegate void WindowPos2fvMESA_(IntPtr v);
            public delegate void WindowPos2iMESA(GLint x, GLint y);
            public delegate void WindowPos2ivMESA_(IntPtr v);
            public delegate void WindowPos2sMESA(GLshort x, GLshort y);
            public delegate void WindowPos2svMESA_(IntPtr v);
            public delegate void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
            public delegate void WindowPos3dvMESA_(IntPtr v);
            public delegate void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
            public delegate void WindowPos3fvMESA_(IntPtr v);
            public delegate void WindowPos3iMESA(GLint x, GLint y, GLint z);
            public delegate void WindowPos3ivMESA_(IntPtr v);
            public delegate void WindowPos3sMESA(GLshort x, GLshort y, GLshort z);
            public delegate void WindowPos3svMESA_(IntPtr v);
            public delegate void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void WindowPos4dvMESA_(IntPtr v);
            public delegate void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void WindowPos4fvMESA_(IntPtr v);
            public delegate void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
            public delegate void WindowPos4ivMESA_(IntPtr v);
            public delegate void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void WindowPos4svMESA_(IntPtr v);
            public delegate void MultiModeDrawArraysIBM_(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride);
            public delegate void MultiModeDrawElementsIBM_(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride);
            public delegate void ColorPointerListIBM_(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void SecondaryColorPointerListIBM_(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void EdgeFlagPointerListIBM_(GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void FogCoordPointerListIBM_(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void IndexPointerListIBM_(Enums.IndexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void NormalPointerListIBM_(Enums.NormalPointerType type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void TexCoordPointerListIBM_(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void VertexPointerListIBM_(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride);
            public delegate void TbufferMask3DFX(GLuint mask);
            public delegate void SampleMaskEXT(GLclampf value, Enums.Boolean invert);
            public delegate void SamplePatternEXT(GLenum pattern);
            public delegate void TextureColorMaskSGIS(Enums.Boolean red, Enums.Boolean green, Enums.Boolean blue, Enums.Boolean alpha);
            public delegate void IglooInterfaceSGIX_(GLenum pname, IntPtr parameters);
            public delegate void DeleteFencesNV_(GLsizei n, IntPtr fences);
            public delegate void GenFencesNV_(GLsizei n, IntPtr fences);
            public delegate GLboolean IsFenceNV(GLuint fence);
            public delegate GLboolean TestFenceNV(GLuint fence);
            public delegate void GetFenceivNV_(GLuint fence, GLenum pname, IntPtr parameters);
            public delegate void FinishFenceNV(GLuint fence);
            public delegate void SetFenceNV(GLuint fence, GLenum condition);
            public delegate void MapControlPointsNV_(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, Enums.Boolean packed, IntPtr points);
            public delegate void MapParameterivNV_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void MapParameterfvNV_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetMapControlPointsNV_(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, Enums.Boolean packed, IntPtr points);
            public delegate void GetMapParameterivNV_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetMapParameterfvNV_(GLenum target, GLenum pname, IntPtr parameters);
            public delegate void GetMapAttribParameterivNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetMapAttribParameterfvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public delegate void EvalMapsNV(GLenum target, GLenum mode);
            public delegate void CombinerStageParameterfvNV_(GLenum stage, GLenum pname, IntPtr parameters);
            public delegate void GetCombinerStageParameterfvNV_(GLenum stage, GLenum pname, IntPtr parameters);
            public delegate GLboolean AreProgramsResidentNV_(GLsizei n, IntPtr programs, IntPtr residences);
            public delegate void BindProgramNV(GLenum target, GLuint id);
            public delegate void DeleteProgramsNV_(GLsizei n, IntPtr programs);
            public delegate void ExecuteProgramNV_(GLenum target, GLuint id, IntPtr parameters);
            public delegate void GenProgramsNV_(GLsizei n, IntPtr programs);
            public delegate void GetProgramParameterdvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetProgramParameterfvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetProgramivNV_(GLuint id, GLenum pname, IntPtr parameters);
            public delegate void GetProgramStringNV_(GLuint id, GLenum pname, IntPtr program);
            public delegate void GetTrackMatrixivNV_(GLenum target, GLuint address, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribdvNV_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribfvNV_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribivNV_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribPointervNV_(GLuint index, GLenum pname, IntPtr pointer);
            public delegate GLboolean IsProgramNV(GLuint id);
            public delegate void LoadProgramNV_(GLenum target, GLuint id, GLsizei len, IntPtr program);
            public delegate void ProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void ProgramParameter4dvNV_(GLenum target, GLuint index, IntPtr v);
            public delegate void ProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void ProgramParameter4fvNV_(GLenum target, GLuint index, IntPtr v);
            public delegate void ProgramParameters4dvNV_(GLenum target, GLuint index, GLuint count, IntPtr v);
            public delegate void ProgramParameters4fvNV_(GLenum target, GLuint index, GLuint count, IntPtr v);
            public delegate void RequestResidentProgramsNV_(GLsizei n, IntPtr programs);
            public delegate void TrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
            public delegate void VertexAttribPointerNV_(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer);
            public delegate void VertexAttrib1dNV(GLuint index, GLdouble x);
            public delegate void VertexAttrib1dvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1fNV(GLuint index, GLfloat x);
            public delegate void VertexAttrib1fvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib1sNV(GLuint index, GLshort x);
            public delegate void VertexAttrib1svNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
            public delegate void VertexAttrib2dvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
            public delegate void VertexAttrib2fvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
            public delegate void VertexAttrib2svNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public delegate void VertexAttrib3dvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public delegate void VertexAttrib3fvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
            public delegate void VertexAttrib3svNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void VertexAttrib4dvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void VertexAttrib4fvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void VertexAttrib4svNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public delegate void VertexAttrib4ubvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttribs1dvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs1fvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs1svNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs2dvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs2fvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs2svNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs3dvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs3fvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs3svNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs4dvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs4fvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs4svNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void VertexAttribs4ubvNV_(GLuint index, GLsizei count, IntPtr v);
            public delegate void TexBumpParameterivATI_(GLenum pname, IntPtr param);
            public delegate void TexBumpParameterfvATI_(GLenum pname, IntPtr param);
            public delegate void GetTexBumpParameterivATI_(GLenum pname, IntPtr param);
            public delegate void GetTexBumpParameterfvATI_(GLenum pname, IntPtr param);
            public delegate GLuint GenFragmentShadersATI(GLuint range);
            public delegate void BindFragmentShaderATI(GLuint id);
            public delegate void DeleteFragmentShaderATI(GLuint id);
            public delegate void BeginFragmentShaderATI();
            public delegate void EndFragmentShaderATI();
            public delegate void PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
            public delegate void SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
            public delegate void ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
            public delegate void ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
            public delegate void ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
            public delegate void AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
            public delegate void AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
            public delegate void AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
            public delegate void SetFragmentShaderConstantATI_(GLuint dst, IntPtr value);
            public delegate void PNTrianglesiATI(GLenum pname, GLint param);
            public delegate void PNTrianglesfATI(GLenum pname, GLfloat param);
            public delegate GLuint NewObjectBufferATI_(GLsizei size, IntPtr pointer, GLenum usage);
            public delegate GLboolean IsObjectBufferATI(GLuint buffer);
            public delegate void UpdateObjectBufferATI_(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve);
            public delegate void GetObjectBufferfvATI_(GLuint buffer, GLenum pname, IntPtr parameters);
            public delegate void GetObjectBufferivATI_(GLuint buffer, GLenum pname, IntPtr parameters);
            public delegate void FreeObjectBufferATI(GLuint buffer);
            public delegate void ArrayObjectATI(Enums.EnableCap array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
            public delegate void GetArrayObjectfvATI_(Enums.EnableCap array, GLenum pname, IntPtr parameters);
            public delegate void GetArrayObjectivATI_(Enums.EnableCap array, GLenum pname, IntPtr parameters);
            public delegate void VariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
            public delegate void GetVariantArrayObjectfvATI_(GLuint id, GLenum pname, IntPtr parameters);
            public delegate void GetVariantArrayObjectivATI_(GLuint id, GLenum pname, IntPtr parameters);
            public delegate void BeginVertexShaderEXT();
            public delegate void EndVertexShaderEXT();
            public delegate void BindVertexShaderEXT(GLuint id);
            public delegate GLuint GenVertexShadersEXT(GLuint range);
            public delegate void DeleteVertexShaderEXT(GLuint id);
            public delegate void ShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
            public delegate void ShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
            public delegate void ShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
            public delegate void SwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
            public delegate void WriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
            public delegate void InsertComponentEXT(GLuint res, GLuint src, GLuint num);
            public delegate void ExtractComponentEXT(GLuint res, GLuint src, GLuint num);
            public delegate GLuint GenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
            public delegate void SetInvariantEXT_(GLuint id, GLenum type, IntPtr addr);
            public delegate void SetLocalConstantEXT_(GLuint id, GLenum type, IntPtr addr);
            public delegate void VariantbvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantsvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantivEXT_(GLuint id, IntPtr addr);
            public delegate void VariantfvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantdvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantubvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantusvEXT_(GLuint id, IntPtr addr);
            public delegate void VariantuivEXT_(GLuint id, IntPtr addr);
            public delegate void VariantPointerEXT_(GLuint id, GLenum type, GLuint stride, IntPtr addr);
            public delegate void EnableVariantClientStateEXT(GLuint id);
            public delegate void DisableVariantClientStateEXT(GLuint id);
            public delegate GLuint BindLightParameterEXT(Enums.LightName light, Enums.LightParameter value);
            public delegate GLuint BindMaterialParameterEXT(Enums.MaterialFace face, Enums.MaterialParameter value);
            public delegate GLuint BindTexGenParameterEXT(GLenum unit, Enums.TextureCoordName coord, Enums.TextureGenParameter value);
            public delegate GLuint BindTextureUnitParameterEXT(GLenum unit, GLenum value);
            public delegate GLuint BindParameterEXT(GLenum value);
            public delegate GLboolean IsVariantEnabledEXT(GLuint id, GLenum cap);
            public delegate void GetVariantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetVariantIntegervEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetVariantFloatvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetVariantPointervEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetInvariantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetInvariantIntegervEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetInvariantFloatvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetLocalConstantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetLocalConstantIntegervEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void GetLocalConstantFloatvEXT_(GLuint id, GLenum value, IntPtr data);
            public delegate void VertexStream1sATI(GLenum stream, GLshort x);
            public delegate void VertexStream1svATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream1iATI(GLenum stream, GLint x);
            public delegate void VertexStream1ivATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream1fATI(GLenum stream, GLfloat x);
            public delegate void VertexStream1fvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream1dATI(GLenum stream, GLdouble x);
            public delegate void VertexStream1dvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream2sATI(GLenum stream, GLshort x, GLshort y);
            public delegate void VertexStream2svATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream2iATI(GLenum stream, GLint x, GLint y);
            public delegate void VertexStream2ivATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
            public delegate void VertexStream2fvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
            public delegate void VertexStream2dvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
            public delegate void VertexStream3svATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
            public delegate void VertexStream3ivATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
            public delegate void VertexStream3fvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
            public delegate void VertexStream3dvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
            public delegate void VertexStream4svATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
            public delegate void VertexStream4ivATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void VertexStream4fvATI_(GLenum stream, IntPtr coords);
            public delegate void VertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void VertexStream4dvATI_(GLenum stream, IntPtr coords);
            public delegate void NormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
            public delegate void NormalStream3bvATI_(GLenum stream, IntPtr coords);
            public delegate void NormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
            public delegate void NormalStream3svATI_(GLenum stream, IntPtr coords);
            public delegate void NormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
            public delegate void NormalStream3ivATI_(GLenum stream, IntPtr coords);
            public delegate void NormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
            public delegate void NormalStream3fvATI_(GLenum stream, IntPtr coords);
            public delegate void NormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
            public delegate void NormalStream3dvATI_(GLenum stream, IntPtr coords);
            public delegate void ClientActiveVertexStreamATI(GLenum stream);
            public delegate void VertexBlendEnviATI(GLenum pname, GLint param);
            public delegate void VertexBlendEnvfATI(GLenum pname, GLfloat param);
            public delegate void ElementPointerATI_(GLenum type, IntPtr pointer);
            public delegate void DrawElementArrayATI(Enums.BeginMode mode, GLsizei count);
            public delegate void DrawRangeElementArrayATI(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count);
            public delegate void DrawMeshArraysSUN(Enums.BeginMode mode, GLint first, GLsizei count, GLsizei width);
            public delegate void GenOcclusionQueriesNV_(GLsizei n, IntPtr ids);
            public delegate void DeleteOcclusionQueriesNV_(GLsizei n, IntPtr ids);
            public delegate GLboolean IsOcclusionQueryNV(GLuint id);
            public delegate void BeginOcclusionQueryNV(GLuint id);
            public delegate void EndOcclusionQueryNV();
            public delegate void GetOcclusionQueryivNV_(GLuint id, GLenum pname, IntPtr parameters);
            public delegate void GetOcclusionQueryuivNV_(GLuint id, GLenum pname, IntPtr parameters);
            public delegate void PointParameteriNV(GLenum pname, GLint param);
            public delegate void PointParameterivNV_(GLenum pname, IntPtr parameters);
            public delegate void ActiveStencilFaceEXT(GLenum face);
            public delegate void ElementPointerAPPLE_(GLenum type, IntPtr pointer);
            public delegate void DrawElementArrayAPPLE(Enums.BeginMode mode, GLint first, GLsizei count);
            public delegate void DrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint first, GLsizei count);
            public delegate void MultiDrawElementArrayAPPLE_(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount);
            public delegate void MultiDrawRangeElementArrayAPPLE_(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount);
            public delegate void GenFencesAPPLE_(GLsizei n, IntPtr fences);
            public delegate void DeleteFencesAPPLE_(GLsizei n, IntPtr fences);
            public delegate void SetFenceAPPLE(GLuint fence);
            public delegate GLboolean IsFenceAPPLE(GLuint fence);
            public delegate GLboolean TestFenceAPPLE(GLuint fence);
            public delegate void FinishFenceAPPLE(GLuint fence);
            public delegate GLboolean TestObjectAPPLE(GLenum @object, GLuint name);
            public delegate void FinishObjectAPPLE(GLenum @object, GLint name);
            public delegate void BindVertexArrayAPPLE(GLuint array);
            public delegate void DeleteVertexArraysAPPLE_(GLsizei n, IntPtr arrays);
            public delegate void GenVertexArraysAPPLE_(GLsizei n, IntPtr arrays);
            public delegate GLboolean IsVertexArrayAPPLE(GLuint array);
            public delegate void VertexArrayRangeAPPLE_(GLsizei length, IntPtr pointer);
            public delegate void FlushVertexArrayRangeAPPLE_(GLsizei length, IntPtr pointer);
            public delegate void VertexArrayParameteriAPPLE(GLenum pname, GLint param);
            public delegate void DrawBuffersATI_(GLsizei n, IntPtr bufs);
            public delegate void ProgramNamedParameter4fNV_(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public delegate void ProgramNamedParameter4dNV_(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public delegate void ProgramNamedParameter4fvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr v);
            public delegate void ProgramNamedParameter4dvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr v);
            public delegate void GetProgramNamedParameterfvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);
            public delegate void GetProgramNamedParameterdvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);
            public delegate void Vertex2hNV(GLhalfNV x, GLhalfNV y);
            public delegate void Vertex2hvNV_(IntPtr v);
            public delegate void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
            public delegate void Vertex3hvNV_(IntPtr v);
            public delegate void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
            public delegate void Vertex4hvNV_(IntPtr v);
            public delegate void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
            public delegate void Normal3hvNV_(IntPtr v);
            public delegate void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
            public delegate void Color3hvNV_(IntPtr v);
            public delegate void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
            public delegate void Color4hvNV_(IntPtr v);
            public delegate void TexCoord1hNV(GLhalfNV s);
            public delegate void TexCoord1hvNV_(IntPtr v);
            public delegate void TexCoord2hNV(GLhalfNV s, GLhalfNV t);
            public delegate void TexCoord2hvNV_(IntPtr v);
            public delegate void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
            public delegate void TexCoord3hvNV_(IntPtr v);
            public delegate void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
            public delegate void TexCoord4hvNV_(IntPtr v);
            public delegate void MultiTexCoord1hNV(GLenum target, GLhalfNV s);
            public delegate void MultiTexCoord1hvNV_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
            public delegate void MultiTexCoord2hvNV_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
            public delegate void MultiTexCoord3hvNV_(GLenum target, IntPtr v);
            public delegate void MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
            public delegate void MultiTexCoord4hvNV_(GLenum target, IntPtr v);
            public delegate void FogCoordhNV(GLhalfNV fog);
            public delegate void FogCoordhvNV_(IntPtr fog);
            public delegate void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
            public delegate void SecondaryColor3hvNV_(IntPtr v);
            public delegate void VertexWeighthNV(GLhalfNV weight);
            public delegate void VertexWeighthvNV_(IntPtr weight);
            public delegate void VertexAttrib1hNV(GLuint index, GLhalfNV x);
            public delegate void VertexAttrib1hvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
            public delegate void VertexAttrib2hvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
            public delegate void VertexAttrib3hvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
            public delegate void VertexAttrib4hvNV_(GLuint index, IntPtr v);
            public delegate void VertexAttribs1hvNV_(GLuint index, GLsizei n, IntPtr v);
            public delegate void VertexAttribs2hvNV_(GLuint index, GLsizei n, IntPtr v);
            public delegate void VertexAttribs3hvNV_(GLuint index, GLsizei n, IntPtr v);
            public delegate void VertexAttribs4hvNV_(GLuint index, GLsizei n, IntPtr v);
            public delegate void PixelDataRangeNV_(GLenum target, GLsizei length, IntPtr pointer);
            public delegate void FlushPixelDataRangeNV(GLenum target);
            public delegate void PrimitiveRestartNV();
            public delegate void PrimitiveRestartIndexNV(GLuint index);
            public delegate IntPtr MapObjectBufferATI(GLuint buffer);
            public delegate void UnmapObjectBufferATI(GLuint buffer);
            public delegate void StencilOpSeparateATI(GLenum face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
            public delegate void StencilFuncSeparateATI(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint reference, GLuint mask);
            public delegate void VertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
            public delegate void GetVertexAttribArrayObjectfvATI_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void GetVertexAttribArrayObjectivATI_(GLuint index, GLenum pname, IntPtr parameters);
            public delegate void DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
            public delegate void BlendEquationSeparateEXT(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
            public delegate GLboolean IsRenderbufferEXT(GLuint renderbuffer);
            public delegate void BindRenderbufferEXT(Enums.EXT_framebuffer_object target, GLuint renderbuffer);
            public delegate void DeleteRenderbuffersEXT_(GLsizei n, IntPtr renderbuffers);
            public delegate void GenRenderbuffersEXT_(GLsizei n, IntPtr renderbuffers);
            public delegate void RenderbufferStorageEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object internalformat, GLsizei width, GLsizei height);
            public delegate void GetRenderbufferParameterivEXT_(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, IntPtr parameters);
            public delegate GLboolean IsFramebufferEXT(GLuint framebuffer);
            public delegate void BindFramebufferEXT(Enums.EXT_framebuffer_object target, GLuint framebuffer);
            public delegate void DeleteFramebuffersEXT_(GLsizei n, IntPtr framebuffers);
            public delegate void GenFramebuffersEXT_(GLsizei n, IntPtr framebuffers);
            public delegate GLenum CheckFramebufferStatusEXT(Enums.EXT_framebuffer_object target);
            public delegate void FramebufferTexture1DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level);
            public delegate void FramebufferTexture2DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level);
            public delegate void FramebufferTexture3DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level, GLint zoffset);
            public delegate void FramebufferRenderbufferEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object renderbuffertarget, GLuint renderbuffer);
            public delegate void GetFramebufferAttachmentParameterivEXT_(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, IntPtr parameters);
            public delegate void GenerateMipmapEXT(Enums.EXT_framebuffer_object target);
            public delegate void StringMarkerGREMEDY_(GLsizei len, IntPtr @string);
            public delegate void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
            public delegate void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, Enums.ClearBufferMask mask, Enums.EXT_framebuffer_blit filter);
            public delegate void RenderbufferStorageMultisampleEXT(Enums.EXT_framebuffer_multisample target, GLsizei samples, Enums.EXT_framebuffer_multisample internalformat, GLsizei width, GLsizei height);
            public delegate void GetQueryObjecti64vEXT_(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters);
            public delegate void GetQueryObjectui64vEXT_(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters);
            public delegate void ProgramEnvParameters4fvEXT_(GLenum target, GLuint index, GLsizei count, IntPtr parameters);
            public delegate void ProgramLocalParameters4fvEXT_(GLenum target, GLuint index, GLsizei count, IntPtr parameters);
        }
        #endregion

        #region Static Functions (and static initialisation)

        public static Delegates.ActiveTextureARB ActiveTextureARB = new Delegates.ActiveTextureARB(Imports.ActiveTextureARB);
        public static Delegates.ClientActiveTextureARB ClientActiveTextureARB = new Delegates.ClientActiveTextureARB(Imports.ClientActiveTextureARB);
        public static Delegates.MultiTexCoord1dARB MultiTexCoord1dARB = new Delegates.MultiTexCoord1dARB(Imports.MultiTexCoord1dARB);
        public static Delegates.MultiTexCoord1dvARB_ MultiTexCoord1dvARB_ = new Delegates.MultiTexCoord1dvARB_(Imports.MultiTexCoord1dvARB_);
        public static Delegates.MultiTexCoord1fARB MultiTexCoord1fARB = new Delegates.MultiTexCoord1fARB(Imports.MultiTexCoord1fARB);
        public static Delegates.MultiTexCoord1fvARB_ MultiTexCoord1fvARB_ = new Delegates.MultiTexCoord1fvARB_(Imports.MultiTexCoord1fvARB_);
        public static Delegates.MultiTexCoord1iARB MultiTexCoord1iARB = new Delegates.MultiTexCoord1iARB(Imports.MultiTexCoord1iARB);
        public static Delegates.MultiTexCoord1ivARB_ MultiTexCoord1ivARB_ = new Delegates.MultiTexCoord1ivARB_(Imports.MultiTexCoord1ivARB_);
        public static Delegates.MultiTexCoord1sARB MultiTexCoord1sARB = new Delegates.MultiTexCoord1sARB(Imports.MultiTexCoord1sARB);
        public static Delegates.MultiTexCoord1svARB_ MultiTexCoord1svARB_ = new Delegates.MultiTexCoord1svARB_(Imports.MultiTexCoord1svARB_);
        public static Delegates.MultiTexCoord2dARB MultiTexCoord2dARB = new Delegates.MultiTexCoord2dARB(Imports.MultiTexCoord2dARB);
        public static Delegates.MultiTexCoord2dvARB_ MultiTexCoord2dvARB_ = new Delegates.MultiTexCoord2dvARB_(Imports.MultiTexCoord2dvARB_);
        public static Delegates.MultiTexCoord2fARB MultiTexCoord2fARB = new Delegates.MultiTexCoord2fARB(Imports.MultiTexCoord2fARB);
        public static Delegates.MultiTexCoord2fvARB_ MultiTexCoord2fvARB_ = new Delegates.MultiTexCoord2fvARB_(Imports.MultiTexCoord2fvARB_);
        public static Delegates.MultiTexCoord2iARB MultiTexCoord2iARB = new Delegates.MultiTexCoord2iARB(Imports.MultiTexCoord2iARB);
        public static Delegates.MultiTexCoord2ivARB_ MultiTexCoord2ivARB_ = new Delegates.MultiTexCoord2ivARB_(Imports.MultiTexCoord2ivARB_);
        public static Delegates.MultiTexCoord2sARB MultiTexCoord2sARB = new Delegates.MultiTexCoord2sARB(Imports.MultiTexCoord2sARB);
        public static Delegates.MultiTexCoord2svARB_ MultiTexCoord2svARB_ = new Delegates.MultiTexCoord2svARB_(Imports.MultiTexCoord2svARB_);
        public static Delegates.MultiTexCoord3dARB MultiTexCoord3dARB = new Delegates.MultiTexCoord3dARB(Imports.MultiTexCoord3dARB);
        public static Delegates.MultiTexCoord3dvARB_ MultiTexCoord3dvARB_ = new Delegates.MultiTexCoord3dvARB_(Imports.MultiTexCoord3dvARB_);
        public static Delegates.MultiTexCoord3fARB MultiTexCoord3fARB = new Delegates.MultiTexCoord3fARB(Imports.MultiTexCoord3fARB);
        public static Delegates.MultiTexCoord3fvARB_ MultiTexCoord3fvARB_ = new Delegates.MultiTexCoord3fvARB_(Imports.MultiTexCoord3fvARB_);
        public static Delegates.MultiTexCoord3iARB MultiTexCoord3iARB = new Delegates.MultiTexCoord3iARB(Imports.MultiTexCoord3iARB);
        public static Delegates.MultiTexCoord3ivARB_ MultiTexCoord3ivARB_ = new Delegates.MultiTexCoord3ivARB_(Imports.MultiTexCoord3ivARB_);
        public static Delegates.MultiTexCoord3sARB MultiTexCoord3sARB = new Delegates.MultiTexCoord3sARB(Imports.MultiTexCoord3sARB);
        public static Delegates.MultiTexCoord3svARB_ MultiTexCoord3svARB_ = new Delegates.MultiTexCoord3svARB_(Imports.MultiTexCoord3svARB_);
        public static Delegates.MultiTexCoord4dARB MultiTexCoord4dARB = new Delegates.MultiTexCoord4dARB(Imports.MultiTexCoord4dARB);
        public static Delegates.MultiTexCoord4dvARB_ MultiTexCoord4dvARB_ = new Delegates.MultiTexCoord4dvARB_(Imports.MultiTexCoord4dvARB_);
        public static Delegates.MultiTexCoord4fARB MultiTexCoord4fARB = new Delegates.MultiTexCoord4fARB(Imports.MultiTexCoord4fARB);
        public static Delegates.MultiTexCoord4fvARB_ MultiTexCoord4fvARB_ = new Delegates.MultiTexCoord4fvARB_(Imports.MultiTexCoord4fvARB_);
        public static Delegates.MultiTexCoord4iARB MultiTexCoord4iARB = new Delegates.MultiTexCoord4iARB(Imports.MultiTexCoord4iARB);
        public static Delegates.MultiTexCoord4ivARB_ MultiTexCoord4ivARB_ = new Delegates.MultiTexCoord4ivARB_(Imports.MultiTexCoord4ivARB_);
        public static Delegates.MultiTexCoord4sARB MultiTexCoord4sARB = new Delegates.MultiTexCoord4sARB(Imports.MultiTexCoord4sARB);
        public static Delegates.MultiTexCoord4svARB_ MultiTexCoord4svARB_ = new Delegates.MultiTexCoord4svARB_(Imports.MultiTexCoord4svARB_);
        public static Delegates.LoadTransposeMatrixfARB_ LoadTransposeMatrixfARB_ = new Delegates.LoadTransposeMatrixfARB_(Imports.LoadTransposeMatrixfARB_);
        public static Delegates.LoadTransposeMatrixdARB_ LoadTransposeMatrixdARB_ = new Delegates.LoadTransposeMatrixdARB_(Imports.LoadTransposeMatrixdARB_);
        public static Delegates.MultTransposeMatrixfARB_ MultTransposeMatrixfARB_ = new Delegates.MultTransposeMatrixfARB_(Imports.MultTransposeMatrixfARB_);
        public static Delegates.MultTransposeMatrixdARB_ MultTransposeMatrixdARB_ = new Delegates.MultTransposeMatrixdARB_(Imports.MultTransposeMatrixdARB_);
        public static Delegates.SampleCoverageARB SampleCoverageARB = new Delegates.SampleCoverageARB(Imports.SampleCoverageARB);
        public static Delegates.CompressedTexImage3DARB_ CompressedTexImage3DARB_ = new Delegates.CompressedTexImage3DARB_(Imports.CompressedTexImage3DARB_);
        public static Delegates.CompressedTexImage2DARB_ CompressedTexImage2DARB_ = new Delegates.CompressedTexImage2DARB_(Imports.CompressedTexImage2DARB_);
        public static Delegates.CompressedTexImage1DARB_ CompressedTexImage1DARB_ = new Delegates.CompressedTexImage1DARB_(Imports.CompressedTexImage1DARB_);
        public static Delegates.CompressedTexSubImage3DARB_ CompressedTexSubImage3DARB_ = new Delegates.CompressedTexSubImage3DARB_(Imports.CompressedTexSubImage3DARB_);
        public static Delegates.CompressedTexSubImage2DARB_ CompressedTexSubImage2DARB_ = new Delegates.CompressedTexSubImage2DARB_(Imports.CompressedTexSubImage2DARB_);
        public static Delegates.CompressedTexSubImage1DARB_ CompressedTexSubImage1DARB_ = new Delegates.CompressedTexSubImage1DARB_(Imports.CompressedTexSubImage1DARB_);
        public static Delegates.GetCompressedTexImageARB_ GetCompressedTexImageARB_ = new Delegates.GetCompressedTexImageARB_(Imports.GetCompressedTexImageARB_);
        public static Delegates.PointParameterfARB PointParameterfARB = new Delegates.PointParameterfARB(Imports.PointParameterfARB);
        public static Delegates.PointParameterfvARB_ PointParameterfvARB_ = new Delegates.PointParameterfvARB_(Imports.PointParameterfvARB_);
        public static Delegates.WeightbvARB_ WeightbvARB_ = new Delegates.WeightbvARB_(Imports.WeightbvARB_);
        public static Delegates.WeightsvARB_ WeightsvARB_ = new Delegates.WeightsvARB_(Imports.WeightsvARB_);
        public static Delegates.WeightivARB_ WeightivARB_ = new Delegates.WeightivARB_(Imports.WeightivARB_);
        public static Delegates.WeightfvARB_ WeightfvARB_ = new Delegates.WeightfvARB_(Imports.WeightfvARB_);
        public static Delegates.WeightdvARB_ WeightdvARB_ = new Delegates.WeightdvARB_(Imports.WeightdvARB_);
        public static Delegates.WeightubvARB_ WeightubvARB_ = new Delegates.WeightubvARB_(Imports.WeightubvARB_);
        public static Delegates.WeightusvARB_ WeightusvARB_ = new Delegates.WeightusvARB_(Imports.WeightusvARB_);
        public static Delegates.WeightuivARB_ WeightuivARB_ = new Delegates.WeightuivARB_(Imports.WeightuivARB_);
        public static Delegates.WeightPointerARB_ WeightPointerARB_ = new Delegates.WeightPointerARB_(Imports.WeightPointerARB_);
        public static Delegates.VertexBlendARB VertexBlendARB = new Delegates.VertexBlendARB(Imports.VertexBlendARB);
        public static Delegates.CurrentPaletteMatrixARB CurrentPaletteMatrixARB = new Delegates.CurrentPaletteMatrixARB(Imports.CurrentPaletteMatrixARB);
        public static Delegates.MatrixIndexubvARB_ MatrixIndexubvARB_ = new Delegates.MatrixIndexubvARB_(Imports.MatrixIndexubvARB_);
        public static Delegates.MatrixIndexusvARB_ MatrixIndexusvARB_ = new Delegates.MatrixIndexusvARB_(Imports.MatrixIndexusvARB_);
        public static Delegates.MatrixIndexuivARB_ MatrixIndexuivARB_ = new Delegates.MatrixIndexuivARB_(Imports.MatrixIndexuivARB_);
        public static Delegates.MatrixIndexPointerARB_ MatrixIndexPointerARB_ = new Delegates.MatrixIndexPointerARB_(Imports.MatrixIndexPointerARB_);
        public static Delegates.WindowPos2dARB WindowPos2dARB = new Delegates.WindowPos2dARB(Imports.WindowPos2dARB);
        public static Delegates.WindowPos2dvARB_ WindowPos2dvARB_ = new Delegates.WindowPos2dvARB_(Imports.WindowPos2dvARB_);
        public static Delegates.WindowPos2fARB WindowPos2fARB = new Delegates.WindowPos2fARB(Imports.WindowPos2fARB);
        public static Delegates.WindowPos2fvARB_ WindowPos2fvARB_ = new Delegates.WindowPos2fvARB_(Imports.WindowPos2fvARB_);
        public static Delegates.WindowPos2iARB WindowPos2iARB = new Delegates.WindowPos2iARB(Imports.WindowPos2iARB);
        public static Delegates.WindowPos2ivARB_ WindowPos2ivARB_ = new Delegates.WindowPos2ivARB_(Imports.WindowPos2ivARB_);
        public static Delegates.WindowPos2sARB WindowPos2sARB = new Delegates.WindowPos2sARB(Imports.WindowPos2sARB);
        public static Delegates.WindowPos2svARB_ WindowPos2svARB_ = new Delegates.WindowPos2svARB_(Imports.WindowPos2svARB_);
        public static Delegates.WindowPos3dARB WindowPos3dARB = new Delegates.WindowPos3dARB(Imports.WindowPos3dARB);
        public static Delegates.WindowPos3dvARB_ WindowPos3dvARB_ = new Delegates.WindowPos3dvARB_(Imports.WindowPos3dvARB_);
        public static Delegates.WindowPos3fARB WindowPos3fARB = new Delegates.WindowPos3fARB(Imports.WindowPos3fARB);
        public static Delegates.WindowPos3fvARB_ WindowPos3fvARB_ = new Delegates.WindowPos3fvARB_(Imports.WindowPos3fvARB_);
        public static Delegates.WindowPos3iARB WindowPos3iARB = new Delegates.WindowPos3iARB(Imports.WindowPos3iARB);
        public static Delegates.WindowPos3ivARB_ WindowPos3ivARB_ = new Delegates.WindowPos3ivARB_(Imports.WindowPos3ivARB_);
        public static Delegates.WindowPos3sARB WindowPos3sARB = new Delegates.WindowPos3sARB(Imports.WindowPos3sARB);
        public static Delegates.WindowPos3svARB_ WindowPos3svARB_ = new Delegates.WindowPos3svARB_(Imports.WindowPos3svARB_);
        public static Delegates.VertexAttrib1dARB VertexAttrib1dARB = new Delegates.VertexAttrib1dARB(Imports.VertexAttrib1dARB);
        public static Delegates.VertexAttrib1dvARB_ VertexAttrib1dvARB_ = new Delegates.VertexAttrib1dvARB_(Imports.VertexAttrib1dvARB_);
        public static Delegates.VertexAttrib1fARB VertexAttrib1fARB = new Delegates.VertexAttrib1fARB(Imports.VertexAttrib1fARB);
        public static Delegates.VertexAttrib1fvARB_ VertexAttrib1fvARB_ = new Delegates.VertexAttrib1fvARB_(Imports.VertexAttrib1fvARB_);
        public static Delegates.VertexAttrib1sARB VertexAttrib1sARB = new Delegates.VertexAttrib1sARB(Imports.VertexAttrib1sARB);
        public static Delegates.VertexAttrib1svARB_ VertexAttrib1svARB_ = new Delegates.VertexAttrib1svARB_(Imports.VertexAttrib1svARB_);
        public static Delegates.VertexAttrib2dARB VertexAttrib2dARB = new Delegates.VertexAttrib2dARB(Imports.VertexAttrib2dARB);
        public static Delegates.VertexAttrib2dvARB_ VertexAttrib2dvARB_ = new Delegates.VertexAttrib2dvARB_(Imports.VertexAttrib2dvARB_);
        public static Delegates.VertexAttrib2fARB VertexAttrib2fARB = new Delegates.VertexAttrib2fARB(Imports.VertexAttrib2fARB);
        public static Delegates.VertexAttrib2fvARB_ VertexAttrib2fvARB_ = new Delegates.VertexAttrib2fvARB_(Imports.VertexAttrib2fvARB_);
        public static Delegates.VertexAttrib2sARB VertexAttrib2sARB = new Delegates.VertexAttrib2sARB(Imports.VertexAttrib2sARB);
        public static Delegates.VertexAttrib2svARB_ VertexAttrib2svARB_ = new Delegates.VertexAttrib2svARB_(Imports.VertexAttrib2svARB_);
        public static Delegates.VertexAttrib3dARB VertexAttrib3dARB = new Delegates.VertexAttrib3dARB(Imports.VertexAttrib3dARB);
        public static Delegates.VertexAttrib3dvARB_ VertexAttrib3dvARB_ = new Delegates.VertexAttrib3dvARB_(Imports.VertexAttrib3dvARB_);
        public static Delegates.VertexAttrib3fARB VertexAttrib3fARB = new Delegates.VertexAttrib3fARB(Imports.VertexAttrib3fARB);
        public static Delegates.VertexAttrib3fvARB_ VertexAttrib3fvARB_ = new Delegates.VertexAttrib3fvARB_(Imports.VertexAttrib3fvARB_);
        public static Delegates.VertexAttrib3sARB VertexAttrib3sARB = new Delegates.VertexAttrib3sARB(Imports.VertexAttrib3sARB);
        public static Delegates.VertexAttrib3svARB_ VertexAttrib3svARB_ = new Delegates.VertexAttrib3svARB_(Imports.VertexAttrib3svARB_);
        public static Delegates.VertexAttrib4NbvARB_ VertexAttrib4NbvARB_ = new Delegates.VertexAttrib4NbvARB_(Imports.VertexAttrib4NbvARB_);
        public static Delegates.VertexAttrib4NivARB_ VertexAttrib4NivARB_ = new Delegates.VertexAttrib4NivARB_(Imports.VertexAttrib4NivARB_);
        public static Delegates.VertexAttrib4NsvARB_ VertexAttrib4NsvARB_ = new Delegates.VertexAttrib4NsvARB_(Imports.VertexAttrib4NsvARB_);
        public static Delegates.VertexAttrib4NubARB VertexAttrib4NubARB = new Delegates.VertexAttrib4NubARB(Imports.VertexAttrib4NubARB);
        public static Delegates.VertexAttrib4NubvARB_ VertexAttrib4NubvARB_ = new Delegates.VertexAttrib4NubvARB_(Imports.VertexAttrib4NubvARB_);
        public static Delegates.VertexAttrib4NuivARB_ VertexAttrib4NuivARB_ = new Delegates.VertexAttrib4NuivARB_(Imports.VertexAttrib4NuivARB_);
        public static Delegates.VertexAttrib4NusvARB_ VertexAttrib4NusvARB_ = new Delegates.VertexAttrib4NusvARB_(Imports.VertexAttrib4NusvARB_);
        public static Delegates.VertexAttrib4bvARB_ VertexAttrib4bvARB_ = new Delegates.VertexAttrib4bvARB_(Imports.VertexAttrib4bvARB_);
        public static Delegates.VertexAttrib4dARB VertexAttrib4dARB = new Delegates.VertexAttrib4dARB(Imports.VertexAttrib4dARB);
        public static Delegates.VertexAttrib4dvARB_ VertexAttrib4dvARB_ = new Delegates.VertexAttrib4dvARB_(Imports.VertexAttrib4dvARB_);
        public static Delegates.VertexAttrib4fARB VertexAttrib4fARB = new Delegates.VertexAttrib4fARB(Imports.VertexAttrib4fARB);
        public static Delegates.VertexAttrib4fvARB_ VertexAttrib4fvARB_ = new Delegates.VertexAttrib4fvARB_(Imports.VertexAttrib4fvARB_);
        public static Delegates.VertexAttrib4ivARB_ VertexAttrib4ivARB_ = new Delegates.VertexAttrib4ivARB_(Imports.VertexAttrib4ivARB_);
        public static Delegates.VertexAttrib4sARB VertexAttrib4sARB = new Delegates.VertexAttrib4sARB(Imports.VertexAttrib4sARB);
        public static Delegates.VertexAttrib4svARB_ VertexAttrib4svARB_ = new Delegates.VertexAttrib4svARB_(Imports.VertexAttrib4svARB_);
        public static Delegates.VertexAttrib4ubvARB_ VertexAttrib4ubvARB_ = new Delegates.VertexAttrib4ubvARB_(Imports.VertexAttrib4ubvARB_);
        public static Delegates.VertexAttrib4uivARB_ VertexAttrib4uivARB_ = new Delegates.VertexAttrib4uivARB_(Imports.VertexAttrib4uivARB_);
        public static Delegates.VertexAttrib4usvARB_ VertexAttrib4usvARB_ = new Delegates.VertexAttrib4usvARB_(Imports.VertexAttrib4usvARB_);
        public static Delegates.VertexAttribPointerARB_ VertexAttribPointerARB_ = new Delegates.VertexAttribPointerARB_(Imports.VertexAttribPointerARB_);
        public static Delegates.EnableVertexAttribArrayARB EnableVertexAttribArrayARB = new Delegates.EnableVertexAttribArrayARB(Imports.EnableVertexAttribArrayARB);
        public static Delegates.DisableVertexAttribArrayARB DisableVertexAttribArrayARB = new Delegates.DisableVertexAttribArrayARB(Imports.DisableVertexAttribArrayARB);
        public static Delegates.ProgramStringARB_ ProgramStringARB_ = new Delegates.ProgramStringARB_(Imports.ProgramStringARB_);
        public static Delegates.BindProgramARB BindProgramARB = new Delegates.BindProgramARB(Imports.BindProgramARB);
        public static Delegates.DeleteProgramsARB_ DeleteProgramsARB_ = new Delegates.DeleteProgramsARB_(Imports.DeleteProgramsARB_);
        public static Delegates.GenProgramsARB_ GenProgramsARB_ = new Delegates.GenProgramsARB_(Imports.GenProgramsARB_);
        public static Delegates.ProgramEnvParameter4dARB ProgramEnvParameter4dARB = new Delegates.ProgramEnvParameter4dARB(Imports.ProgramEnvParameter4dARB);
        public static Delegates.ProgramEnvParameter4dvARB_ ProgramEnvParameter4dvARB_ = new Delegates.ProgramEnvParameter4dvARB_(Imports.ProgramEnvParameter4dvARB_);
        public static Delegates.ProgramEnvParameter4fARB ProgramEnvParameter4fARB = new Delegates.ProgramEnvParameter4fARB(Imports.ProgramEnvParameter4fARB);
        public static Delegates.ProgramEnvParameter4fvARB_ ProgramEnvParameter4fvARB_ = new Delegates.ProgramEnvParameter4fvARB_(Imports.ProgramEnvParameter4fvARB_);
        public static Delegates.ProgramLocalParameter4dARB ProgramLocalParameter4dARB = new Delegates.ProgramLocalParameter4dARB(Imports.ProgramLocalParameter4dARB);
        public static Delegates.ProgramLocalParameter4dvARB_ ProgramLocalParameter4dvARB_ = new Delegates.ProgramLocalParameter4dvARB_(Imports.ProgramLocalParameter4dvARB_);
        public static Delegates.ProgramLocalParameter4fARB ProgramLocalParameter4fARB = new Delegates.ProgramLocalParameter4fARB(Imports.ProgramLocalParameter4fARB);
        public static Delegates.ProgramLocalParameter4fvARB_ ProgramLocalParameter4fvARB_ = new Delegates.ProgramLocalParameter4fvARB_(Imports.ProgramLocalParameter4fvARB_);
        public static Delegates.GetProgramEnvParameterdvARB_ GetProgramEnvParameterdvARB_ = new Delegates.GetProgramEnvParameterdvARB_(Imports.GetProgramEnvParameterdvARB_);
        public static Delegates.GetProgramEnvParameterfvARB_ GetProgramEnvParameterfvARB_ = new Delegates.GetProgramEnvParameterfvARB_(Imports.GetProgramEnvParameterfvARB_);
        public static Delegates.GetProgramLocalParameterdvARB_ GetProgramLocalParameterdvARB_ = new Delegates.GetProgramLocalParameterdvARB_(Imports.GetProgramLocalParameterdvARB_);
        public static Delegates.GetProgramLocalParameterfvARB_ GetProgramLocalParameterfvARB_ = new Delegates.GetProgramLocalParameterfvARB_(Imports.GetProgramLocalParameterfvARB_);
        public static Delegates.GetProgramivARB_ GetProgramivARB_ = new Delegates.GetProgramivARB_(Imports.GetProgramivARB_);
        public static Delegates.GetProgramStringARB_ GetProgramStringARB_ = new Delegates.GetProgramStringARB_(Imports.GetProgramStringARB_);
        public static Delegates.GetVertexAttribdvARB_ GetVertexAttribdvARB_ = new Delegates.GetVertexAttribdvARB_(Imports.GetVertexAttribdvARB_);
        public static Delegates.GetVertexAttribfvARB_ GetVertexAttribfvARB_ = new Delegates.GetVertexAttribfvARB_(Imports.GetVertexAttribfvARB_);
        public static Delegates.GetVertexAttribivARB_ GetVertexAttribivARB_ = new Delegates.GetVertexAttribivARB_(Imports.GetVertexAttribivARB_);
        public static Delegates.GetVertexAttribPointervARB_ GetVertexAttribPointervARB_ = new Delegates.GetVertexAttribPointervARB_(Imports.GetVertexAttribPointervARB_);
        public static Delegates.IsProgramARB IsProgramARB = new Delegates.IsProgramARB(Imports.IsProgramARB);
        public static Delegates.BindBufferARB BindBufferARB = new Delegates.BindBufferARB(Imports.BindBufferARB);
        public static Delegates.DeleteBuffersARB_ DeleteBuffersARB_ = new Delegates.DeleteBuffersARB_(Imports.DeleteBuffersARB_);
        public static Delegates.GenBuffersARB_ GenBuffersARB_ = new Delegates.GenBuffersARB_(Imports.GenBuffersARB_);
        public static Delegates.IsBufferARB IsBufferARB = new Delegates.IsBufferARB(Imports.IsBufferARB);
        public static Delegates.BufferDataARB_ BufferDataARB_ = new Delegates.BufferDataARB_(Imports.BufferDataARB_);
        public static Delegates.BufferSubDataARB_ BufferSubDataARB_ = new Delegates.BufferSubDataARB_(Imports.BufferSubDataARB_);
        public static Delegates.GetBufferSubDataARB_ GetBufferSubDataARB_ = new Delegates.GetBufferSubDataARB_(Imports.GetBufferSubDataARB_);
        public static Delegates.MapBufferARB MapBufferARB = new Delegates.MapBufferARB(Imports.MapBufferARB);
        public static Delegates.UnmapBufferARB UnmapBufferARB = new Delegates.UnmapBufferARB(Imports.UnmapBufferARB);
        public static Delegates.GetBufferParameterivARB_ GetBufferParameterivARB_ = new Delegates.GetBufferParameterivARB_(Imports.GetBufferParameterivARB_);
        public static Delegates.GetBufferPointervARB_ GetBufferPointervARB_ = new Delegates.GetBufferPointervARB_(Imports.GetBufferPointervARB_);
        public static Delegates.GenQueriesARB_ GenQueriesARB_ = new Delegates.GenQueriesARB_(Imports.GenQueriesARB_);
        public static Delegates.DeleteQueriesARB_ DeleteQueriesARB_ = new Delegates.DeleteQueriesARB_(Imports.DeleteQueriesARB_);
        public static Delegates.IsQueryARB IsQueryARB = new Delegates.IsQueryARB(Imports.IsQueryARB);
        public static Delegates.BeginQueryARB BeginQueryARB = new Delegates.BeginQueryARB(Imports.BeginQueryARB);
        public static Delegates.EndQueryARB EndQueryARB = new Delegates.EndQueryARB(Imports.EndQueryARB);
        public static Delegates.GetQueryivARB_ GetQueryivARB_ = new Delegates.GetQueryivARB_(Imports.GetQueryivARB_);
        public static Delegates.GetQueryObjectivARB_ GetQueryObjectivARB_ = new Delegates.GetQueryObjectivARB_(Imports.GetQueryObjectivARB_);
        public static Delegates.GetQueryObjectuivARB_ GetQueryObjectuivARB_ = new Delegates.GetQueryObjectuivARB_(Imports.GetQueryObjectuivARB_);
        public static Delegates.DeleteObjectARB DeleteObjectARB = new Delegates.DeleteObjectARB(Imports.DeleteObjectARB);
        public static Delegates.GetHandleARB GetHandleARB = new Delegates.GetHandleARB(Imports.GetHandleARB);
        public static Delegates.DetachObjectARB DetachObjectARB = new Delegates.DetachObjectARB(Imports.DetachObjectARB);
        public static Delegates.CreateShaderObjectARB CreateShaderObjectARB = new Delegates.CreateShaderObjectARB(Imports.CreateShaderObjectARB);
        public static Delegates.ShaderSourceARB_ ShaderSourceARB_ = new Delegates.ShaderSourceARB_(Imports.ShaderSourceARB_);
        public static Delegates.CompileShaderARB CompileShaderARB = new Delegates.CompileShaderARB(Imports.CompileShaderARB);
        public static Delegates.CreateProgramObjectARB CreateProgramObjectARB = new Delegates.CreateProgramObjectARB(Imports.CreateProgramObjectARB);
        public static Delegates.AttachObjectARB AttachObjectARB = new Delegates.AttachObjectARB(Imports.AttachObjectARB);
        public static Delegates.LinkProgramARB LinkProgramARB = new Delegates.LinkProgramARB(Imports.LinkProgramARB);
        public static Delegates.UseProgramObjectARB UseProgramObjectARB = new Delegates.UseProgramObjectARB(Imports.UseProgramObjectARB);
        public static Delegates.ValidateProgramARB ValidateProgramARB = new Delegates.ValidateProgramARB(Imports.ValidateProgramARB);
        public static Delegates.Uniform1fARB Uniform1fARB = new Delegates.Uniform1fARB(Imports.Uniform1fARB);
        public static Delegates.Uniform2fARB Uniform2fARB = new Delegates.Uniform2fARB(Imports.Uniform2fARB);
        public static Delegates.Uniform3fARB Uniform3fARB = new Delegates.Uniform3fARB(Imports.Uniform3fARB);
        public static Delegates.Uniform4fARB Uniform4fARB = new Delegates.Uniform4fARB(Imports.Uniform4fARB);
        public static Delegates.Uniform1iARB Uniform1iARB = new Delegates.Uniform1iARB(Imports.Uniform1iARB);
        public static Delegates.Uniform2iARB Uniform2iARB = new Delegates.Uniform2iARB(Imports.Uniform2iARB);
        public static Delegates.Uniform3iARB Uniform3iARB = new Delegates.Uniform3iARB(Imports.Uniform3iARB);
        public static Delegates.Uniform4iARB Uniform4iARB = new Delegates.Uniform4iARB(Imports.Uniform4iARB);
        public static Delegates.Uniform1fvARB_ Uniform1fvARB_ = new Delegates.Uniform1fvARB_(Imports.Uniform1fvARB_);
        public static Delegates.Uniform2fvARB_ Uniform2fvARB_ = new Delegates.Uniform2fvARB_(Imports.Uniform2fvARB_);
        public static Delegates.Uniform3fvARB_ Uniform3fvARB_ = new Delegates.Uniform3fvARB_(Imports.Uniform3fvARB_);
        public static Delegates.Uniform4fvARB_ Uniform4fvARB_ = new Delegates.Uniform4fvARB_(Imports.Uniform4fvARB_);
        public static Delegates.Uniform1ivARB_ Uniform1ivARB_ = new Delegates.Uniform1ivARB_(Imports.Uniform1ivARB_);
        public static Delegates.Uniform2ivARB_ Uniform2ivARB_ = new Delegates.Uniform2ivARB_(Imports.Uniform2ivARB_);
        public static Delegates.Uniform3ivARB_ Uniform3ivARB_ = new Delegates.Uniform3ivARB_(Imports.Uniform3ivARB_);
        public static Delegates.Uniform4ivARB_ Uniform4ivARB_ = new Delegates.Uniform4ivARB_(Imports.Uniform4ivARB_);
        public static Delegates.UniformMatrix2fvARB_ UniformMatrix2fvARB_ = new Delegates.UniformMatrix2fvARB_(Imports.UniformMatrix2fvARB_);
        public static Delegates.UniformMatrix3fvARB_ UniformMatrix3fvARB_ = new Delegates.UniformMatrix3fvARB_(Imports.UniformMatrix3fvARB_);
        public static Delegates.UniformMatrix4fvARB_ UniformMatrix4fvARB_ = new Delegates.UniformMatrix4fvARB_(Imports.UniformMatrix4fvARB_);
        public static Delegates.GetObjectParameterfvARB_ GetObjectParameterfvARB_ = new Delegates.GetObjectParameterfvARB_(Imports.GetObjectParameterfvARB_);
        public static Delegates.GetObjectParameterivARB_ GetObjectParameterivARB_ = new Delegates.GetObjectParameterivARB_(Imports.GetObjectParameterivARB_);
        public static Delegates.GetInfoLogARB_ GetInfoLogARB_ = new Delegates.GetInfoLogARB_(Imports.GetInfoLogARB_);
        public static Delegates.GetAttachedObjectsARB_ GetAttachedObjectsARB_ = new Delegates.GetAttachedObjectsARB_(Imports.GetAttachedObjectsARB_);
        public static Delegates.GetUniformLocationARB GetUniformLocationARB = new Delegates.GetUniformLocationARB(Imports.GetUniformLocationARB);
        public static Delegates.GetActiveUniformARB_ GetActiveUniformARB_ = new Delegates.GetActiveUniformARB_(Imports.GetActiveUniformARB_);
        public static Delegates.GetUniformfvARB_ GetUniformfvARB_ = new Delegates.GetUniformfvARB_(Imports.GetUniformfvARB_);
        public static Delegates.GetUniformivARB_ GetUniformivARB_ = new Delegates.GetUniformivARB_(Imports.GetUniformivARB_);
        public static Delegates.GetShaderSourceARB_ GetShaderSourceARB_ = new Delegates.GetShaderSourceARB_(Imports.GetShaderSourceARB_);
        public static Delegates.BindAttribLocationARB BindAttribLocationARB = new Delegates.BindAttribLocationARB(Imports.BindAttribLocationARB);
        public static Delegates.GetActiveAttribARB_ GetActiveAttribARB_ = new Delegates.GetActiveAttribARB_(Imports.GetActiveAttribARB_);
        public static Delegates.GetAttribLocationARB GetAttribLocationARB = new Delegates.GetAttribLocationARB(Imports.GetAttribLocationARB);
        public static Delegates.DrawBuffersARB_ DrawBuffersARB_ = new Delegates.DrawBuffersARB_(Imports.DrawBuffersARB_);
        public static Delegates.ClampColorARB ClampColorARB = new Delegates.ClampColorARB(Imports.ClampColorARB);
        public static Delegates.BlendColorEXT BlendColorEXT = new Delegates.BlendColorEXT(Imports.BlendColorEXT);
        public static Delegates.PolygonOffsetEXT PolygonOffsetEXT = new Delegates.PolygonOffsetEXT(Imports.PolygonOffsetEXT);
        public static Delegates.TexImage3DEXT_ TexImage3DEXT_ = new Delegates.TexImage3DEXT_(Imports.TexImage3DEXT_);
        public static Delegates.TexSubImage3DEXT_ TexSubImage3DEXT_ = new Delegates.TexSubImage3DEXT_(Imports.TexSubImage3DEXT_);
        public static Delegates.GetTexFilterFuncSGIS_ GetTexFilterFuncSGIS_ = new Delegates.GetTexFilterFuncSGIS_(Imports.GetTexFilterFuncSGIS_);
        public static Delegates.TexFilterFuncSGIS_ TexFilterFuncSGIS_ = new Delegates.TexFilterFuncSGIS_(Imports.TexFilterFuncSGIS_);
        public static Delegates.TexSubImage1DEXT_ TexSubImage1DEXT_ = new Delegates.TexSubImage1DEXT_(Imports.TexSubImage1DEXT_);
        public static Delegates.TexSubImage2DEXT_ TexSubImage2DEXT_ = new Delegates.TexSubImage2DEXT_(Imports.TexSubImage2DEXT_);
        public static Delegates.CopyTexImage1DEXT CopyTexImage1DEXT = new Delegates.CopyTexImage1DEXT(Imports.CopyTexImage1DEXT);
        public static Delegates.CopyTexImage2DEXT CopyTexImage2DEXT = new Delegates.CopyTexImage2DEXT(Imports.CopyTexImage2DEXT);
        public static Delegates.CopyTexSubImage1DEXT CopyTexSubImage1DEXT = new Delegates.CopyTexSubImage1DEXT(Imports.CopyTexSubImage1DEXT);
        public static Delegates.CopyTexSubImage2DEXT CopyTexSubImage2DEXT = new Delegates.CopyTexSubImage2DEXT(Imports.CopyTexSubImage2DEXT);
        public static Delegates.CopyTexSubImage3DEXT CopyTexSubImage3DEXT = new Delegates.CopyTexSubImage3DEXT(Imports.CopyTexSubImage3DEXT);
        public static Delegates.GetHistogramEXT_ GetHistogramEXT_ = new Delegates.GetHistogramEXT_(Imports.GetHistogramEXT_);
        public static Delegates.GetHistogramParameterfvEXT_ GetHistogramParameterfvEXT_ = new Delegates.GetHistogramParameterfvEXT_(Imports.GetHistogramParameterfvEXT_);
        public static Delegates.GetHistogramParameterivEXT_ GetHistogramParameterivEXT_ = new Delegates.GetHistogramParameterivEXT_(Imports.GetHistogramParameterivEXT_);
        public static Delegates.GetMinmaxEXT_ GetMinmaxEXT_ = new Delegates.GetMinmaxEXT_(Imports.GetMinmaxEXT_);
        public static Delegates.GetMinmaxParameterfvEXT_ GetMinmaxParameterfvEXT_ = new Delegates.GetMinmaxParameterfvEXT_(Imports.GetMinmaxParameterfvEXT_);
        public static Delegates.GetMinmaxParameterivEXT_ GetMinmaxParameterivEXT_ = new Delegates.GetMinmaxParameterivEXT_(Imports.GetMinmaxParameterivEXT_);
        public static Delegates.HistogramEXT HistogramEXT = new Delegates.HistogramEXT(Imports.HistogramEXT);
        public static Delegates.MinmaxEXT MinmaxEXT = new Delegates.MinmaxEXT(Imports.MinmaxEXT);
        public static Delegates.ResetHistogramEXT ResetHistogramEXT = new Delegates.ResetHistogramEXT(Imports.ResetHistogramEXT);
        public static Delegates.ResetMinmaxEXT ResetMinmaxEXT = new Delegates.ResetMinmaxEXT(Imports.ResetMinmaxEXT);
        public static Delegates.ConvolutionFilter1DEXT_ ConvolutionFilter1DEXT_ = new Delegates.ConvolutionFilter1DEXT_(Imports.ConvolutionFilter1DEXT_);
        public static Delegates.ConvolutionFilter2DEXT_ ConvolutionFilter2DEXT_ = new Delegates.ConvolutionFilter2DEXT_(Imports.ConvolutionFilter2DEXT_);
        public static Delegates.ConvolutionParameterfEXT ConvolutionParameterfEXT = new Delegates.ConvolutionParameterfEXT(Imports.ConvolutionParameterfEXT);
        public static Delegates.ConvolutionParameterfvEXT_ ConvolutionParameterfvEXT_ = new Delegates.ConvolutionParameterfvEXT_(Imports.ConvolutionParameterfvEXT_);
        public static Delegates.ConvolutionParameteriEXT ConvolutionParameteriEXT = new Delegates.ConvolutionParameteriEXT(Imports.ConvolutionParameteriEXT);
        public static Delegates.ConvolutionParameterivEXT_ ConvolutionParameterivEXT_ = new Delegates.ConvolutionParameterivEXT_(Imports.ConvolutionParameterivEXT_);
        public static Delegates.CopyConvolutionFilter1DEXT CopyConvolutionFilter1DEXT = new Delegates.CopyConvolutionFilter1DEXT(Imports.CopyConvolutionFilter1DEXT);
        public static Delegates.CopyConvolutionFilter2DEXT CopyConvolutionFilter2DEXT = new Delegates.CopyConvolutionFilter2DEXT(Imports.CopyConvolutionFilter2DEXT);
        public static Delegates.GetConvolutionFilterEXT_ GetConvolutionFilterEXT_ = new Delegates.GetConvolutionFilterEXT_(Imports.GetConvolutionFilterEXT_);
        public static Delegates.GetConvolutionParameterfvEXT_ GetConvolutionParameterfvEXT_ = new Delegates.GetConvolutionParameterfvEXT_(Imports.GetConvolutionParameterfvEXT_);
        public static Delegates.GetConvolutionParameterivEXT_ GetConvolutionParameterivEXT_ = new Delegates.GetConvolutionParameterivEXT_(Imports.GetConvolutionParameterivEXT_);
        public static Delegates.GetSeparableFilterEXT_ GetSeparableFilterEXT_ = new Delegates.GetSeparableFilterEXT_(Imports.GetSeparableFilterEXT_);
        public static Delegates.SeparableFilter2DEXT_ SeparableFilter2DEXT_ = new Delegates.SeparableFilter2DEXT_(Imports.SeparableFilter2DEXT_);
        public static Delegates.ColorTableSGI_ ColorTableSGI_ = new Delegates.ColorTableSGI_(Imports.ColorTableSGI_);
        public static Delegates.ColorTableParameterfvSGI_ ColorTableParameterfvSGI_ = new Delegates.ColorTableParameterfvSGI_(Imports.ColorTableParameterfvSGI_);
        public static Delegates.ColorTableParameterivSGI_ ColorTableParameterivSGI_ = new Delegates.ColorTableParameterivSGI_(Imports.ColorTableParameterivSGI_);
        public static Delegates.CopyColorTableSGI CopyColorTableSGI = new Delegates.CopyColorTableSGI(Imports.CopyColorTableSGI);
        public static Delegates.GetColorTableSGI_ GetColorTableSGI_ = new Delegates.GetColorTableSGI_(Imports.GetColorTableSGI_);
        public static Delegates.GetColorTableParameterfvSGI_ GetColorTableParameterfvSGI_ = new Delegates.GetColorTableParameterfvSGI_(Imports.GetColorTableParameterfvSGI_);
        public static Delegates.GetColorTableParameterivSGI_ GetColorTableParameterivSGI_ = new Delegates.GetColorTableParameterivSGI_(Imports.GetColorTableParameterivSGI_);
        public static Delegates.PixelTexGenSGIX PixelTexGenSGIX = new Delegates.PixelTexGenSGIX(Imports.PixelTexGenSGIX);
        public static Delegates.PixelTexGenParameteriSGIS PixelTexGenParameteriSGIS = new Delegates.PixelTexGenParameteriSGIS(Imports.PixelTexGenParameteriSGIS);
        public static Delegates.PixelTexGenParameterivSGIS_ PixelTexGenParameterivSGIS_ = new Delegates.PixelTexGenParameterivSGIS_(Imports.PixelTexGenParameterivSGIS_);
        public static Delegates.PixelTexGenParameterfSGIS PixelTexGenParameterfSGIS = new Delegates.PixelTexGenParameterfSGIS(Imports.PixelTexGenParameterfSGIS);
        public static Delegates.PixelTexGenParameterfvSGIS_ PixelTexGenParameterfvSGIS_ = new Delegates.PixelTexGenParameterfvSGIS_(Imports.PixelTexGenParameterfvSGIS_);
        public static Delegates.GetPixelTexGenParameterivSGIS_ GetPixelTexGenParameterivSGIS_ = new Delegates.GetPixelTexGenParameterivSGIS_(Imports.GetPixelTexGenParameterivSGIS_);
        public static Delegates.GetPixelTexGenParameterfvSGIS_ GetPixelTexGenParameterfvSGIS_ = new Delegates.GetPixelTexGenParameterfvSGIS_(Imports.GetPixelTexGenParameterfvSGIS_);
        public static Delegates.TexImage4DSGIS_ TexImage4DSGIS_ = new Delegates.TexImage4DSGIS_(Imports.TexImage4DSGIS_);
        public static Delegates.TexSubImage4DSGIS_ TexSubImage4DSGIS_ = new Delegates.TexSubImage4DSGIS_(Imports.TexSubImage4DSGIS_);
        public static Delegates.AreTexturesResidentEXT_ AreTexturesResidentEXT_ = new Delegates.AreTexturesResidentEXT_(Imports.AreTexturesResidentEXT_);
        public static Delegates.BindTextureEXT BindTextureEXT = new Delegates.BindTextureEXT(Imports.BindTextureEXT);
        public static Delegates.DeleteTexturesEXT_ DeleteTexturesEXT_ = new Delegates.DeleteTexturesEXT_(Imports.DeleteTexturesEXT_);
        public static Delegates.GenTexturesEXT_ GenTexturesEXT_ = new Delegates.GenTexturesEXT_(Imports.GenTexturesEXT_);
        public static Delegates.IsTextureEXT IsTextureEXT = new Delegates.IsTextureEXT(Imports.IsTextureEXT);
        public static Delegates.PrioritizeTexturesEXT_ PrioritizeTexturesEXT_ = new Delegates.PrioritizeTexturesEXT_(Imports.PrioritizeTexturesEXT_);
        public static Delegates.DetailTexFuncSGIS_ DetailTexFuncSGIS_ = new Delegates.DetailTexFuncSGIS_(Imports.DetailTexFuncSGIS_);
        public static Delegates.GetDetailTexFuncSGIS_ GetDetailTexFuncSGIS_ = new Delegates.GetDetailTexFuncSGIS_(Imports.GetDetailTexFuncSGIS_);
        public static Delegates.SharpenTexFuncSGIS_ SharpenTexFuncSGIS_ = new Delegates.SharpenTexFuncSGIS_(Imports.SharpenTexFuncSGIS_);
        public static Delegates.GetSharpenTexFuncSGIS_ GetSharpenTexFuncSGIS_ = new Delegates.GetSharpenTexFuncSGIS_(Imports.GetSharpenTexFuncSGIS_);
        public static Delegates.SampleMaskSGIS SampleMaskSGIS = new Delegates.SampleMaskSGIS(Imports.SampleMaskSGIS);
        public static Delegates.SamplePatternSGIS SamplePatternSGIS = new Delegates.SamplePatternSGIS(Imports.SamplePatternSGIS);
        public static Delegates.ArrayElementEXT ArrayElementEXT = new Delegates.ArrayElementEXT(Imports.ArrayElementEXT);
        public static Delegates.ColorPointerEXT_ ColorPointerEXT_ = new Delegates.ColorPointerEXT_(Imports.ColorPointerEXT_);
        public static Delegates.DrawArraysEXT DrawArraysEXT = new Delegates.DrawArraysEXT(Imports.DrawArraysEXT);
        public static Delegates.EdgeFlagPointerEXT_ EdgeFlagPointerEXT_ = new Delegates.EdgeFlagPointerEXT_(Imports.EdgeFlagPointerEXT_);
        public static Delegates.GetPointervEXT_ GetPointervEXT_ = new Delegates.GetPointervEXT_(Imports.GetPointervEXT_);
        public static Delegates.IndexPointerEXT_ IndexPointerEXT_ = new Delegates.IndexPointerEXT_(Imports.IndexPointerEXT_);
        public static Delegates.NormalPointerEXT_ NormalPointerEXT_ = new Delegates.NormalPointerEXT_(Imports.NormalPointerEXT_);
        public static Delegates.TexCoordPointerEXT_ TexCoordPointerEXT_ = new Delegates.TexCoordPointerEXT_(Imports.TexCoordPointerEXT_);
        public static Delegates.VertexPointerEXT_ VertexPointerEXT_ = new Delegates.VertexPointerEXT_(Imports.VertexPointerEXT_);
        public static Delegates.BlendEquationEXT BlendEquationEXT = new Delegates.BlendEquationEXT(Imports.BlendEquationEXT);
        public static Delegates.SpriteParameterfSGIX SpriteParameterfSGIX = new Delegates.SpriteParameterfSGIX(Imports.SpriteParameterfSGIX);
        public static Delegates.SpriteParameterfvSGIX_ SpriteParameterfvSGIX_ = new Delegates.SpriteParameterfvSGIX_(Imports.SpriteParameterfvSGIX_);
        public static Delegates.SpriteParameteriSGIX SpriteParameteriSGIX = new Delegates.SpriteParameteriSGIX(Imports.SpriteParameteriSGIX);
        public static Delegates.SpriteParameterivSGIX_ SpriteParameterivSGIX_ = new Delegates.SpriteParameterivSGIX_(Imports.SpriteParameterivSGIX_);
        public static Delegates.PointParameterfEXT PointParameterfEXT = new Delegates.PointParameterfEXT(Imports.PointParameterfEXT);
        public static Delegates.PointParameterfvEXT_ PointParameterfvEXT_ = new Delegates.PointParameterfvEXT_(Imports.PointParameterfvEXT_);
        public static Delegates.PointParameterfSGIS PointParameterfSGIS = new Delegates.PointParameterfSGIS(Imports.PointParameterfSGIS);
        public static Delegates.PointParameterfvSGIS_ PointParameterfvSGIS_ = new Delegates.PointParameterfvSGIS_(Imports.PointParameterfvSGIS_);
        public static Delegates.GetInstrumentsSGIX GetInstrumentsSGIX = new Delegates.GetInstrumentsSGIX(Imports.GetInstrumentsSGIX);
        public static Delegates.InstrumentsBufferSGIX_ InstrumentsBufferSGIX_ = new Delegates.InstrumentsBufferSGIX_(Imports.InstrumentsBufferSGIX_);
        public static Delegates.PollInstrumentsSGIX_ PollInstrumentsSGIX_ = new Delegates.PollInstrumentsSGIX_(Imports.PollInstrumentsSGIX_);
        public static Delegates.ReadInstrumentsSGIX ReadInstrumentsSGIX = new Delegates.ReadInstrumentsSGIX(Imports.ReadInstrumentsSGIX);
        public static Delegates.StartInstrumentsSGIX StartInstrumentsSGIX = new Delegates.StartInstrumentsSGIX(Imports.StartInstrumentsSGIX);
        public static Delegates.StopInstrumentsSGIX StopInstrumentsSGIX = new Delegates.StopInstrumentsSGIX(Imports.StopInstrumentsSGIX);
        public static Delegates.FrameZoomSGIX FrameZoomSGIX = new Delegates.FrameZoomSGIX(Imports.FrameZoomSGIX);
        public static Delegates.TagSampleBufferSGIX TagSampleBufferSGIX = new Delegates.TagSampleBufferSGIX(Imports.TagSampleBufferSGIX);
        public static Delegates.DeformationMap3dSGIX_ DeformationMap3dSGIX_ = new Delegates.DeformationMap3dSGIX_(Imports.DeformationMap3dSGIX_);
        public static Delegates.DeformationMap3fSGIX_ DeformationMap3fSGIX_ = new Delegates.DeformationMap3fSGIX_(Imports.DeformationMap3fSGIX_);
        public static Delegates.DeformSGIX DeformSGIX = new Delegates.DeformSGIX(Imports.DeformSGIX);
        public static Delegates.LoadIdentityDeformationMapSGIX LoadIdentityDeformationMapSGIX = new Delegates.LoadIdentityDeformationMapSGIX(Imports.LoadIdentityDeformationMapSGIX);
        public static Delegates.ReferencePlaneSGIX_ ReferencePlaneSGIX_ = new Delegates.ReferencePlaneSGIX_(Imports.ReferencePlaneSGIX_);
        public static Delegates.FlushRasterSGIX FlushRasterSGIX = new Delegates.FlushRasterSGIX(Imports.FlushRasterSGIX);
        public static Delegates.FogFuncSGIS_ FogFuncSGIS_ = new Delegates.FogFuncSGIS_(Imports.FogFuncSGIS_);
        public static Delegates.GetFogFuncSGIS_ GetFogFuncSGIS_ = new Delegates.GetFogFuncSGIS_(Imports.GetFogFuncSGIS_);
        public static Delegates.ImageTransformParameteriHP ImageTransformParameteriHP = new Delegates.ImageTransformParameteriHP(Imports.ImageTransformParameteriHP);
        public static Delegates.ImageTransformParameterfHP ImageTransformParameterfHP = new Delegates.ImageTransformParameterfHP(Imports.ImageTransformParameterfHP);
        public static Delegates.ImageTransformParameterivHP_ ImageTransformParameterivHP_ = new Delegates.ImageTransformParameterivHP_(Imports.ImageTransformParameterivHP_);
        public static Delegates.ImageTransformParameterfvHP_ ImageTransformParameterfvHP_ = new Delegates.ImageTransformParameterfvHP_(Imports.ImageTransformParameterfvHP_);
        public static Delegates.GetImageTransformParameterivHP_ GetImageTransformParameterivHP_ = new Delegates.GetImageTransformParameterivHP_(Imports.GetImageTransformParameterivHP_);
        public static Delegates.GetImageTransformParameterfvHP_ GetImageTransformParameterfvHP_ = new Delegates.GetImageTransformParameterfvHP_(Imports.GetImageTransformParameterfvHP_);
        public static Delegates.ColorSubTableEXT_ ColorSubTableEXT_ = new Delegates.ColorSubTableEXT_(Imports.ColorSubTableEXT_);
        public static Delegates.CopyColorSubTableEXT CopyColorSubTableEXT = new Delegates.CopyColorSubTableEXT(Imports.CopyColorSubTableEXT);
        public static Delegates.HintPGI HintPGI = new Delegates.HintPGI(Imports.HintPGI);
        public static Delegates.ColorTableEXT_ ColorTableEXT_ = new Delegates.ColorTableEXT_(Imports.ColorTableEXT_);
        public static Delegates.GetColorTableEXT_ GetColorTableEXT_ = new Delegates.GetColorTableEXT_(Imports.GetColorTableEXT_);
        public static Delegates.GetColorTableParameterivEXT_ GetColorTableParameterivEXT_ = new Delegates.GetColorTableParameterivEXT_(Imports.GetColorTableParameterivEXT_);
        public static Delegates.GetColorTableParameterfvEXT_ GetColorTableParameterfvEXT_ = new Delegates.GetColorTableParameterfvEXT_(Imports.GetColorTableParameterfvEXT_);
        public static Delegates.GetListParameterfvSGIX_ GetListParameterfvSGIX_ = new Delegates.GetListParameterfvSGIX_(Imports.GetListParameterfvSGIX_);
        public static Delegates.GetListParameterivSGIX_ GetListParameterivSGIX_ = new Delegates.GetListParameterivSGIX_(Imports.GetListParameterivSGIX_);
        public static Delegates.ListParameterfSGIX ListParameterfSGIX = new Delegates.ListParameterfSGIX(Imports.ListParameterfSGIX);
        public static Delegates.ListParameterfvSGIX_ ListParameterfvSGIX_ = new Delegates.ListParameterfvSGIX_(Imports.ListParameterfvSGIX_);
        public static Delegates.ListParameteriSGIX ListParameteriSGIX = new Delegates.ListParameteriSGIX(Imports.ListParameteriSGIX);
        public static Delegates.ListParameterivSGIX_ ListParameterivSGIX_ = new Delegates.ListParameterivSGIX_(Imports.ListParameterivSGIX_);
        public static Delegates.IndexMaterialEXT IndexMaterialEXT = new Delegates.IndexMaterialEXT(Imports.IndexMaterialEXT);
        public static Delegates.IndexFuncEXT IndexFuncEXT = new Delegates.IndexFuncEXT(Imports.IndexFuncEXT);
        public static Delegates.LockArraysEXT LockArraysEXT = new Delegates.LockArraysEXT(Imports.LockArraysEXT);
        public static Delegates.UnlockArraysEXT UnlockArraysEXT = new Delegates.UnlockArraysEXT(Imports.UnlockArraysEXT);
        public static Delegates.CullParameterdvEXT_ CullParameterdvEXT_ = new Delegates.CullParameterdvEXT_(Imports.CullParameterdvEXT_);
        public static Delegates.CullParameterfvEXT_ CullParameterfvEXT_ = new Delegates.CullParameterfvEXT_(Imports.CullParameterfvEXT_);
        public static Delegates.FragmentColorMaterialSGIX FragmentColorMaterialSGIX = new Delegates.FragmentColorMaterialSGIX(Imports.FragmentColorMaterialSGIX);
        public static Delegates.FragmentLightfSGIX FragmentLightfSGIX = new Delegates.FragmentLightfSGIX(Imports.FragmentLightfSGIX);
        public static Delegates.FragmentLightfvSGIX_ FragmentLightfvSGIX_ = new Delegates.FragmentLightfvSGIX_(Imports.FragmentLightfvSGIX_);
        public static Delegates.FragmentLightiSGIX FragmentLightiSGIX = new Delegates.FragmentLightiSGIX(Imports.FragmentLightiSGIX);
        public static Delegates.FragmentLightivSGIX_ FragmentLightivSGIX_ = new Delegates.FragmentLightivSGIX_(Imports.FragmentLightivSGIX_);
        public static Delegates.FragmentLightModelfSGIX FragmentLightModelfSGIX = new Delegates.FragmentLightModelfSGIX(Imports.FragmentLightModelfSGIX);
        public static Delegates.FragmentLightModelfvSGIX_ FragmentLightModelfvSGIX_ = new Delegates.FragmentLightModelfvSGIX_(Imports.FragmentLightModelfvSGIX_);
        public static Delegates.FragmentLightModeliSGIX FragmentLightModeliSGIX = new Delegates.FragmentLightModeliSGIX(Imports.FragmentLightModeliSGIX);
        public static Delegates.FragmentLightModelivSGIX_ FragmentLightModelivSGIX_ = new Delegates.FragmentLightModelivSGIX_(Imports.FragmentLightModelivSGIX_);
        public static Delegates.FragmentMaterialfSGIX FragmentMaterialfSGIX = new Delegates.FragmentMaterialfSGIX(Imports.FragmentMaterialfSGIX);
        public static Delegates.FragmentMaterialfvSGIX_ FragmentMaterialfvSGIX_ = new Delegates.FragmentMaterialfvSGIX_(Imports.FragmentMaterialfvSGIX_);
        public static Delegates.FragmentMaterialiSGIX FragmentMaterialiSGIX = new Delegates.FragmentMaterialiSGIX(Imports.FragmentMaterialiSGIX);
        public static Delegates.FragmentMaterialivSGIX_ FragmentMaterialivSGIX_ = new Delegates.FragmentMaterialivSGIX_(Imports.FragmentMaterialivSGIX_);
        public static Delegates.GetFragmentLightfvSGIX_ GetFragmentLightfvSGIX_ = new Delegates.GetFragmentLightfvSGIX_(Imports.GetFragmentLightfvSGIX_);
        public static Delegates.GetFragmentLightivSGIX_ GetFragmentLightivSGIX_ = new Delegates.GetFragmentLightivSGIX_(Imports.GetFragmentLightivSGIX_);
        public static Delegates.GetFragmentMaterialfvSGIX_ GetFragmentMaterialfvSGIX_ = new Delegates.GetFragmentMaterialfvSGIX_(Imports.GetFragmentMaterialfvSGIX_);
        public static Delegates.GetFragmentMaterialivSGIX_ GetFragmentMaterialivSGIX_ = new Delegates.GetFragmentMaterialivSGIX_(Imports.GetFragmentMaterialivSGIX_);
        public static Delegates.LightEnviSGIX LightEnviSGIX = new Delegates.LightEnviSGIX(Imports.LightEnviSGIX);
        public static Delegates.DrawRangeElementsEXT_ DrawRangeElementsEXT_ = new Delegates.DrawRangeElementsEXT_(Imports.DrawRangeElementsEXT_);
        public static Delegates.ApplyTextureEXT ApplyTextureEXT = new Delegates.ApplyTextureEXT(Imports.ApplyTextureEXT);
        public static Delegates.TextureLightEXT TextureLightEXT = new Delegates.TextureLightEXT(Imports.TextureLightEXT);
        public static Delegates.TextureMaterialEXT TextureMaterialEXT = new Delegates.TextureMaterialEXT(Imports.TextureMaterialEXT);
        public static Delegates.AsyncMarkerSGIX AsyncMarkerSGIX = new Delegates.AsyncMarkerSGIX(Imports.AsyncMarkerSGIX);
        public static Delegates.FinishAsyncSGIX_ FinishAsyncSGIX_ = new Delegates.FinishAsyncSGIX_(Imports.FinishAsyncSGIX_);
        public static Delegates.PollAsyncSGIX_ PollAsyncSGIX_ = new Delegates.PollAsyncSGIX_(Imports.PollAsyncSGIX_);
        public static Delegates.GenAsyncMarkersSGIX GenAsyncMarkersSGIX = new Delegates.GenAsyncMarkersSGIX(Imports.GenAsyncMarkersSGIX);
        public static Delegates.DeleteAsyncMarkersSGIX DeleteAsyncMarkersSGIX = new Delegates.DeleteAsyncMarkersSGIX(Imports.DeleteAsyncMarkersSGIX);
        public static Delegates.IsAsyncMarkerSGIX IsAsyncMarkerSGIX = new Delegates.IsAsyncMarkerSGIX(Imports.IsAsyncMarkerSGIX);
        public static Delegates.VertexPointervINTEL_ VertexPointervINTEL_ = new Delegates.VertexPointervINTEL_(Imports.VertexPointervINTEL_);
        public static Delegates.NormalPointervINTEL_ NormalPointervINTEL_ = new Delegates.NormalPointervINTEL_(Imports.NormalPointervINTEL_);
        public static Delegates.ColorPointervINTEL_ ColorPointervINTEL_ = new Delegates.ColorPointervINTEL_(Imports.ColorPointervINTEL_);
        public static Delegates.TexCoordPointervINTEL_ TexCoordPointervINTEL_ = new Delegates.TexCoordPointervINTEL_(Imports.TexCoordPointervINTEL_);
        public static Delegates.PixelTransformParameteriEXT PixelTransformParameteriEXT = new Delegates.PixelTransformParameteriEXT(Imports.PixelTransformParameteriEXT);
        public static Delegates.PixelTransformParameterfEXT PixelTransformParameterfEXT = new Delegates.PixelTransformParameterfEXT(Imports.PixelTransformParameterfEXT);
        public static Delegates.PixelTransformParameterivEXT_ PixelTransformParameterivEXT_ = new Delegates.PixelTransformParameterivEXT_(Imports.PixelTransformParameterivEXT_);
        public static Delegates.PixelTransformParameterfvEXT_ PixelTransformParameterfvEXT_ = new Delegates.PixelTransformParameterfvEXT_(Imports.PixelTransformParameterfvEXT_);
        public static Delegates.SecondaryColor3bEXT SecondaryColor3bEXT = new Delegates.SecondaryColor3bEXT(Imports.SecondaryColor3bEXT);
        public static Delegates.SecondaryColor3bvEXT_ SecondaryColor3bvEXT_ = new Delegates.SecondaryColor3bvEXT_(Imports.SecondaryColor3bvEXT_);
        public static Delegates.SecondaryColor3dEXT SecondaryColor3dEXT = new Delegates.SecondaryColor3dEXT(Imports.SecondaryColor3dEXT);
        public static Delegates.SecondaryColor3dvEXT_ SecondaryColor3dvEXT_ = new Delegates.SecondaryColor3dvEXT_(Imports.SecondaryColor3dvEXT_);
        public static Delegates.SecondaryColor3fEXT SecondaryColor3fEXT = new Delegates.SecondaryColor3fEXT(Imports.SecondaryColor3fEXT);
        public static Delegates.SecondaryColor3fvEXT_ SecondaryColor3fvEXT_ = new Delegates.SecondaryColor3fvEXT_(Imports.SecondaryColor3fvEXT_);
        public static Delegates.SecondaryColor3iEXT SecondaryColor3iEXT = new Delegates.SecondaryColor3iEXT(Imports.SecondaryColor3iEXT);
        public static Delegates.SecondaryColor3ivEXT_ SecondaryColor3ivEXT_ = new Delegates.SecondaryColor3ivEXT_(Imports.SecondaryColor3ivEXT_);
        public static Delegates.SecondaryColor3sEXT SecondaryColor3sEXT = new Delegates.SecondaryColor3sEXT(Imports.SecondaryColor3sEXT);
        public static Delegates.SecondaryColor3svEXT_ SecondaryColor3svEXT_ = new Delegates.SecondaryColor3svEXT_(Imports.SecondaryColor3svEXT_);
        public static Delegates.SecondaryColor3ubEXT SecondaryColor3ubEXT = new Delegates.SecondaryColor3ubEXT(Imports.SecondaryColor3ubEXT);
        public static Delegates.SecondaryColor3ubvEXT_ SecondaryColor3ubvEXT_ = new Delegates.SecondaryColor3ubvEXT_(Imports.SecondaryColor3ubvEXT_);
        public static Delegates.SecondaryColor3uiEXT SecondaryColor3uiEXT = new Delegates.SecondaryColor3uiEXT(Imports.SecondaryColor3uiEXT);
        public static Delegates.SecondaryColor3uivEXT_ SecondaryColor3uivEXT_ = new Delegates.SecondaryColor3uivEXT_(Imports.SecondaryColor3uivEXT_);
        public static Delegates.SecondaryColor3usEXT SecondaryColor3usEXT = new Delegates.SecondaryColor3usEXT(Imports.SecondaryColor3usEXT);
        public static Delegates.SecondaryColor3usvEXT_ SecondaryColor3usvEXT_ = new Delegates.SecondaryColor3usvEXT_(Imports.SecondaryColor3usvEXT_);
        public static Delegates.SecondaryColorPointerEXT_ SecondaryColorPointerEXT_ = new Delegates.SecondaryColorPointerEXT_(Imports.SecondaryColorPointerEXT_);
        public static Delegates.TextureNormalEXT TextureNormalEXT = new Delegates.TextureNormalEXT(Imports.TextureNormalEXT);
        public static Delegates.MultiDrawArraysEXT_ MultiDrawArraysEXT_ = new Delegates.MultiDrawArraysEXT_(Imports.MultiDrawArraysEXT_);
        public static Delegates.MultiDrawElementsEXT_ MultiDrawElementsEXT_ = new Delegates.MultiDrawElementsEXT_(Imports.MultiDrawElementsEXT_);
        public static Delegates.FogCoordfEXT FogCoordfEXT = new Delegates.FogCoordfEXT(Imports.FogCoordfEXT);
        public static Delegates.FogCoordfvEXT_ FogCoordfvEXT_ = new Delegates.FogCoordfvEXT_(Imports.FogCoordfvEXT_);
        public static Delegates.FogCoorddEXT FogCoorddEXT = new Delegates.FogCoorddEXT(Imports.FogCoorddEXT);
        public static Delegates.FogCoorddvEXT_ FogCoorddvEXT_ = new Delegates.FogCoorddvEXT_(Imports.FogCoorddvEXT_);
        public static Delegates.FogCoordPointerEXT_ FogCoordPointerEXT_ = new Delegates.FogCoordPointerEXT_(Imports.FogCoordPointerEXT_);
        public static Delegates.Tangent3bEXT Tangent3bEXT = new Delegates.Tangent3bEXT(Imports.Tangent3bEXT);
        public static Delegates.Tangent3bvEXT_ Tangent3bvEXT_ = new Delegates.Tangent3bvEXT_(Imports.Tangent3bvEXT_);
        public static Delegates.Tangent3dEXT Tangent3dEXT = new Delegates.Tangent3dEXT(Imports.Tangent3dEXT);
        public static Delegates.Tangent3dvEXT_ Tangent3dvEXT_ = new Delegates.Tangent3dvEXT_(Imports.Tangent3dvEXT_);
        public static Delegates.Tangent3fEXT Tangent3fEXT = new Delegates.Tangent3fEXT(Imports.Tangent3fEXT);
        public static Delegates.Tangent3fvEXT_ Tangent3fvEXT_ = new Delegates.Tangent3fvEXT_(Imports.Tangent3fvEXT_);
        public static Delegates.Tangent3iEXT Tangent3iEXT = new Delegates.Tangent3iEXT(Imports.Tangent3iEXT);
        public static Delegates.Tangent3ivEXT_ Tangent3ivEXT_ = new Delegates.Tangent3ivEXT_(Imports.Tangent3ivEXT_);
        public static Delegates.Tangent3sEXT Tangent3sEXT = new Delegates.Tangent3sEXT(Imports.Tangent3sEXT);
        public static Delegates.Tangent3svEXT_ Tangent3svEXT_ = new Delegates.Tangent3svEXT_(Imports.Tangent3svEXT_);
        public static Delegates.Binormal3bEXT Binormal3bEXT = new Delegates.Binormal3bEXT(Imports.Binormal3bEXT);
        public static Delegates.Binormal3bvEXT_ Binormal3bvEXT_ = new Delegates.Binormal3bvEXT_(Imports.Binormal3bvEXT_);
        public static Delegates.Binormal3dEXT Binormal3dEXT = new Delegates.Binormal3dEXT(Imports.Binormal3dEXT);
        public static Delegates.Binormal3dvEXT_ Binormal3dvEXT_ = new Delegates.Binormal3dvEXT_(Imports.Binormal3dvEXT_);
        public static Delegates.Binormal3fEXT Binormal3fEXT = new Delegates.Binormal3fEXT(Imports.Binormal3fEXT);
        public static Delegates.Binormal3fvEXT_ Binormal3fvEXT_ = new Delegates.Binormal3fvEXT_(Imports.Binormal3fvEXT_);
        public static Delegates.Binormal3iEXT Binormal3iEXT = new Delegates.Binormal3iEXT(Imports.Binormal3iEXT);
        public static Delegates.Binormal3ivEXT_ Binormal3ivEXT_ = new Delegates.Binormal3ivEXT_(Imports.Binormal3ivEXT_);
        public static Delegates.Binormal3sEXT Binormal3sEXT = new Delegates.Binormal3sEXT(Imports.Binormal3sEXT);
        public static Delegates.Binormal3svEXT_ Binormal3svEXT_ = new Delegates.Binormal3svEXT_(Imports.Binormal3svEXT_);
        public static Delegates.TangentPointerEXT_ TangentPointerEXT_ = new Delegates.TangentPointerEXT_(Imports.TangentPointerEXT_);
        public static Delegates.BinormalPointerEXT_ BinormalPointerEXT_ = new Delegates.BinormalPointerEXT_(Imports.BinormalPointerEXT_);
        public static Delegates.FinishTextureSUNX FinishTextureSUNX = new Delegates.FinishTextureSUNX(Imports.FinishTextureSUNX);
        public static Delegates.GlobalAlphaFactorbSUN GlobalAlphaFactorbSUN = new Delegates.GlobalAlphaFactorbSUN(Imports.GlobalAlphaFactorbSUN);
        public static Delegates.GlobalAlphaFactorsSUN GlobalAlphaFactorsSUN = new Delegates.GlobalAlphaFactorsSUN(Imports.GlobalAlphaFactorsSUN);
        public static Delegates.GlobalAlphaFactoriSUN GlobalAlphaFactoriSUN = new Delegates.GlobalAlphaFactoriSUN(Imports.GlobalAlphaFactoriSUN);
        public static Delegates.GlobalAlphaFactorfSUN GlobalAlphaFactorfSUN = new Delegates.GlobalAlphaFactorfSUN(Imports.GlobalAlphaFactorfSUN);
        public static Delegates.GlobalAlphaFactordSUN GlobalAlphaFactordSUN = new Delegates.GlobalAlphaFactordSUN(Imports.GlobalAlphaFactordSUN);
        public static Delegates.GlobalAlphaFactorubSUN GlobalAlphaFactorubSUN = new Delegates.GlobalAlphaFactorubSUN(Imports.GlobalAlphaFactorubSUN);
        public static Delegates.GlobalAlphaFactorusSUN GlobalAlphaFactorusSUN = new Delegates.GlobalAlphaFactorusSUN(Imports.GlobalAlphaFactorusSUN);
        public static Delegates.GlobalAlphaFactoruiSUN GlobalAlphaFactoruiSUN = new Delegates.GlobalAlphaFactoruiSUN(Imports.GlobalAlphaFactoruiSUN);
        public static Delegates.ReplacementCodeuiSUN ReplacementCodeuiSUN = new Delegates.ReplacementCodeuiSUN(Imports.ReplacementCodeuiSUN);
        public static Delegates.ReplacementCodeusSUN ReplacementCodeusSUN = new Delegates.ReplacementCodeusSUN(Imports.ReplacementCodeusSUN);
        public static Delegates.ReplacementCodeubSUN ReplacementCodeubSUN = new Delegates.ReplacementCodeubSUN(Imports.ReplacementCodeubSUN);
        public static Delegates.ReplacementCodeuivSUN_ ReplacementCodeuivSUN_ = new Delegates.ReplacementCodeuivSUN_(Imports.ReplacementCodeuivSUN_);
        public static Delegates.ReplacementCodeusvSUN_ ReplacementCodeusvSUN_ = new Delegates.ReplacementCodeusvSUN_(Imports.ReplacementCodeusvSUN_);
        public static Delegates.ReplacementCodeubvSUN_ ReplacementCodeubvSUN_ = new Delegates.ReplacementCodeubvSUN_(Imports.ReplacementCodeubvSUN_);
        public static Delegates.ReplacementCodePointerSUN_ ReplacementCodePointerSUN_ = new Delegates.ReplacementCodePointerSUN_(Imports.ReplacementCodePointerSUN_);
        public static Delegates.Color4ubVertex2fSUN Color4ubVertex2fSUN = new Delegates.Color4ubVertex2fSUN(Imports.Color4ubVertex2fSUN);
        public static Delegates.Color4ubVertex2fvSUN_ Color4ubVertex2fvSUN_ = new Delegates.Color4ubVertex2fvSUN_(Imports.Color4ubVertex2fvSUN_);
        public static Delegates.Color4ubVertex3fSUN Color4ubVertex3fSUN = new Delegates.Color4ubVertex3fSUN(Imports.Color4ubVertex3fSUN);
        public static Delegates.Color4ubVertex3fvSUN_ Color4ubVertex3fvSUN_ = new Delegates.Color4ubVertex3fvSUN_(Imports.Color4ubVertex3fvSUN_);
        public static Delegates.Color3fVertex3fSUN Color3fVertex3fSUN = new Delegates.Color3fVertex3fSUN(Imports.Color3fVertex3fSUN);
        public static Delegates.Color3fVertex3fvSUN_ Color3fVertex3fvSUN_ = new Delegates.Color3fVertex3fvSUN_(Imports.Color3fVertex3fvSUN_);
        public static Delegates.Normal3fVertex3fSUN Normal3fVertex3fSUN = new Delegates.Normal3fVertex3fSUN(Imports.Normal3fVertex3fSUN);
        public static Delegates.Normal3fVertex3fvSUN_ Normal3fVertex3fvSUN_ = new Delegates.Normal3fVertex3fvSUN_(Imports.Normal3fVertex3fvSUN_);
        public static Delegates.Color4fNormal3fVertex3fSUN Color4fNormal3fVertex3fSUN = new Delegates.Color4fNormal3fVertex3fSUN(Imports.Color4fNormal3fVertex3fSUN);
        public static Delegates.Color4fNormal3fVertex3fvSUN_ Color4fNormal3fVertex3fvSUN_ = new Delegates.Color4fNormal3fVertex3fvSUN_(Imports.Color4fNormal3fVertex3fvSUN_);
        public static Delegates.TexCoord2fVertex3fSUN TexCoord2fVertex3fSUN = new Delegates.TexCoord2fVertex3fSUN(Imports.TexCoord2fVertex3fSUN);
        public static Delegates.TexCoord2fVertex3fvSUN_ TexCoord2fVertex3fvSUN_ = new Delegates.TexCoord2fVertex3fvSUN_(Imports.TexCoord2fVertex3fvSUN_);
        public static Delegates.TexCoord4fVertex4fSUN TexCoord4fVertex4fSUN = new Delegates.TexCoord4fVertex4fSUN(Imports.TexCoord4fVertex4fSUN);
        public static Delegates.TexCoord4fVertex4fvSUN_ TexCoord4fVertex4fvSUN_ = new Delegates.TexCoord4fVertex4fvSUN_(Imports.TexCoord4fVertex4fvSUN_);
        public static Delegates.TexCoord2fColor4ubVertex3fSUN TexCoord2fColor4ubVertex3fSUN = new Delegates.TexCoord2fColor4ubVertex3fSUN(Imports.TexCoord2fColor4ubVertex3fSUN);
        public static Delegates.TexCoord2fColor4ubVertex3fvSUN_ TexCoord2fColor4ubVertex3fvSUN_ = new Delegates.TexCoord2fColor4ubVertex3fvSUN_(Imports.TexCoord2fColor4ubVertex3fvSUN_);
        public static Delegates.TexCoord2fColor3fVertex3fSUN TexCoord2fColor3fVertex3fSUN = new Delegates.TexCoord2fColor3fVertex3fSUN(Imports.TexCoord2fColor3fVertex3fSUN);
        public static Delegates.TexCoord2fColor3fVertex3fvSUN_ TexCoord2fColor3fVertex3fvSUN_ = new Delegates.TexCoord2fColor3fVertex3fvSUN_(Imports.TexCoord2fColor3fVertex3fvSUN_);
        public static Delegates.TexCoord2fNormal3fVertex3fSUN TexCoord2fNormal3fVertex3fSUN = new Delegates.TexCoord2fNormal3fVertex3fSUN(Imports.TexCoord2fNormal3fVertex3fSUN);
        public static Delegates.TexCoord2fNormal3fVertex3fvSUN_ TexCoord2fNormal3fVertex3fvSUN_ = new Delegates.TexCoord2fNormal3fVertex3fvSUN_(Imports.TexCoord2fNormal3fVertex3fvSUN_);
        public static Delegates.TexCoord2fColor4fNormal3fVertex3fSUN TexCoord2fColor4fNormal3fVertex3fSUN = new Delegates.TexCoord2fColor4fNormal3fVertex3fSUN(Imports.TexCoord2fColor4fNormal3fVertex3fSUN);
        public static Delegates.TexCoord2fColor4fNormal3fVertex3fvSUN_ TexCoord2fColor4fNormal3fVertex3fvSUN_ = new Delegates.TexCoord2fColor4fNormal3fVertex3fvSUN_(Imports.TexCoord2fColor4fNormal3fVertex3fvSUN_);
        public static Delegates.TexCoord4fColor4fNormal3fVertex4fSUN TexCoord4fColor4fNormal3fVertex4fSUN = new Delegates.TexCoord4fColor4fNormal3fVertex4fSUN(Imports.TexCoord4fColor4fNormal3fVertex4fSUN);
        public static Delegates.TexCoord4fColor4fNormal3fVertex4fvSUN_ TexCoord4fColor4fNormal3fVertex4fvSUN_ = new Delegates.TexCoord4fColor4fNormal3fVertex4fvSUN_(Imports.TexCoord4fColor4fNormal3fVertex4fvSUN_);
        public static Delegates.ReplacementCodeuiVertex3fSUN ReplacementCodeuiVertex3fSUN = new Delegates.ReplacementCodeuiVertex3fSUN(Imports.ReplacementCodeuiVertex3fSUN);
        public static Delegates.ReplacementCodeuiVertex3fvSUN_ ReplacementCodeuiVertex3fvSUN_ = new Delegates.ReplacementCodeuiVertex3fvSUN_(Imports.ReplacementCodeuiVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiColor4ubVertex3fSUN ReplacementCodeuiColor4ubVertex3fSUN = new Delegates.ReplacementCodeuiColor4ubVertex3fSUN(Imports.ReplacementCodeuiColor4ubVertex3fSUN);
        public static Delegates.ReplacementCodeuiColor4ubVertex3fvSUN_ ReplacementCodeuiColor4ubVertex3fvSUN_ = new Delegates.ReplacementCodeuiColor4ubVertex3fvSUN_(Imports.ReplacementCodeuiColor4ubVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiColor3fVertex3fSUN ReplacementCodeuiColor3fVertex3fSUN = new Delegates.ReplacementCodeuiColor3fVertex3fSUN(Imports.ReplacementCodeuiColor3fVertex3fSUN);
        public static Delegates.ReplacementCodeuiColor3fVertex3fvSUN_ ReplacementCodeuiColor3fVertex3fvSUN_ = new Delegates.ReplacementCodeuiColor3fVertex3fvSUN_(Imports.ReplacementCodeuiColor3fVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiNormal3fVertex3fSUN ReplacementCodeuiNormal3fVertex3fSUN = new Delegates.ReplacementCodeuiNormal3fVertex3fSUN(Imports.ReplacementCodeuiNormal3fVertex3fSUN);
        public static Delegates.ReplacementCodeuiNormal3fVertex3fvSUN_ ReplacementCodeuiNormal3fVertex3fvSUN_ = new Delegates.ReplacementCodeuiNormal3fVertex3fvSUN_(Imports.ReplacementCodeuiNormal3fVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiColor4fNormal3fVertex3fSUN ReplacementCodeuiColor4fNormal3fVertex3fSUN = new Delegates.ReplacementCodeuiColor4fNormal3fVertex3fSUN(Imports.ReplacementCodeuiColor4fNormal3fVertex3fSUN);
        public static Delegates.ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ ReplacementCodeuiColor4fNormal3fVertex3fvSUN_ = new Delegates.ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(Imports.ReplacementCodeuiColor4fNormal3fVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiTexCoord2fVertex3fSUN ReplacementCodeuiTexCoord2fVertex3fSUN = new Delegates.ReplacementCodeuiTexCoord2fVertex3fSUN(Imports.ReplacementCodeuiTexCoord2fVertex3fSUN);
        public static Delegates.ReplacementCodeuiTexCoord2fVertex3fvSUN_ ReplacementCodeuiTexCoord2fVertex3fvSUN_ = new Delegates.ReplacementCodeuiTexCoord2fVertex3fvSUN_(Imports.ReplacementCodeuiTexCoord2fVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = new Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(Imports.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
        public static Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ = new Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(Imports.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_);
        public static Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = new Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(Imports.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
        public static Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ = new Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(Imports.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_);
        public static Delegates.BlendFuncSeparateEXT BlendFuncSeparateEXT = new Delegates.BlendFuncSeparateEXT(Imports.BlendFuncSeparateEXT);
        public static Delegates.BlendFuncSeparateINGR BlendFuncSeparateINGR = new Delegates.BlendFuncSeparateINGR(Imports.BlendFuncSeparateINGR);
        public static Delegates.VertexWeightfEXT VertexWeightfEXT = new Delegates.VertexWeightfEXT(Imports.VertexWeightfEXT);
        public static Delegates.VertexWeightfvEXT_ VertexWeightfvEXT_ = new Delegates.VertexWeightfvEXT_(Imports.VertexWeightfvEXT_);
        public static Delegates.VertexWeightPointerEXT_ VertexWeightPointerEXT_ = new Delegates.VertexWeightPointerEXT_(Imports.VertexWeightPointerEXT_);
        public static Delegates.FlushVertexArrayRangeNV FlushVertexArrayRangeNV = new Delegates.FlushVertexArrayRangeNV(Imports.FlushVertexArrayRangeNV);
        public static Delegates.VertexArrayRangeNV_ VertexArrayRangeNV_ = new Delegates.VertexArrayRangeNV_(Imports.VertexArrayRangeNV_);
        public static Delegates.CombinerParameterfvNV_ CombinerParameterfvNV_ = new Delegates.CombinerParameterfvNV_(Imports.CombinerParameterfvNV_);
        public static Delegates.CombinerParameterfNV CombinerParameterfNV = new Delegates.CombinerParameterfNV(Imports.CombinerParameterfNV);
        public static Delegates.CombinerParameterivNV_ CombinerParameterivNV_ = new Delegates.CombinerParameterivNV_(Imports.CombinerParameterivNV_);
        public static Delegates.CombinerParameteriNV CombinerParameteriNV = new Delegates.CombinerParameteriNV(Imports.CombinerParameteriNV);
        public static Delegates.CombinerInputNV CombinerInputNV = new Delegates.CombinerInputNV(Imports.CombinerInputNV);
        public static Delegates.CombinerOutputNV CombinerOutputNV = new Delegates.CombinerOutputNV(Imports.CombinerOutputNV);
        public static Delegates.FinalCombinerInputNV FinalCombinerInputNV = new Delegates.FinalCombinerInputNV(Imports.FinalCombinerInputNV);
        public static Delegates.GetCombinerInputParameterfvNV_ GetCombinerInputParameterfvNV_ = new Delegates.GetCombinerInputParameterfvNV_(Imports.GetCombinerInputParameterfvNV_);
        public static Delegates.GetCombinerInputParameterivNV_ GetCombinerInputParameterivNV_ = new Delegates.GetCombinerInputParameterivNV_(Imports.GetCombinerInputParameterivNV_);
        public static Delegates.GetCombinerOutputParameterfvNV_ GetCombinerOutputParameterfvNV_ = new Delegates.GetCombinerOutputParameterfvNV_(Imports.GetCombinerOutputParameterfvNV_);
        public static Delegates.GetCombinerOutputParameterivNV_ GetCombinerOutputParameterivNV_ = new Delegates.GetCombinerOutputParameterivNV_(Imports.GetCombinerOutputParameterivNV_);
        public static Delegates.GetFinalCombinerInputParameterfvNV_ GetFinalCombinerInputParameterfvNV_ = new Delegates.GetFinalCombinerInputParameterfvNV_(Imports.GetFinalCombinerInputParameterfvNV_);
        public static Delegates.GetFinalCombinerInputParameterivNV_ GetFinalCombinerInputParameterivNV_ = new Delegates.GetFinalCombinerInputParameterivNV_(Imports.GetFinalCombinerInputParameterivNV_);
        public static Delegates.ResizeBuffersMESA ResizeBuffersMESA = new Delegates.ResizeBuffersMESA(Imports.ResizeBuffersMESA);
        public static Delegates.WindowPos2dMESA WindowPos2dMESA = new Delegates.WindowPos2dMESA(Imports.WindowPos2dMESA);
        public static Delegates.WindowPos2dvMESA_ WindowPos2dvMESA_ = new Delegates.WindowPos2dvMESA_(Imports.WindowPos2dvMESA_);
        public static Delegates.WindowPos2fMESA WindowPos2fMESA = new Delegates.WindowPos2fMESA(Imports.WindowPos2fMESA);
        public static Delegates.WindowPos2fvMESA_ WindowPos2fvMESA_ = new Delegates.WindowPos2fvMESA_(Imports.WindowPos2fvMESA_);
        public static Delegates.WindowPos2iMESA WindowPos2iMESA = new Delegates.WindowPos2iMESA(Imports.WindowPos2iMESA);
        public static Delegates.WindowPos2ivMESA_ WindowPos2ivMESA_ = new Delegates.WindowPos2ivMESA_(Imports.WindowPos2ivMESA_);
        public static Delegates.WindowPos2sMESA WindowPos2sMESA = new Delegates.WindowPos2sMESA(Imports.WindowPos2sMESA);
        public static Delegates.WindowPos2svMESA_ WindowPos2svMESA_ = new Delegates.WindowPos2svMESA_(Imports.WindowPos2svMESA_);
        public static Delegates.WindowPos3dMESA WindowPos3dMESA = new Delegates.WindowPos3dMESA(Imports.WindowPos3dMESA);
        public static Delegates.WindowPos3dvMESA_ WindowPos3dvMESA_ = new Delegates.WindowPos3dvMESA_(Imports.WindowPos3dvMESA_);
        public static Delegates.WindowPos3fMESA WindowPos3fMESA = new Delegates.WindowPos3fMESA(Imports.WindowPos3fMESA);
        public static Delegates.WindowPos3fvMESA_ WindowPos3fvMESA_ = new Delegates.WindowPos3fvMESA_(Imports.WindowPos3fvMESA_);
        public static Delegates.WindowPos3iMESA WindowPos3iMESA = new Delegates.WindowPos3iMESA(Imports.WindowPos3iMESA);
        public static Delegates.WindowPos3ivMESA_ WindowPos3ivMESA_ = new Delegates.WindowPos3ivMESA_(Imports.WindowPos3ivMESA_);
        public static Delegates.WindowPos3sMESA WindowPos3sMESA = new Delegates.WindowPos3sMESA(Imports.WindowPos3sMESA);
        public static Delegates.WindowPos3svMESA_ WindowPos3svMESA_ = new Delegates.WindowPos3svMESA_(Imports.WindowPos3svMESA_);
        public static Delegates.WindowPos4dMESA WindowPos4dMESA = new Delegates.WindowPos4dMESA(Imports.WindowPos4dMESA);
        public static Delegates.WindowPos4dvMESA_ WindowPos4dvMESA_ = new Delegates.WindowPos4dvMESA_(Imports.WindowPos4dvMESA_);
        public static Delegates.WindowPos4fMESA WindowPos4fMESA = new Delegates.WindowPos4fMESA(Imports.WindowPos4fMESA);
        public static Delegates.WindowPos4fvMESA_ WindowPos4fvMESA_ = new Delegates.WindowPos4fvMESA_(Imports.WindowPos4fvMESA_);
        public static Delegates.WindowPos4iMESA WindowPos4iMESA = new Delegates.WindowPos4iMESA(Imports.WindowPos4iMESA);
        public static Delegates.WindowPos4ivMESA_ WindowPos4ivMESA_ = new Delegates.WindowPos4ivMESA_(Imports.WindowPos4ivMESA_);
        public static Delegates.WindowPos4sMESA WindowPos4sMESA = new Delegates.WindowPos4sMESA(Imports.WindowPos4sMESA);
        public static Delegates.WindowPos4svMESA_ WindowPos4svMESA_ = new Delegates.WindowPos4svMESA_(Imports.WindowPos4svMESA_);
        public static Delegates.MultiModeDrawArraysIBM_ MultiModeDrawArraysIBM_ = new Delegates.MultiModeDrawArraysIBM_(Imports.MultiModeDrawArraysIBM_);
        public static Delegates.MultiModeDrawElementsIBM_ MultiModeDrawElementsIBM_ = new Delegates.MultiModeDrawElementsIBM_(Imports.MultiModeDrawElementsIBM_);
        public static Delegates.ColorPointerListIBM_ ColorPointerListIBM_ = new Delegates.ColorPointerListIBM_(Imports.ColorPointerListIBM_);
        public static Delegates.SecondaryColorPointerListIBM_ SecondaryColorPointerListIBM_ = new Delegates.SecondaryColorPointerListIBM_(Imports.SecondaryColorPointerListIBM_);
        public static Delegates.EdgeFlagPointerListIBM_ EdgeFlagPointerListIBM_ = new Delegates.EdgeFlagPointerListIBM_(Imports.EdgeFlagPointerListIBM_);
        public static Delegates.FogCoordPointerListIBM_ FogCoordPointerListIBM_ = new Delegates.FogCoordPointerListIBM_(Imports.FogCoordPointerListIBM_);
        public static Delegates.IndexPointerListIBM_ IndexPointerListIBM_ = new Delegates.IndexPointerListIBM_(Imports.IndexPointerListIBM_);
        public static Delegates.NormalPointerListIBM_ NormalPointerListIBM_ = new Delegates.NormalPointerListIBM_(Imports.NormalPointerListIBM_);
        public static Delegates.TexCoordPointerListIBM_ TexCoordPointerListIBM_ = new Delegates.TexCoordPointerListIBM_(Imports.TexCoordPointerListIBM_);
        public static Delegates.VertexPointerListIBM_ VertexPointerListIBM_ = new Delegates.VertexPointerListIBM_(Imports.VertexPointerListIBM_);
        public static Delegates.TbufferMask3DFX TbufferMask3DFX = new Delegates.TbufferMask3DFX(Imports.TbufferMask3DFX);
        public static Delegates.SampleMaskEXT SampleMaskEXT = new Delegates.SampleMaskEXT(Imports.SampleMaskEXT);
        public static Delegates.SamplePatternEXT SamplePatternEXT = new Delegates.SamplePatternEXT(Imports.SamplePatternEXT);
        public static Delegates.TextureColorMaskSGIS TextureColorMaskSGIS = new Delegates.TextureColorMaskSGIS(Imports.TextureColorMaskSGIS);
        public static Delegates.IglooInterfaceSGIX_ IglooInterfaceSGIX_ = new Delegates.IglooInterfaceSGIX_(Imports.IglooInterfaceSGIX_);
        public static Delegates.DeleteFencesNV_ DeleteFencesNV_ = new Delegates.DeleteFencesNV_(Imports.DeleteFencesNV_);
        public static Delegates.GenFencesNV_ GenFencesNV_ = new Delegates.GenFencesNV_(Imports.GenFencesNV_);
        public static Delegates.IsFenceNV IsFenceNV = new Delegates.IsFenceNV(Imports.IsFenceNV);
        public static Delegates.TestFenceNV TestFenceNV = new Delegates.TestFenceNV(Imports.TestFenceNV);
        public static Delegates.GetFenceivNV_ GetFenceivNV_ = new Delegates.GetFenceivNV_(Imports.GetFenceivNV_);
        public static Delegates.FinishFenceNV FinishFenceNV = new Delegates.FinishFenceNV(Imports.FinishFenceNV);
        public static Delegates.SetFenceNV SetFenceNV = new Delegates.SetFenceNV(Imports.SetFenceNV);
        public static Delegates.MapControlPointsNV_ MapControlPointsNV_ = new Delegates.MapControlPointsNV_(Imports.MapControlPointsNV_);
        public static Delegates.MapParameterivNV_ MapParameterivNV_ = new Delegates.MapParameterivNV_(Imports.MapParameterivNV_);
        public static Delegates.MapParameterfvNV_ MapParameterfvNV_ = new Delegates.MapParameterfvNV_(Imports.MapParameterfvNV_);
        public static Delegates.GetMapControlPointsNV_ GetMapControlPointsNV_ = new Delegates.GetMapControlPointsNV_(Imports.GetMapControlPointsNV_);
        public static Delegates.GetMapParameterivNV_ GetMapParameterivNV_ = new Delegates.GetMapParameterivNV_(Imports.GetMapParameterivNV_);
        public static Delegates.GetMapParameterfvNV_ GetMapParameterfvNV_ = new Delegates.GetMapParameterfvNV_(Imports.GetMapParameterfvNV_);
        public static Delegates.GetMapAttribParameterivNV_ GetMapAttribParameterivNV_ = new Delegates.GetMapAttribParameterivNV_(Imports.GetMapAttribParameterivNV_);
        public static Delegates.GetMapAttribParameterfvNV_ GetMapAttribParameterfvNV_ = new Delegates.GetMapAttribParameterfvNV_(Imports.GetMapAttribParameterfvNV_);
        public static Delegates.EvalMapsNV EvalMapsNV = new Delegates.EvalMapsNV(Imports.EvalMapsNV);
        public static Delegates.CombinerStageParameterfvNV_ CombinerStageParameterfvNV_ = new Delegates.CombinerStageParameterfvNV_(Imports.CombinerStageParameterfvNV_);
        public static Delegates.GetCombinerStageParameterfvNV_ GetCombinerStageParameterfvNV_ = new Delegates.GetCombinerStageParameterfvNV_(Imports.GetCombinerStageParameterfvNV_);
        public static Delegates.AreProgramsResidentNV_ AreProgramsResidentNV_ = new Delegates.AreProgramsResidentNV_(Imports.AreProgramsResidentNV_);
        public static Delegates.BindProgramNV BindProgramNV = new Delegates.BindProgramNV(Imports.BindProgramNV);
        public static Delegates.DeleteProgramsNV_ DeleteProgramsNV_ = new Delegates.DeleteProgramsNV_(Imports.DeleteProgramsNV_);
        public static Delegates.ExecuteProgramNV_ ExecuteProgramNV_ = new Delegates.ExecuteProgramNV_(Imports.ExecuteProgramNV_);
        public static Delegates.GenProgramsNV_ GenProgramsNV_ = new Delegates.GenProgramsNV_(Imports.GenProgramsNV_);
        public static Delegates.GetProgramParameterdvNV_ GetProgramParameterdvNV_ = new Delegates.GetProgramParameterdvNV_(Imports.GetProgramParameterdvNV_);
        public static Delegates.GetProgramParameterfvNV_ GetProgramParameterfvNV_ = new Delegates.GetProgramParameterfvNV_(Imports.GetProgramParameterfvNV_);
        public static Delegates.GetProgramivNV_ GetProgramivNV_ = new Delegates.GetProgramivNV_(Imports.GetProgramivNV_);
        public static Delegates.GetProgramStringNV_ GetProgramStringNV_ = new Delegates.GetProgramStringNV_(Imports.GetProgramStringNV_);
        public static Delegates.GetTrackMatrixivNV_ GetTrackMatrixivNV_ = new Delegates.GetTrackMatrixivNV_(Imports.GetTrackMatrixivNV_);
        public static Delegates.GetVertexAttribdvNV_ GetVertexAttribdvNV_ = new Delegates.GetVertexAttribdvNV_(Imports.GetVertexAttribdvNV_);
        public static Delegates.GetVertexAttribfvNV_ GetVertexAttribfvNV_ = new Delegates.GetVertexAttribfvNV_(Imports.GetVertexAttribfvNV_);
        public static Delegates.GetVertexAttribivNV_ GetVertexAttribivNV_ = new Delegates.GetVertexAttribivNV_(Imports.GetVertexAttribivNV_);
        public static Delegates.GetVertexAttribPointervNV_ GetVertexAttribPointervNV_ = new Delegates.GetVertexAttribPointervNV_(Imports.GetVertexAttribPointervNV_);
        public static Delegates.IsProgramNV IsProgramNV = new Delegates.IsProgramNV(Imports.IsProgramNV);
        public static Delegates.LoadProgramNV_ LoadProgramNV_ = new Delegates.LoadProgramNV_(Imports.LoadProgramNV_);
        public static Delegates.ProgramParameter4dNV ProgramParameter4dNV = new Delegates.ProgramParameter4dNV(Imports.ProgramParameter4dNV);
        public static Delegates.ProgramParameter4dvNV_ ProgramParameter4dvNV_ = new Delegates.ProgramParameter4dvNV_(Imports.ProgramParameter4dvNV_);
        public static Delegates.ProgramParameter4fNV ProgramParameter4fNV = new Delegates.ProgramParameter4fNV(Imports.ProgramParameter4fNV);
        public static Delegates.ProgramParameter4fvNV_ ProgramParameter4fvNV_ = new Delegates.ProgramParameter4fvNV_(Imports.ProgramParameter4fvNV_);
        public static Delegates.ProgramParameters4dvNV_ ProgramParameters4dvNV_ = new Delegates.ProgramParameters4dvNV_(Imports.ProgramParameters4dvNV_);
        public static Delegates.ProgramParameters4fvNV_ ProgramParameters4fvNV_ = new Delegates.ProgramParameters4fvNV_(Imports.ProgramParameters4fvNV_);
        public static Delegates.RequestResidentProgramsNV_ RequestResidentProgramsNV_ = new Delegates.RequestResidentProgramsNV_(Imports.RequestResidentProgramsNV_);
        public static Delegates.TrackMatrixNV TrackMatrixNV = new Delegates.TrackMatrixNV(Imports.TrackMatrixNV);
        public static Delegates.VertexAttribPointerNV_ VertexAttribPointerNV_ = new Delegates.VertexAttribPointerNV_(Imports.VertexAttribPointerNV_);
        public static Delegates.VertexAttrib1dNV VertexAttrib1dNV = new Delegates.VertexAttrib1dNV(Imports.VertexAttrib1dNV);
        public static Delegates.VertexAttrib1dvNV_ VertexAttrib1dvNV_ = new Delegates.VertexAttrib1dvNV_(Imports.VertexAttrib1dvNV_);
        public static Delegates.VertexAttrib1fNV VertexAttrib1fNV = new Delegates.VertexAttrib1fNV(Imports.VertexAttrib1fNV);
        public static Delegates.VertexAttrib1fvNV_ VertexAttrib1fvNV_ = new Delegates.VertexAttrib1fvNV_(Imports.VertexAttrib1fvNV_);
        public static Delegates.VertexAttrib1sNV VertexAttrib1sNV = new Delegates.VertexAttrib1sNV(Imports.VertexAttrib1sNV);
        public static Delegates.VertexAttrib1svNV_ VertexAttrib1svNV_ = new Delegates.VertexAttrib1svNV_(Imports.VertexAttrib1svNV_);
        public static Delegates.VertexAttrib2dNV VertexAttrib2dNV = new Delegates.VertexAttrib2dNV(Imports.VertexAttrib2dNV);
        public static Delegates.VertexAttrib2dvNV_ VertexAttrib2dvNV_ = new Delegates.VertexAttrib2dvNV_(Imports.VertexAttrib2dvNV_);
        public static Delegates.VertexAttrib2fNV VertexAttrib2fNV = new Delegates.VertexAttrib2fNV(Imports.VertexAttrib2fNV);
        public static Delegates.VertexAttrib2fvNV_ VertexAttrib2fvNV_ = new Delegates.VertexAttrib2fvNV_(Imports.VertexAttrib2fvNV_);
        public static Delegates.VertexAttrib2sNV VertexAttrib2sNV = new Delegates.VertexAttrib2sNV(Imports.VertexAttrib2sNV);
        public static Delegates.VertexAttrib2svNV_ VertexAttrib2svNV_ = new Delegates.VertexAttrib2svNV_(Imports.VertexAttrib2svNV_);
        public static Delegates.VertexAttrib3dNV VertexAttrib3dNV = new Delegates.VertexAttrib3dNV(Imports.VertexAttrib3dNV);
        public static Delegates.VertexAttrib3dvNV_ VertexAttrib3dvNV_ = new Delegates.VertexAttrib3dvNV_(Imports.VertexAttrib3dvNV_);
        public static Delegates.VertexAttrib3fNV VertexAttrib3fNV = new Delegates.VertexAttrib3fNV(Imports.VertexAttrib3fNV);
        public static Delegates.VertexAttrib3fvNV_ VertexAttrib3fvNV_ = new Delegates.VertexAttrib3fvNV_(Imports.VertexAttrib3fvNV_);
        public static Delegates.VertexAttrib3sNV VertexAttrib3sNV = new Delegates.VertexAttrib3sNV(Imports.VertexAttrib3sNV);
        public static Delegates.VertexAttrib3svNV_ VertexAttrib3svNV_ = new Delegates.VertexAttrib3svNV_(Imports.VertexAttrib3svNV_);
        public static Delegates.VertexAttrib4dNV VertexAttrib4dNV = new Delegates.VertexAttrib4dNV(Imports.VertexAttrib4dNV);
        public static Delegates.VertexAttrib4dvNV_ VertexAttrib4dvNV_ = new Delegates.VertexAttrib4dvNV_(Imports.VertexAttrib4dvNV_);
        public static Delegates.VertexAttrib4fNV VertexAttrib4fNV = new Delegates.VertexAttrib4fNV(Imports.VertexAttrib4fNV);
        public static Delegates.VertexAttrib4fvNV_ VertexAttrib4fvNV_ = new Delegates.VertexAttrib4fvNV_(Imports.VertexAttrib4fvNV_);
        public static Delegates.VertexAttrib4sNV VertexAttrib4sNV = new Delegates.VertexAttrib4sNV(Imports.VertexAttrib4sNV);
        public static Delegates.VertexAttrib4svNV_ VertexAttrib4svNV_ = new Delegates.VertexAttrib4svNV_(Imports.VertexAttrib4svNV_);
        public static Delegates.VertexAttrib4ubNV VertexAttrib4ubNV = new Delegates.VertexAttrib4ubNV(Imports.VertexAttrib4ubNV);
        public static Delegates.VertexAttrib4ubvNV_ VertexAttrib4ubvNV_ = new Delegates.VertexAttrib4ubvNV_(Imports.VertexAttrib4ubvNV_);
        public static Delegates.VertexAttribs1dvNV_ VertexAttribs1dvNV_ = new Delegates.VertexAttribs1dvNV_(Imports.VertexAttribs1dvNV_);
        public static Delegates.VertexAttribs1fvNV_ VertexAttribs1fvNV_ = new Delegates.VertexAttribs1fvNV_(Imports.VertexAttribs1fvNV_);
        public static Delegates.VertexAttribs1svNV_ VertexAttribs1svNV_ = new Delegates.VertexAttribs1svNV_(Imports.VertexAttribs1svNV_);
        public static Delegates.VertexAttribs2dvNV_ VertexAttribs2dvNV_ = new Delegates.VertexAttribs2dvNV_(Imports.VertexAttribs2dvNV_);
        public static Delegates.VertexAttribs2fvNV_ VertexAttribs2fvNV_ = new Delegates.VertexAttribs2fvNV_(Imports.VertexAttribs2fvNV_);
        public static Delegates.VertexAttribs2svNV_ VertexAttribs2svNV_ = new Delegates.VertexAttribs2svNV_(Imports.VertexAttribs2svNV_);
        public static Delegates.VertexAttribs3dvNV_ VertexAttribs3dvNV_ = new Delegates.VertexAttribs3dvNV_(Imports.VertexAttribs3dvNV_);
        public static Delegates.VertexAttribs3fvNV_ VertexAttribs3fvNV_ = new Delegates.VertexAttribs3fvNV_(Imports.VertexAttribs3fvNV_);
        public static Delegates.VertexAttribs3svNV_ VertexAttribs3svNV_ = new Delegates.VertexAttribs3svNV_(Imports.VertexAttribs3svNV_);
        public static Delegates.VertexAttribs4dvNV_ VertexAttribs4dvNV_ = new Delegates.VertexAttribs4dvNV_(Imports.VertexAttribs4dvNV_);
        public static Delegates.VertexAttribs4fvNV_ VertexAttribs4fvNV_ = new Delegates.VertexAttribs4fvNV_(Imports.VertexAttribs4fvNV_);
        public static Delegates.VertexAttribs4svNV_ VertexAttribs4svNV_ = new Delegates.VertexAttribs4svNV_(Imports.VertexAttribs4svNV_);
        public static Delegates.VertexAttribs4ubvNV_ VertexAttribs4ubvNV_ = new Delegates.VertexAttribs4ubvNV_(Imports.VertexAttribs4ubvNV_);
        public static Delegates.TexBumpParameterivATI_ TexBumpParameterivATI_ = new Delegates.TexBumpParameterivATI_(Imports.TexBumpParameterivATI_);
        public static Delegates.TexBumpParameterfvATI_ TexBumpParameterfvATI_ = new Delegates.TexBumpParameterfvATI_(Imports.TexBumpParameterfvATI_);
        public static Delegates.GetTexBumpParameterivATI_ GetTexBumpParameterivATI_ = new Delegates.GetTexBumpParameterivATI_(Imports.GetTexBumpParameterivATI_);
        public static Delegates.GetTexBumpParameterfvATI_ GetTexBumpParameterfvATI_ = new Delegates.GetTexBumpParameterfvATI_(Imports.GetTexBumpParameterfvATI_);
        public static Delegates.GenFragmentShadersATI GenFragmentShadersATI = new Delegates.GenFragmentShadersATI(Imports.GenFragmentShadersATI);
        public static Delegates.BindFragmentShaderATI BindFragmentShaderATI = new Delegates.BindFragmentShaderATI(Imports.BindFragmentShaderATI);
        public static Delegates.DeleteFragmentShaderATI DeleteFragmentShaderATI = new Delegates.DeleteFragmentShaderATI(Imports.DeleteFragmentShaderATI);
        public static Delegates.BeginFragmentShaderATI BeginFragmentShaderATI = new Delegates.BeginFragmentShaderATI(Imports.BeginFragmentShaderATI);
        public static Delegates.EndFragmentShaderATI EndFragmentShaderATI = new Delegates.EndFragmentShaderATI(Imports.EndFragmentShaderATI);
        public static Delegates.PassTexCoordATI PassTexCoordATI = new Delegates.PassTexCoordATI(Imports.PassTexCoordATI);
        public static Delegates.SampleMapATI SampleMapATI = new Delegates.SampleMapATI(Imports.SampleMapATI);
        public static Delegates.ColorFragmentOp1ATI ColorFragmentOp1ATI = new Delegates.ColorFragmentOp1ATI(Imports.ColorFragmentOp1ATI);
        public static Delegates.ColorFragmentOp2ATI ColorFragmentOp2ATI = new Delegates.ColorFragmentOp2ATI(Imports.ColorFragmentOp2ATI);
        public static Delegates.ColorFragmentOp3ATI ColorFragmentOp3ATI = new Delegates.ColorFragmentOp3ATI(Imports.ColorFragmentOp3ATI);
        public static Delegates.AlphaFragmentOp1ATI AlphaFragmentOp1ATI = new Delegates.AlphaFragmentOp1ATI(Imports.AlphaFragmentOp1ATI);
        public static Delegates.AlphaFragmentOp2ATI AlphaFragmentOp2ATI = new Delegates.AlphaFragmentOp2ATI(Imports.AlphaFragmentOp2ATI);
        public static Delegates.AlphaFragmentOp3ATI AlphaFragmentOp3ATI = new Delegates.AlphaFragmentOp3ATI(Imports.AlphaFragmentOp3ATI);
        public static Delegates.SetFragmentShaderConstantATI_ SetFragmentShaderConstantATI_ = new Delegates.SetFragmentShaderConstantATI_(Imports.SetFragmentShaderConstantATI_);
        public static Delegates.PNTrianglesiATI PNTrianglesiATI = new Delegates.PNTrianglesiATI(Imports.PNTrianglesiATI);
        public static Delegates.PNTrianglesfATI PNTrianglesfATI = new Delegates.PNTrianglesfATI(Imports.PNTrianglesfATI);
        public static Delegates.NewObjectBufferATI_ NewObjectBufferATI_ = new Delegates.NewObjectBufferATI_(Imports.NewObjectBufferATI_);
        public static Delegates.IsObjectBufferATI IsObjectBufferATI = new Delegates.IsObjectBufferATI(Imports.IsObjectBufferATI);
        public static Delegates.UpdateObjectBufferATI_ UpdateObjectBufferATI_ = new Delegates.UpdateObjectBufferATI_(Imports.UpdateObjectBufferATI_);
        public static Delegates.GetObjectBufferfvATI_ GetObjectBufferfvATI_ = new Delegates.GetObjectBufferfvATI_(Imports.GetObjectBufferfvATI_);
        public static Delegates.GetObjectBufferivATI_ GetObjectBufferivATI_ = new Delegates.GetObjectBufferivATI_(Imports.GetObjectBufferivATI_);
        public static Delegates.FreeObjectBufferATI FreeObjectBufferATI = new Delegates.FreeObjectBufferATI(Imports.FreeObjectBufferATI);
        public static Delegates.ArrayObjectATI ArrayObjectATI = new Delegates.ArrayObjectATI(Imports.ArrayObjectATI);
        public static Delegates.GetArrayObjectfvATI_ GetArrayObjectfvATI_ = new Delegates.GetArrayObjectfvATI_(Imports.GetArrayObjectfvATI_);
        public static Delegates.GetArrayObjectivATI_ GetArrayObjectivATI_ = new Delegates.GetArrayObjectivATI_(Imports.GetArrayObjectivATI_);
        public static Delegates.VariantArrayObjectATI VariantArrayObjectATI = new Delegates.VariantArrayObjectATI(Imports.VariantArrayObjectATI);
        public static Delegates.GetVariantArrayObjectfvATI_ GetVariantArrayObjectfvATI_ = new Delegates.GetVariantArrayObjectfvATI_(Imports.GetVariantArrayObjectfvATI_);
        public static Delegates.GetVariantArrayObjectivATI_ GetVariantArrayObjectivATI_ = new Delegates.GetVariantArrayObjectivATI_(Imports.GetVariantArrayObjectivATI_);
        public static Delegates.BeginVertexShaderEXT BeginVertexShaderEXT = new Delegates.BeginVertexShaderEXT(Imports.BeginVertexShaderEXT);
        public static Delegates.EndVertexShaderEXT EndVertexShaderEXT = new Delegates.EndVertexShaderEXT(Imports.EndVertexShaderEXT);
        public static Delegates.BindVertexShaderEXT BindVertexShaderEXT = new Delegates.BindVertexShaderEXT(Imports.BindVertexShaderEXT);
        public static Delegates.GenVertexShadersEXT GenVertexShadersEXT = new Delegates.GenVertexShadersEXT(Imports.GenVertexShadersEXT);
        public static Delegates.DeleteVertexShaderEXT DeleteVertexShaderEXT = new Delegates.DeleteVertexShaderEXT(Imports.DeleteVertexShaderEXT);
        public static Delegates.ShaderOp1EXT ShaderOp1EXT = new Delegates.ShaderOp1EXT(Imports.ShaderOp1EXT);
        public static Delegates.ShaderOp2EXT ShaderOp2EXT = new Delegates.ShaderOp2EXT(Imports.ShaderOp2EXT);
        public static Delegates.ShaderOp3EXT ShaderOp3EXT = new Delegates.ShaderOp3EXT(Imports.ShaderOp3EXT);
        public static Delegates.SwizzleEXT SwizzleEXT = new Delegates.SwizzleEXT(Imports.SwizzleEXT);
        public static Delegates.WriteMaskEXT WriteMaskEXT = new Delegates.WriteMaskEXT(Imports.WriteMaskEXT);
        public static Delegates.InsertComponentEXT InsertComponentEXT = new Delegates.InsertComponentEXT(Imports.InsertComponentEXT);
        public static Delegates.ExtractComponentEXT ExtractComponentEXT = new Delegates.ExtractComponentEXT(Imports.ExtractComponentEXT);
        public static Delegates.GenSymbolsEXT GenSymbolsEXT = new Delegates.GenSymbolsEXT(Imports.GenSymbolsEXT);
        public static Delegates.SetInvariantEXT_ SetInvariantEXT_ = new Delegates.SetInvariantEXT_(Imports.SetInvariantEXT_);
        public static Delegates.SetLocalConstantEXT_ SetLocalConstantEXT_ = new Delegates.SetLocalConstantEXT_(Imports.SetLocalConstantEXT_);
        public static Delegates.VariantbvEXT_ VariantbvEXT_ = new Delegates.VariantbvEXT_(Imports.VariantbvEXT_);
        public static Delegates.VariantsvEXT_ VariantsvEXT_ = new Delegates.VariantsvEXT_(Imports.VariantsvEXT_);
        public static Delegates.VariantivEXT_ VariantivEXT_ = new Delegates.VariantivEXT_(Imports.VariantivEXT_);
        public static Delegates.VariantfvEXT_ VariantfvEXT_ = new Delegates.VariantfvEXT_(Imports.VariantfvEXT_);
        public static Delegates.VariantdvEXT_ VariantdvEXT_ = new Delegates.VariantdvEXT_(Imports.VariantdvEXT_);
        public static Delegates.VariantubvEXT_ VariantubvEXT_ = new Delegates.VariantubvEXT_(Imports.VariantubvEXT_);
        public static Delegates.VariantusvEXT_ VariantusvEXT_ = new Delegates.VariantusvEXT_(Imports.VariantusvEXT_);
        public static Delegates.VariantuivEXT_ VariantuivEXT_ = new Delegates.VariantuivEXT_(Imports.VariantuivEXT_);
        public static Delegates.VariantPointerEXT_ VariantPointerEXT_ = new Delegates.VariantPointerEXT_(Imports.VariantPointerEXT_);
        public static Delegates.EnableVariantClientStateEXT EnableVariantClientStateEXT = new Delegates.EnableVariantClientStateEXT(Imports.EnableVariantClientStateEXT);
        public static Delegates.DisableVariantClientStateEXT DisableVariantClientStateEXT = new Delegates.DisableVariantClientStateEXT(Imports.DisableVariantClientStateEXT);
        public static Delegates.BindLightParameterEXT BindLightParameterEXT = new Delegates.BindLightParameterEXT(Imports.BindLightParameterEXT);
        public static Delegates.BindMaterialParameterEXT BindMaterialParameterEXT = new Delegates.BindMaterialParameterEXT(Imports.BindMaterialParameterEXT);
        public static Delegates.BindTexGenParameterEXT BindTexGenParameterEXT = new Delegates.BindTexGenParameterEXT(Imports.BindTexGenParameterEXT);
        public static Delegates.BindTextureUnitParameterEXT BindTextureUnitParameterEXT = new Delegates.BindTextureUnitParameterEXT(Imports.BindTextureUnitParameterEXT);
        public static Delegates.BindParameterEXT BindParameterEXT = new Delegates.BindParameterEXT(Imports.BindParameterEXT);
        public static Delegates.IsVariantEnabledEXT IsVariantEnabledEXT = new Delegates.IsVariantEnabledEXT(Imports.IsVariantEnabledEXT);
        public static Delegates.GetVariantBooleanvEXT_ GetVariantBooleanvEXT_ = new Delegates.GetVariantBooleanvEXT_(Imports.GetVariantBooleanvEXT_);
        public static Delegates.GetVariantIntegervEXT_ GetVariantIntegervEXT_ = new Delegates.GetVariantIntegervEXT_(Imports.GetVariantIntegervEXT_);
        public static Delegates.GetVariantFloatvEXT_ GetVariantFloatvEXT_ = new Delegates.GetVariantFloatvEXT_(Imports.GetVariantFloatvEXT_);
        public static Delegates.GetVariantPointervEXT_ GetVariantPointervEXT_ = new Delegates.GetVariantPointervEXT_(Imports.GetVariantPointervEXT_);
        public static Delegates.GetInvariantBooleanvEXT_ GetInvariantBooleanvEXT_ = new Delegates.GetInvariantBooleanvEXT_(Imports.GetInvariantBooleanvEXT_);
        public static Delegates.GetInvariantIntegervEXT_ GetInvariantIntegervEXT_ = new Delegates.GetInvariantIntegervEXT_(Imports.GetInvariantIntegervEXT_);
        public static Delegates.GetInvariantFloatvEXT_ GetInvariantFloatvEXT_ = new Delegates.GetInvariantFloatvEXT_(Imports.GetInvariantFloatvEXT_);
        public static Delegates.GetLocalConstantBooleanvEXT_ GetLocalConstantBooleanvEXT_ = new Delegates.GetLocalConstantBooleanvEXT_(Imports.GetLocalConstantBooleanvEXT_);
        public static Delegates.GetLocalConstantIntegervEXT_ GetLocalConstantIntegervEXT_ = new Delegates.GetLocalConstantIntegervEXT_(Imports.GetLocalConstantIntegervEXT_);
        public static Delegates.GetLocalConstantFloatvEXT_ GetLocalConstantFloatvEXT_ = new Delegates.GetLocalConstantFloatvEXT_(Imports.GetLocalConstantFloatvEXT_);
        public static Delegates.VertexStream1sATI VertexStream1sATI = new Delegates.VertexStream1sATI(Imports.VertexStream1sATI);
        public static Delegates.VertexStream1svATI_ VertexStream1svATI_ = new Delegates.VertexStream1svATI_(Imports.VertexStream1svATI_);
        public static Delegates.VertexStream1iATI VertexStream1iATI = new Delegates.VertexStream1iATI(Imports.VertexStream1iATI);
        public static Delegates.VertexStream1ivATI_ VertexStream1ivATI_ = new Delegates.VertexStream1ivATI_(Imports.VertexStream1ivATI_);
        public static Delegates.VertexStream1fATI VertexStream1fATI = new Delegates.VertexStream1fATI(Imports.VertexStream1fATI);
        public static Delegates.VertexStream1fvATI_ VertexStream1fvATI_ = new Delegates.VertexStream1fvATI_(Imports.VertexStream1fvATI_);
        public static Delegates.VertexStream1dATI VertexStream1dATI = new Delegates.VertexStream1dATI(Imports.VertexStream1dATI);
        public static Delegates.VertexStream1dvATI_ VertexStream1dvATI_ = new Delegates.VertexStream1dvATI_(Imports.VertexStream1dvATI_);
        public static Delegates.VertexStream2sATI VertexStream2sATI = new Delegates.VertexStream2sATI(Imports.VertexStream2sATI);
        public static Delegates.VertexStream2svATI_ VertexStream2svATI_ = new Delegates.VertexStream2svATI_(Imports.VertexStream2svATI_);
        public static Delegates.VertexStream2iATI VertexStream2iATI = new Delegates.VertexStream2iATI(Imports.VertexStream2iATI);
        public static Delegates.VertexStream2ivATI_ VertexStream2ivATI_ = new Delegates.VertexStream2ivATI_(Imports.VertexStream2ivATI_);
        public static Delegates.VertexStream2fATI VertexStream2fATI = new Delegates.VertexStream2fATI(Imports.VertexStream2fATI);
        public static Delegates.VertexStream2fvATI_ VertexStream2fvATI_ = new Delegates.VertexStream2fvATI_(Imports.VertexStream2fvATI_);
        public static Delegates.VertexStream2dATI VertexStream2dATI = new Delegates.VertexStream2dATI(Imports.VertexStream2dATI);
        public static Delegates.VertexStream2dvATI_ VertexStream2dvATI_ = new Delegates.VertexStream2dvATI_(Imports.VertexStream2dvATI_);
        public static Delegates.VertexStream3sATI VertexStream3sATI = new Delegates.VertexStream3sATI(Imports.VertexStream3sATI);
        public static Delegates.VertexStream3svATI_ VertexStream3svATI_ = new Delegates.VertexStream3svATI_(Imports.VertexStream3svATI_);
        public static Delegates.VertexStream3iATI VertexStream3iATI = new Delegates.VertexStream3iATI(Imports.VertexStream3iATI);
        public static Delegates.VertexStream3ivATI_ VertexStream3ivATI_ = new Delegates.VertexStream3ivATI_(Imports.VertexStream3ivATI_);
        public static Delegates.VertexStream3fATI VertexStream3fATI = new Delegates.VertexStream3fATI(Imports.VertexStream3fATI);
        public static Delegates.VertexStream3fvATI_ VertexStream3fvATI_ = new Delegates.VertexStream3fvATI_(Imports.VertexStream3fvATI_);
        public static Delegates.VertexStream3dATI VertexStream3dATI = new Delegates.VertexStream3dATI(Imports.VertexStream3dATI);
        public static Delegates.VertexStream3dvATI_ VertexStream3dvATI_ = new Delegates.VertexStream3dvATI_(Imports.VertexStream3dvATI_);
        public static Delegates.VertexStream4sATI VertexStream4sATI = new Delegates.VertexStream4sATI(Imports.VertexStream4sATI);
        public static Delegates.VertexStream4svATI_ VertexStream4svATI_ = new Delegates.VertexStream4svATI_(Imports.VertexStream4svATI_);
        public static Delegates.VertexStream4iATI VertexStream4iATI = new Delegates.VertexStream4iATI(Imports.VertexStream4iATI);
        public static Delegates.VertexStream4ivATI_ VertexStream4ivATI_ = new Delegates.VertexStream4ivATI_(Imports.VertexStream4ivATI_);
        public static Delegates.VertexStream4fATI VertexStream4fATI = new Delegates.VertexStream4fATI(Imports.VertexStream4fATI);
        public static Delegates.VertexStream4fvATI_ VertexStream4fvATI_ = new Delegates.VertexStream4fvATI_(Imports.VertexStream4fvATI_);
        public static Delegates.VertexStream4dATI VertexStream4dATI = new Delegates.VertexStream4dATI(Imports.VertexStream4dATI);
        public static Delegates.VertexStream4dvATI_ VertexStream4dvATI_ = new Delegates.VertexStream4dvATI_(Imports.VertexStream4dvATI_);
        public static Delegates.NormalStream3bATI NormalStream3bATI = new Delegates.NormalStream3bATI(Imports.NormalStream3bATI);
        public static Delegates.NormalStream3bvATI_ NormalStream3bvATI_ = new Delegates.NormalStream3bvATI_(Imports.NormalStream3bvATI_);
        public static Delegates.NormalStream3sATI NormalStream3sATI = new Delegates.NormalStream3sATI(Imports.NormalStream3sATI);
        public static Delegates.NormalStream3svATI_ NormalStream3svATI_ = new Delegates.NormalStream3svATI_(Imports.NormalStream3svATI_);
        public static Delegates.NormalStream3iATI NormalStream3iATI = new Delegates.NormalStream3iATI(Imports.NormalStream3iATI);
        public static Delegates.NormalStream3ivATI_ NormalStream3ivATI_ = new Delegates.NormalStream3ivATI_(Imports.NormalStream3ivATI_);
        public static Delegates.NormalStream3fATI NormalStream3fATI = new Delegates.NormalStream3fATI(Imports.NormalStream3fATI);
        public static Delegates.NormalStream3fvATI_ NormalStream3fvATI_ = new Delegates.NormalStream3fvATI_(Imports.NormalStream3fvATI_);
        public static Delegates.NormalStream3dATI NormalStream3dATI = new Delegates.NormalStream3dATI(Imports.NormalStream3dATI);
        public static Delegates.NormalStream3dvATI_ NormalStream3dvATI_ = new Delegates.NormalStream3dvATI_(Imports.NormalStream3dvATI_);
        public static Delegates.ClientActiveVertexStreamATI ClientActiveVertexStreamATI = new Delegates.ClientActiveVertexStreamATI(Imports.ClientActiveVertexStreamATI);
        public static Delegates.VertexBlendEnviATI VertexBlendEnviATI = new Delegates.VertexBlendEnviATI(Imports.VertexBlendEnviATI);
        public static Delegates.VertexBlendEnvfATI VertexBlendEnvfATI = new Delegates.VertexBlendEnvfATI(Imports.VertexBlendEnvfATI);
        public static Delegates.ElementPointerATI_ ElementPointerATI_ = new Delegates.ElementPointerATI_(Imports.ElementPointerATI_);
        public static Delegates.DrawElementArrayATI DrawElementArrayATI = new Delegates.DrawElementArrayATI(Imports.DrawElementArrayATI);
        public static Delegates.DrawRangeElementArrayATI DrawRangeElementArrayATI = new Delegates.DrawRangeElementArrayATI(Imports.DrawRangeElementArrayATI);
        public static Delegates.DrawMeshArraysSUN DrawMeshArraysSUN = new Delegates.DrawMeshArraysSUN(Imports.DrawMeshArraysSUN);
        public static Delegates.GenOcclusionQueriesNV_ GenOcclusionQueriesNV_ = new Delegates.GenOcclusionQueriesNV_(Imports.GenOcclusionQueriesNV_);
        public static Delegates.DeleteOcclusionQueriesNV_ DeleteOcclusionQueriesNV_ = new Delegates.DeleteOcclusionQueriesNV_(Imports.DeleteOcclusionQueriesNV_);
        public static Delegates.IsOcclusionQueryNV IsOcclusionQueryNV = new Delegates.IsOcclusionQueryNV(Imports.IsOcclusionQueryNV);
        public static Delegates.BeginOcclusionQueryNV BeginOcclusionQueryNV = new Delegates.BeginOcclusionQueryNV(Imports.BeginOcclusionQueryNV);
        public static Delegates.EndOcclusionQueryNV EndOcclusionQueryNV = new Delegates.EndOcclusionQueryNV(Imports.EndOcclusionQueryNV);
        public static Delegates.GetOcclusionQueryivNV_ GetOcclusionQueryivNV_ = new Delegates.GetOcclusionQueryivNV_(Imports.GetOcclusionQueryivNV_);
        public static Delegates.GetOcclusionQueryuivNV_ GetOcclusionQueryuivNV_ = new Delegates.GetOcclusionQueryuivNV_(Imports.GetOcclusionQueryuivNV_);
        public static Delegates.PointParameteriNV PointParameteriNV = new Delegates.PointParameteriNV(Imports.PointParameteriNV);
        public static Delegates.PointParameterivNV_ PointParameterivNV_ = new Delegates.PointParameterivNV_(Imports.PointParameterivNV_);
        public static Delegates.ActiveStencilFaceEXT ActiveStencilFaceEXT = new Delegates.ActiveStencilFaceEXT(Imports.ActiveStencilFaceEXT);
        public static Delegates.ElementPointerAPPLE_ ElementPointerAPPLE_ = new Delegates.ElementPointerAPPLE_(Imports.ElementPointerAPPLE_);
        public static Delegates.DrawElementArrayAPPLE DrawElementArrayAPPLE = new Delegates.DrawElementArrayAPPLE(Imports.DrawElementArrayAPPLE);
        public static Delegates.DrawRangeElementArrayAPPLE DrawRangeElementArrayAPPLE = new Delegates.DrawRangeElementArrayAPPLE(Imports.DrawRangeElementArrayAPPLE);
        public static Delegates.MultiDrawElementArrayAPPLE_ MultiDrawElementArrayAPPLE_ = new Delegates.MultiDrawElementArrayAPPLE_(Imports.MultiDrawElementArrayAPPLE_);
        public static Delegates.MultiDrawRangeElementArrayAPPLE_ MultiDrawRangeElementArrayAPPLE_ = new Delegates.MultiDrawRangeElementArrayAPPLE_(Imports.MultiDrawRangeElementArrayAPPLE_);
        public static Delegates.GenFencesAPPLE_ GenFencesAPPLE_ = new Delegates.GenFencesAPPLE_(Imports.GenFencesAPPLE_);
        public static Delegates.DeleteFencesAPPLE_ DeleteFencesAPPLE_ = new Delegates.DeleteFencesAPPLE_(Imports.DeleteFencesAPPLE_);
        public static Delegates.SetFenceAPPLE SetFenceAPPLE = new Delegates.SetFenceAPPLE(Imports.SetFenceAPPLE);
        public static Delegates.IsFenceAPPLE IsFenceAPPLE = new Delegates.IsFenceAPPLE(Imports.IsFenceAPPLE);
        public static Delegates.TestFenceAPPLE TestFenceAPPLE = new Delegates.TestFenceAPPLE(Imports.TestFenceAPPLE);
        public static Delegates.FinishFenceAPPLE FinishFenceAPPLE = new Delegates.FinishFenceAPPLE(Imports.FinishFenceAPPLE);
        public static Delegates.TestObjectAPPLE TestObjectAPPLE = new Delegates.TestObjectAPPLE(Imports.TestObjectAPPLE);
        public static Delegates.FinishObjectAPPLE FinishObjectAPPLE = new Delegates.FinishObjectAPPLE(Imports.FinishObjectAPPLE);
        public static Delegates.BindVertexArrayAPPLE BindVertexArrayAPPLE = new Delegates.BindVertexArrayAPPLE(Imports.BindVertexArrayAPPLE);
        public static Delegates.DeleteVertexArraysAPPLE_ DeleteVertexArraysAPPLE_ = new Delegates.DeleteVertexArraysAPPLE_(Imports.DeleteVertexArraysAPPLE_);
        public static Delegates.GenVertexArraysAPPLE_ GenVertexArraysAPPLE_ = new Delegates.GenVertexArraysAPPLE_(Imports.GenVertexArraysAPPLE_);
        public static Delegates.IsVertexArrayAPPLE IsVertexArrayAPPLE = new Delegates.IsVertexArrayAPPLE(Imports.IsVertexArrayAPPLE);
        public static Delegates.VertexArrayRangeAPPLE_ VertexArrayRangeAPPLE_ = new Delegates.VertexArrayRangeAPPLE_(Imports.VertexArrayRangeAPPLE_);
        public static Delegates.FlushVertexArrayRangeAPPLE_ FlushVertexArrayRangeAPPLE_ = new Delegates.FlushVertexArrayRangeAPPLE_(Imports.FlushVertexArrayRangeAPPLE_);
        public static Delegates.VertexArrayParameteriAPPLE VertexArrayParameteriAPPLE = new Delegates.VertexArrayParameteriAPPLE(Imports.VertexArrayParameteriAPPLE);
        public static Delegates.DrawBuffersATI_ DrawBuffersATI_ = new Delegates.DrawBuffersATI_(Imports.DrawBuffersATI_);
        public static Delegates.ProgramNamedParameter4fNV_ ProgramNamedParameter4fNV_ = new Delegates.ProgramNamedParameter4fNV_(Imports.ProgramNamedParameter4fNV_);
        public static Delegates.ProgramNamedParameter4dNV_ ProgramNamedParameter4dNV_ = new Delegates.ProgramNamedParameter4dNV_(Imports.ProgramNamedParameter4dNV_);
        public static Delegates.ProgramNamedParameter4fvNV_ ProgramNamedParameter4fvNV_ = new Delegates.ProgramNamedParameter4fvNV_(Imports.ProgramNamedParameter4fvNV_);
        public static Delegates.ProgramNamedParameter4dvNV_ ProgramNamedParameter4dvNV_ = new Delegates.ProgramNamedParameter4dvNV_(Imports.ProgramNamedParameter4dvNV_);
        public static Delegates.GetProgramNamedParameterfvNV_ GetProgramNamedParameterfvNV_ = new Delegates.GetProgramNamedParameterfvNV_(Imports.GetProgramNamedParameterfvNV_);
        public static Delegates.GetProgramNamedParameterdvNV_ GetProgramNamedParameterdvNV_ = new Delegates.GetProgramNamedParameterdvNV_(Imports.GetProgramNamedParameterdvNV_);
        public static Delegates.Vertex2hNV Vertex2hNV = new Delegates.Vertex2hNV(Imports.Vertex2hNV);
        public static Delegates.Vertex2hvNV_ Vertex2hvNV_ = new Delegates.Vertex2hvNV_(Imports.Vertex2hvNV_);
        public static Delegates.Vertex3hNV Vertex3hNV = new Delegates.Vertex3hNV(Imports.Vertex3hNV);
        public static Delegates.Vertex3hvNV_ Vertex3hvNV_ = new Delegates.Vertex3hvNV_(Imports.Vertex3hvNV_);
        public static Delegates.Vertex4hNV Vertex4hNV = new Delegates.Vertex4hNV(Imports.Vertex4hNV);
        public static Delegates.Vertex4hvNV_ Vertex4hvNV_ = new Delegates.Vertex4hvNV_(Imports.Vertex4hvNV_);
        public static Delegates.Normal3hNV Normal3hNV = new Delegates.Normal3hNV(Imports.Normal3hNV);
        public static Delegates.Normal3hvNV_ Normal3hvNV_ = new Delegates.Normal3hvNV_(Imports.Normal3hvNV_);
        public static Delegates.Color3hNV Color3hNV = new Delegates.Color3hNV(Imports.Color3hNV);
        public static Delegates.Color3hvNV_ Color3hvNV_ = new Delegates.Color3hvNV_(Imports.Color3hvNV_);
        public static Delegates.Color4hNV Color4hNV = new Delegates.Color4hNV(Imports.Color4hNV);
        public static Delegates.Color4hvNV_ Color4hvNV_ = new Delegates.Color4hvNV_(Imports.Color4hvNV_);
        public static Delegates.TexCoord1hNV TexCoord1hNV = new Delegates.TexCoord1hNV(Imports.TexCoord1hNV);
        public static Delegates.TexCoord1hvNV_ TexCoord1hvNV_ = new Delegates.TexCoord1hvNV_(Imports.TexCoord1hvNV_);
        public static Delegates.TexCoord2hNV TexCoord2hNV = new Delegates.TexCoord2hNV(Imports.TexCoord2hNV);
        public static Delegates.TexCoord2hvNV_ TexCoord2hvNV_ = new Delegates.TexCoord2hvNV_(Imports.TexCoord2hvNV_);
        public static Delegates.TexCoord3hNV TexCoord3hNV = new Delegates.TexCoord3hNV(Imports.TexCoord3hNV);
        public static Delegates.TexCoord3hvNV_ TexCoord3hvNV_ = new Delegates.TexCoord3hvNV_(Imports.TexCoord3hvNV_);
        public static Delegates.TexCoord4hNV TexCoord4hNV = new Delegates.TexCoord4hNV(Imports.TexCoord4hNV);
        public static Delegates.TexCoord4hvNV_ TexCoord4hvNV_ = new Delegates.TexCoord4hvNV_(Imports.TexCoord4hvNV_);
        public static Delegates.MultiTexCoord1hNV MultiTexCoord1hNV = new Delegates.MultiTexCoord1hNV(Imports.MultiTexCoord1hNV);
        public static Delegates.MultiTexCoord1hvNV_ MultiTexCoord1hvNV_ = new Delegates.MultiTexCoord1hvNV_(Imports.MultiTexCoord1hvNV_);
        public static Delegates.MultiTexCoord2hNV MultiTexCoord2hNV = new Delegates.MultiTexCoord2hNV(Imports.MultiTexCoord2hNV);
        public static Delegates.MultiTexCoord2hvNV_ MultiTexCoord2hvNV_ = new Delegates.MultiTexCoord2hvNV_(Imports.MultiTexCoord2hvNV_);
        public static Delegates.MultiTexCoord3hNV MultiTexCoord3hNV = new Delegates.MultiTexCoord3hNV(Imports.MultiTexCoord3hNV);
        public static Delegates.MultiTexCoord3hvNV_ MultiTexCoord3hvNV_ = new Delegates.MultiTexCoord3hvNV_(Imports.MultiTexCoord3hvNV_);
        public static Delegates.MultiTexCoord4hNV MultiTexCoord4hNV = new Delegates.MultiTexCoord4hNV(Imports.MultiTexCoord4hNV);
        public static Delegates.MultiTexCoord4hvNV_ MultiTexCoord4hvNV_ = new Delegates.MultiTexCoord4hvNV_(Imports.MultiTexCoord4hvNV_);
        public static Delegates.FogCoordhNV FogCoordhNV = new Delegates.FogCoordhNV(Imports.FogCoordhNV);
        public static Delegates.FogCoordhvNV_ FogCoordhvNV_ = new Delegates.FogCoordhvNV_(Imports.FogCoordhvNV_);
        public static Delegates.SecondaryColor3hNV SecondaryColor3hNV = new Delegates.SecondaryColor3hNV(Imports.SecondaryColor3hNV);
        public static Delegates.SecondaryColor3hvNV_ SecondaryColor3hvNV_ = new Delegates.SecondaryColor3hvNV_(Imports.SecondaryColor3hvNV_);
        public static Delegates.VertexWeighthNV VertexWeighthNV = new Delegates.VertexWeighthNV(Imports.VertexWeighthNV);
        public static Delegates.VertexWeighthvNV_ VertexWeighthvNV_ = new Delegates.VertexWeighthvNV_(Imports.VertexWeighthvNV_);
        public static Delegates.VertexAttrib1hNV VertexAttrib1hNV = new Delegates.VertexAttrib1hNV(Imports.VertexAttrib1hNV);
        public static Delegates.VertexAttrib1hvNV_ VertexAttrib1hvNV_ = new Delegates.VertexAttrib1hvNV_(Imports.VertexAttrib1hvNV_);
        public static Delegates.VertexAttrib2hNV VertexAttrib2hNV = new Delegates.VertexAttrib2hNV(Imports.VertexAttrib2hNV);
        public static Delegates.VertexAttrib2hvNV_ VertexAttrib2hvNV_ = new Delegates.VertexAttrib2hvNV_(Imports.VertexAttrib2hvNV_);
        public static Delegates.VertexAttrib3hNV VertexAttrib3hNV = new Delegates.VertexAttrib3hNV(Imports.VertexAttrib3hNV);
        public static Delegates.VertexAttrib3hvNV_ VertexAttrib3hvNV_ = new Delegates.VertexAttrib3hvNV_(Imports.VertexAttrib3hvNV_);
        public static Delegates.VertexAttrib4hNV VertexAttrib4hNV = new Delegates.VertexAttrib4hNV(Imports.VertexAttrib4hNV);
        public static Delegates.VertexAttrib4hvNV_ VertexAttrib4hvNV_ = new Delegates.VertexAttrib4hvNV_(Imports.VertexAttrib4hvNV_);
        public static Delegates.VertexAttribs1hvNV_ VertexAttribs1hvNV_ = new Delegates.VertexAttribs1hvNV_(Imports.VertexAttribs1hvNV_);
        public static Delegates.VertexAttribs2hvNV_ VertexAttribs2hvNV_ = new Delegates.VertexAttribs2hvNV_(Imports.VertexAttribs2hvNV_);
        public static Delegates.VertexAttribs3hvNV_ VertexAttribs3hvNV_ = new Delegates.VertexAttribs3hvNV_(Imports.VertexAttribs3hvNV_);
        public static Delegates.VertexAttribs4hvNV_ VertexAttribs4hvNV_ = new Delegates.VertexAttribs4hvNV_(Imports.VertexAttribs4hvNV_);
        public static Delegates.PixelDataRangeNV_ PixelDataRangeNV_ = new Delegates.PixelDataRangeNV_(Imports.PixelDataRangeNV_);
        public static Delegates.FlushPixelDataRangeNV FlushPixelDataRangeNV = new Delegates.FlushPixelDataRangeNV(Imports.FlushPixelDataRangeNV);
        public static Delegates.PrimitiveRestartNV PrimitiveRestartNV = new Delegates.PrimitiveRestartNV(Imports.PrimitiveRestartNV);
        public static Delegates.PrimitiveRestartIndexNV PrimitiveRestartIndexNV = new Delegates.PrimitiveRestartIndexNV(Imports.PrimitiveRestartIndexNV);
        public static Delegates.MapObjectBufferATI MapObjectBufferATI = new Delegates.MapObjectBufferATI(Imports.MapObjectBufferATI);
        public static Delegates.UnmapObjectBufferATI UnmapObjectBufferATI = new Delegates.UnmapObjectBufferATI(Imports.UnmapObjectBufferATI);
        public static Delegates.StencilOpSeparateATI StencilOpSeparateATI = new Delegates.StencilOpSeparateATI(Imports.StencilOpSeparateATI);
        public static Delegates.StencilFuncSeparateATI StencilFuncSeparateATI = new Delegates.StencilFuncSeparateATI(Imports.StencilFuncSeparateATI);
        public static Delegates.VertexAttribArrayObjectATI VertexAttribArrayObjectATI = new Delegates.VertexAttribArrayObjectATI(Imports.VertexAttribArrayObjectATI);
        public static Delegates.GetVertexAttribArrayObjectfvATI_ GetVertexAttribArrayObjectfvATI_ = new Delegates.GetVertexAttribArrayObjectfvATI_(Imports.GetVertexAttribArrayObjectfvATI_);
        public static Delegates.GetVertexAttribArrayObjectivATI_ GetVertexAttribArrayObjectivATI_ = new Delegates.GetVertexAttribArrayObjectivATI_(Imports.GetVertexAttribArrayObjectivATI_);
        public static Delegates.DepthBoundsEXT DepthBoundsEXT = new Delegates.DepthBoundsEXT(Imports.DepthBoundsEXT);
        public static Delegates.BlendEquationSeparateEXT BlendEquationSeparateEXT = new Delegates.BlendEquationSeparateEXT(Imports.BlendEquationSeparateEXT);
        public static Delegates.IsRenderbufferEXT IsRenderbufferEXT = new Delegates.IsRenderbufferEXT(Imports.IsRenderbufferEXT);
        public static Delegates.BindRenderbufferEXT BindRenderbufferEXT = new Delegates.BindRenderbufferEXT(Imports.BindRenderbufferEXT);
        public static Delegates.DeleteRenderbuffersEXT_ DeleteRenderbuffersEXT_ = new Delegates.DeleteRenderbuffersEXT_(Imports.DeleteRenderbuffersEXT_);
        public static Delegates.GenRenderbuffersEXT_ GenRenderbuffersEXT_ = new Delegates.GenRenderbuffersEXT_(Imports.GenRenderbuffersEXT_);
        public static Delegates.RenderbufferStorageEXT RenderbufferStorageEXT = new Delegates.RenderbufferStorageEXT(Imports.RenderbufferStorageEXT);
        public static Delegates.GetRenderbufferParameterivEXT_ GetRenderbufferParameterivEXT_ = new Delegates.GetRenderbufferParameterivEXT_(Imports.GetRenderbufferParameterivEXT_);
        public static Delegates.IsFramebufferEXT IsFramebufferEXT = new Delegates.IsFramebufferEXT(Imports.IsFramebufferEXT);
        public static Delegates.BindFramebufferEXT BindFramebufferEXT = new Delegates.BindFramebufferEXT(Imports.BindFramebufferEXT);
        public static Delegates.DeleteFramebuffersEXT_ DeleteFramebuffersEXT_ = new Delegates.DeleteFramebuffersEXT_(Imports.DeleteFramebuffersEXT_);
        public static Delegates.GenFramebuffersEXT_ GenFramebuffersEXT_ = new Delegates.GenFramebuffersEXT_(Imports.GenFramebuffersEXT_);
        public static Delegates.CheckFramebufferStatusEXT CheckFramebufferStatusEXT = new Delegates.CheckFramebufferStatusEXT(Imports.CheckFramebufferStatusEXT);
        public static Delegates.FramebufferTexture1DEXT FramebufferTexture1DEXT = new Delegates.FramebufferTexture1DEXT(Imports.FramebufferTexture1DEXT);
        public static Delegates.FramebufferTexture2DEXT FramebufferTexture2DEXT = new Delegates.FramebufferTexture2DEXT(Imports.FramebufferTexture2DEXT);
        public static Delegates.FramebufferTexture3DEXT FramebufferTexture3DEXT = new Delegates.FramebufferTexture3DEXT(Imports.FramebufferTexture3DEXT);
        public static Delegates.FramebufferRenderbufferEXT FramebufferRenderbufferEXT = new Delegates.FramebufferRenderbufferEXT(Imports.FramebufferRenderbufferEXT);
        public static Delegates.GetFramebufferAttachmentParameterivEXT_ GetFramebufferAttachmentParameterivEXT_ = new Delegates.GetFramebufferAttachmentParameterivEXT_(Imports.GetFramebufferAttachmentParameterivEXT_);
        public static Delegates.GenerateMipmapEXT GenerateMipmapEXT = new Delegates.GenerateMipmapEXT(Imports.GenerateMipmapEXT);
        public static Delegates.StringMarkerGREMEDY_ StringMarkerGREMEDY_ = new Delegates.StringMarkerGREMEDY_(Imports.StringMarkerGREMEDY_);
        public static Delegates.StencilClearTagEXT StencilClearTagEXT = new Delegates.StencilClearTagEXT(Imports.StencilClearTagEXT);
        public static Delegates.BlitFramebufferEXT BlitFramebufferEXT = new Delegates.BlitFramebufferEXT(Imports.BlitFramebufferEXT);
        public static Delegates.RenderbufferStorageMultisampleEXT RenderbufferStorageMultisampleEXT = new Delegates.RenderbufferStorageMultisampleEXT(Imports.RenderbufferStorageMultisampleEXT);
        public static Delegates.GetQueryObjecti64vEXT_ GetQueryObjecti64vEXT_ = new Delegates.GetQueryObjecti64vEXT_(Imports.GetQueryObjecti64vEXT_);
        public static Delegates.GetQueryObjectui64vEXT_ GetQueryObjectui64vEXT_ = new Delegates.GetQueryObjectui64vEXT_(Imports.GetQueryObjectui64vEXT_);
        public static Delegates.ProgramEnvParameters4fvEXT_ ProgramEnvParameters4fvEXT_ = new Delegates.ProgramEnvParameters4fvEXT_(Imports.ProgramEnvParameters4fvEXT_);
        public static Delegates.ProgramLocalParameters4fvEXT_ ProgramLocalParameters4fvEXT_ = new Delegates.ProgramLocalParameters4fvEXT_(Imports.ProgramLocalParameters4fvEXT_);

        #endregion

        #region Wrappers

        #region MultiTexCoord1dvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1dvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord1dvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord1dvARB(GLenum target, object v)

        public static
        void MultiTexCoord1dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1dvARB(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord1dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1fvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord1fvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, object v)

        public static
        void MultiTexCoord1fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord1fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1ivARB(GLenum target, IntPtr v)
        {
            MultiTexCoord1ivARB_(target, v);
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, object v)

        public static
        void MultiTexCoord1ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, GLint[] v)

        public static
        void MultiTexCoord1ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1svARB(GLenum target, IntPtr v)
        {
            MultiTexCoord1svARB_(target, v);
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, object v)

        public static
        void MultiTexCoord1svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord1svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2dvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord2dvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, object v)

        public static
        void MultiTexCoord2dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord2dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2fvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord2fvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, object v)

        public static
        void MultiTexCoord2fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord2fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2ivARB(GLenum target, IntPtr v)
        {
            MultiTexCoord2ivARB_(target, v);
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, object v)

        public static
        void MultiTexCoord2ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, GLint[] v)

        public static
        void MultiTexCoord2ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2svARB(GLenum target, IntPtr v)
        {
            MultiTexCoord2svARB_(target, v);
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, object v)

        public static
        void MultiTexCoord2svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord2svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3dvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord3dvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, object v)

        public static
        void MultiTexCoord3dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord3dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3fvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord3fvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, object v)

        public static
        void MultiTexCoord3fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord3fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3ivARB(GLenum target, IntPtr v)
        {
            MultiTexCoord3ivARB_(target, v);
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, object v)

        public static
        void MultiTexCoord3ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, GLint[] v)

        public static
        void MultiTexCoord3ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3svARB(GLenum target, IntPtr v)
        {
            MultiTexCoord3svARB_(target, v);
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, object v)

        public static
        void MultiTexCoord3svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord3svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4dvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord4dvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, object v)

        public static
        void MultiTexCoord4dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, GLdouble[] v)

        public static
        void MultiTexCoord4dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4fvARB(GLenum target, IntPtr v)
        {
            MultiTexCoord4fvARB_(target, v);
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, object v)

        public static
        void MultiTexCoord4fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, GLfloat[] v)

        public static
        void MultiTexCoord4fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4ivARB(GLenum target, IntPtr v)
        {
            MultiTexCoord4ivARB_(target, v);
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, object v)

        public static
        void MultiTexCoord4ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, GLint[] v)

        public static
        void MultiTexCoord4ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4svARB(GLenum target, IntPtr v)
        {
            MultiTexCoord4svARB_(target, v);
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, object v)

        public static
        void MultiTexCoord4svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, GLshort[] v)

        public static
        void MultiTexCoord4svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixfARB(IntPtr m)

        public static
        void LoadTransposeMatrixfARB(IntPtr m)
        {
            LoadTransposeMatrixfARB_(m);
        }

        #endregion

        #region LoadTransposeMatrixfARB(object m)

        public static
        void LoadTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixfARB(GLfloat[] m)

        public static
        void LoadTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixdARB(IntPtr m)

        public static
        void LoadTransposeMatrixdARB(IntPtr m)
        {
            LoadTransposeMatrixdARB_(m);
        }

        #endregion

        #region LoadTransposeMatrixdARB(object m)

        public static
        void LoadTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixdARB(GLdouble[] m)

        public static
        void LoadTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                LoadTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixfARB(IntPtr m)

        public static
        void MultTransposeMatrixfARB(IntPtr m)
        {
            MultTransposeMatrixfARB_(m);
        }

        #endregion

        #region MultTransposeMatrixfARB(object m)

        public static
        void MultTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixfARB(GLfloat[] m)

        public static
        void MultTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixdARB(IntPtr m)

        public static
        void MultTransposeMatrixdARB(IntPtr m)
        {
            MultTransposeMatrixdARB_(m);
        }

        #endregion

        #region MultTransposeMatrixdARB(object m)

        public static
        void MultTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixdARB(GLdouble[] m)

        public static
        void MultTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                MultTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage3DARB_(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage3DARB_(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage2DARB_(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage2DARB_(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            CompressedTexImage1DARB_(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        public static
        void CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexImage1DARB_(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage3DARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage3DARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage2DARB_(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage2DARB_(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)

        public static
        void CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, IntPtr data)
        {
            CompressedTexSubImage1DARB_(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)

        public static
        void CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                CompressedTexSubImage1DARB_(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, IntPtr img)

        public static
        void GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, IntPtr img)
        {
            GetCompressedTexImageARB_(target, level, img);
        }

        #endregion

        #region GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, object img)

        public static
        void GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                GetCompressedTexImageARB_(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, IntPtr parameters)

        public static
        void PointParameterfvARB(GLenum pname, IntPtr parameters)
        {
            PointParameterfvARB_(pname, parameters);
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, object parameters)

        public static
        void PointParameterfvARB(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvARB_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, GLfloat[] parameters)

        public static
        void PointParameterfvARB(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvARB_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightbvARB(GLint size, IntPtr weights)

        public static
        void WeightbvARB(GLint size, IntPtr weights)
        {
            WeightbvARB_(size, weights);
        }

        #endregion

        #region WeightbvARB(GLint size, object weights)

        public static
        void WeightbvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightbvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightbvARB(GLint size, GLbyte[] weights)

        public static
        void WeightbvARB(GLint size, GLbyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightbvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightsvARB(GLint size, IntPtr weights)

        public static
        void WeightsvARB(GLint size, IntPtr weights)
        {
            WeightsvARB_(size, weights);
        }

        #endregion

        #region WeightsvARB(GLint size, object weights)

        public static
        void WeightsvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightsvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightsvARB(GLint size, GLshort[] weights)

        public static
        void WeightsvARB(GLint size, GLshort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightsvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightivARB(GLint size, IntPtr weights)

        public static
        void WeightivARB(GLint size, IntPtr weights)
        {
            WeightivARB_(size, weights);
        }

        #endregion

        #region WeightivARB(GLint size, object weights)

        public static
        void WeightivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightivARB(GLint size, GLint[] weights)

        public static
        void WeightivARB(GLint size, GLint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightfvARB(GLint size, IntPtr weights)

        public static
        void WeightfvARB(GLint size, IntPtr weights)
        {
            WeightfvARB_(size, weights);
        }

        #endregion

        #region WeightfvARB(GLint size, object weights)

        public static
        void WeightfvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightfvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightfvARB(GLint size, GLfloat[] weights)

        public static
        void WeightfvARB(GLint size, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightfvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightdvARB(GLint size, IntPtr weights)

        public static
        void WeightdvARB(GLint size, IntPtr weights)
        {
            WeightdvARB_(size, weights);
        }

        #endregion

        #region WeightdvARB(GLint size, object weights)

        public static
        void WeightdvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightdvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightdvARB(GLint size, GLdouble[] weights)

        public static
        void WeightdvARB(GLint size, GLdouble[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightdvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightubvARB(GLint size, IntPtr weights)

        public static
        void WeightubvARB(GLint size, IntPtr weights)
        {
            WeightubvARB_(size, weights);
        }

        #endregion

        #region WeightubvARB(GLint size, object weights)

        public static
        void WeightubvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightubvARB(GLint size, GLubyte[] weights)

        public static
        void WeightubvARB(GLint size, GLubyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightusvARB(GLint size, IntPtr weights)

        public static
        void WeightusvARB(GLint size, IntPtr weights)
        {
            WeightusvARB_(size, weights);
        }

        #endregion

        #region WeightusvARB(GLint size, object weights)

        public static
        void WeightusvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightusvARB(GLint size, GLushort[] weights)

        public static
        void WeightusvARB(GLint size, GLushort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightuivARB(GLint size, IntPtr weights)

        public static
        void WeightuivARB(GLint size, IntPtr weights)
        {
            WeightuivARB_(size, weights);
        }

        #endregion

        #region WeightuivARB(GLint size, object weights)

        public static
        void WeightuivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightuivARB(GLint size, GLuint[] weights)

        public static
        void WeightuivARB(GLint size, GLuint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                WeightuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void WeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            WeightPointerARB_(size, type, stride, pointer);
        }

        #endregion

        #region WeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void WeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                WeightPointerARB_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, IntPtr indices)

        public static
        void MatrixIndexubvARB(GLint size, IntPtr indices)
        {
            MatrixIndexubvARB_(size, indices);
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, object indices)

        public static
        void MatrixIndexubvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, GLubyte[] indices)

        public static
        void MatrixIndexubvARB(GLint size, GLubyte[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, IntPtr indices)

        public static
        void MatrixIndexusvARB(GLint size, IntPtr indices)
        {
            MatrixIndexusvARB_(size, indices);
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, object indices)

        public static
        void MatrixIndexusvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, GLushort[] indices)

        public static
        void MatrixIndexusvARB(GLint size, GLushort[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, IntPtr indices)

        public static
        void MatrixIndexuivARB(GLint size, IntPtr indices)
        {
            MatrixIndexuivARB_(size, indices);
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, object indices)

        public static
        void MatrixIndexuivARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, GLuint[] indices)

        public static
        void MatrixIndexuivARB(GLint size, GLuint[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MatrixIndexuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            MatrixIndexPointerARB_(size, type, stride, pointer);
        }

        #endregion

        #region MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                MatrixIndexPointerARB_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvARB(IntPtr v)

        public static
        void WindowPos2dvARB(IntPtr v)
        {
            WindowPos2dvARB_(v);
        }

        #endregion

        #region WindowPos2dvARB(object v)

        public static
        void WindowPos2dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvARB(GLdouble[] v)

        public static
        void WindowPos2dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvARB(IntPtr v)

        public static
        void WindowPos2fvARB(IntPtr v)
        {
            WindowPos2fvARB_(v);
        }

        #endregion

        #region WindowPos2fvARB(object v)

        public static
        void WindowPos2fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvARB(GLfloat[] v)

        public static
        void WindowPos2fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivARB(IntPtr v)

        public static
        void WindowPos2ivARB(IntPtr v)
        {
            WindowPos2ivARB_(v);
        }

        #endregion

        #region WindowPos2ivARB(object v)

        public static
        void WindowPos2ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivARB(GLint[] v)

        public static
        void WindowPos2ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svARB(IntPtr v)

        public static
        void WindowPos2svARB(IntPtr v)
        {
            WindowPos2svARB_(v);
        }

        #endregion

        #region WindowPos2svARB(object v)

        public static
        void WindowPos2svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svARB(GLshort[] v)

        public static
        void WindowPos2svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvARB(IntPtr v)

        public static
        void WindowPos3dvARB(IntPtr v)
        {
            WindowPos3dvARB_(v);
        }

        #endregion

        #region WindowPos3dvARB(object v)

        public static
        void WindowPos3dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvARB(GLdouble[] v)

        public static
        void WindowPos3dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvARB(IntPtr v)

        public static
        void WindowPos3fvARB(IntPtr v)
        {
            WindowPos3fvARB_(v);
        }

        #endregion

        #region WindowPos3fvARB(object v)

        public static
        void WindowPos3fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvARB(GLfloat[] v)

        public static
        void WindowPos3fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivARB(IntPtr v)

        public static
        void WindowPos3ivARB(IntPtr v)
        {
            WindowPos3ivARB_(v);
        }

        #endregion

        #region WindowPos3ivARB(object v)

        public static
        void WindowPos3ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivARB(GLint[] v)

        public static
        void WindowPos3ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svARB(IntPtr v)

        public static
        void WindowPos3svARB(IntPtr v)
        {
            WindowPos3svARB_(v);
        }

        #endregion

        #region WindowPos3svARB(object v)

        public static
        void WindowPos3svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svARB(GLshort[] v)

        public static
        void WindowPos3svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib1dvARB(GLuint index, IntPtr v)
        {
            VertexAttrib1dvARB_(index, v);
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, object v)

        public static
        void VertexAttrib1dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib1dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib1fvARB(GLuint index, IntPtr v)
        {
            VertexAttrib1fvARB_(index, v);
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, object v)

        public static
        void VertexAttrib1fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib1fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib1svARB(GLuint index, IntPtr v)
        {
            VertexAttrib1svARB_(index, v);
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, object v)

        public static
        void VertexAttrib1svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, GLshort[] v)

        public static
        void VertexAttrib1svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib2dvARB(GLuint index, IntPtr v)
        {
            VertexAttrib2dvARB_(index, v);
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, object v)

        public static
        void VertexAttrib2dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib2dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib2fvARB(GLuint index, IntPtr v)
        {
            VertexAttrib2fvARB_(index, v);
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, object v)

        public static
        void VertexAttrib2fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib2fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib2svARB(GLuint index, IntPtr v)
        {
            VertexAttrib2svARB_(index, v);
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, object v)

        public static
        void VertexAttrib2svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, GLshort[] v)

        public static
        void VertexAttrib2svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib3dvARB(GLuint index, IntPtr v)
        {
            VertexAttrib3dvARB_(index, v);
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, object v)

        public static
        void VertexAttrib3dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib3dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib3fvARB(GLuint index, IntPtr v)
        {
            VertexAttrib3fvARB_(index, v);
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, object v)

        public static
        void VertexAttrib3fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib3fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib3svARB(GLuint index, IntPtr v)
        {
            VertexAttrib3svARB_(index, v);
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, object v)

        public static
        void VertexAttrib3svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, GLshort[] v)

        public static
        void VertexAttrib3svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NbvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NbvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, object v)

        public static
        void VertexAttrib4NbvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NbvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, GLbyte[] v)

        public static
        void VertexAttrib4NbvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NbvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NivARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NivARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, object v)

        public static
        void VertexAttrib4NivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, GLint[] v)

        public static
        void VertexAttrib4NivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NsvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NsvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, object v)

        public static
        void VertexAttrib4NsvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NsvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, GLshort[] v)

        public static
        void VertexAttrib4NsvARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NsvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NubvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NubvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, object v)

        public static
        void VertexAttrib4NubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, GLubyte[] v)

        public static
        void VertexAttrib4NubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NuivARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NuivARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, object v)

        public static
        void VertexAttrib4NuivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NuivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, GLuint[] v)

        public static
        void VertexAttrib4NuivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NuivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4NusvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4NusvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, object v)

        public static
        void VertexAttrib4NusvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NusvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, GLushort[] v)

        public static
        void VertexAttrib4NusvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4NusvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4bvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4bvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, object v)

        public static
        void VertexAttrib4bvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4bvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, GLbyte[] v)

        public static
        void VertexAttrib4bvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4bvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4dvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4dvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, object v)

        public static
        void VertexAttrib4dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib4dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4fvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4fvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, object v)

        public static
        void VertexAttrib4fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib4fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4ivARB(GLuint index, IntPtr v)
        {
            VertexAttrib4ivARB_(index, v);
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, object v)

        public static
        void VertexAttrib4ivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, GLint[] v)

        public static
        void VertexAttrib4ivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4svARB(GLuint index, IntPtr v)
        {
            VertexAttrib4svARB_(index, v);
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, object v)

        public static
        void VertexAttrib4svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, GLshort[] v)

        public static
        void VertexAttrib4svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4ubvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4ubvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, object v)

        public static
        void VertexAttrib4ubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, GLubyte[] v)

        public static
        void VertexAttrib4ubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4uivARB(GLuint index, IntPtr v)
        {
            VertexAttrib4uivARB_(index, v);
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, object v)

        public static
        void VertexAttrib4uivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4uivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, GLuint[] v)

        public static
        void VertexAttrib4uivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4uivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, IntPtr v)

        public static
        void VertexAttrib4usvARB(GLuint index, IntPtr v)
        {
            VertexAttrib4usvARB_(index, v);
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, object v)

        public static
        void VertexAttrib4usvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4usvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, GLushort[] v)

        public static
        void VertexAttrib4usvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4usvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribPointerARB(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer)

        public static
        void VertexAttribPointerARB(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, IntPtr pointer)
        {
            VertexAttribPointerARB_(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region VertexAttribPointerARB(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, object pointer)

        public static
        void VertexAttribPointerARB(GLuint index, GLint size, GLenum type, Enums.Boolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexAttribPointerARB_(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)

        public static
        void ProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)
        {
            ProgramStringARB_(target, format, len, @string);
        }

        #endregion

        #region ProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)

        public static
        void ProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                ProgramStringARB_(target, format, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, IntPtr programs)

        public static
        void DeleteProgramsARB(GLsizei n, IntPtr programs)
        {
            DeleteProgramsARB_(n, programs);
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, object programs)

        public static
        void DeleteProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                DeleteProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, GLuint[] programs)

        public static
        void DeleteProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                DeleteProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsARB(GLsizei n, IntPtr programs)

        public static
        void GenProgramsARB(GLsizei n, IntPtr programs)
        {
            GenProgramsARB_(n, programs);
        }

        #endregion

        #region GenProgramsARB(GLsizei n, object programs)

        public static
        void GenProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                GenProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsARB(GLsizei n, GLuint[] programs)

        public static
        void GenProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                GenProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void ProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            ProgramEnvParameter4dvARB_(target, index, parameters);
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)

        public static
        void ProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void ProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void ProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            ProgramEnvParameter4fvARB_(target, index, parameters);
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)

        public static
        void ProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void ProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void ProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            ProgramLocalParameter4dvARB_(target, index, parameters);
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)

        public static
        void ProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void ProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void ProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            ProgramLocalParameter4fvARB_(target, index, parameters);
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)

        public static
        void ProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void ProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void GetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            GetProgramEnvParameterdvARB_(target, index, parameters);
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)

        public static
        void GetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramEnvParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramEnvParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void GetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            GetProgramEnvParameterfvARB_(target, index, parameters);
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)

        public static
        void GetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramEnvParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramEnvParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void GetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            GetProgramLocalParameterdvARB_(target, index, parameters);
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)

        public static
        void GetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramLocalParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramLocalParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void GetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            GetProgramLocalParameterfvARB_(target, index, parameters);
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)

        public static
        void GetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramLocalParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramLocalParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetProgramivARB_(target, pname, parameters);
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, object parameters)

        public static
        void GetProgramivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)

        public static
        void GetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)
        {
            GetProgramStringARB_(target, pname, @string);
        }

        #endregion

        #region GetProgramStringARB(GLenum target, GLenum pname, object @string)

        public static
        void GetProgramStringARB(GLenum target, GLenum pname, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                GetProgramStringARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribdvARB_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribfvARB_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribivARB_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribivARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribivARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void GetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribivARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)
        {
            GetVertexAttribPointervARB_(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)

        public static
        void GetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointervARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointervARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, IntPtr buffers)

        public static
        void DeleteBuffersARB(GLsizei n, IntPtr buffers)
        {
            DeleteBuffersARB_(n, buffers);
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, object buffers)

        public static
        void DeleteBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                DeleteBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, GLuint[] buffers)

        public static
        void DeleteBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                DeleteBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffersARB(GLsizei n, IntPtr buffers)

        public static
        void GenBuffersARB(GLsizei n, IntPtr buffers)
        {
            GenBuffersARB_(n, buffers);
        }

        #endregion

        #region GenBuffersARB(GLsizei n, object buffers)

        public static
        void GenBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                GenBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffersARB(GLsizei n, GLuint[] buffers)

        public static
        void GenBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                GenBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)

        public static
        void BufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)
        {
            BufferDataARB_(target, size, data, usage);
        }

        #endregion

        #region BufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)

        public static
        void BufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                BufferDataARB_(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        public static
        void BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            BufferSubDataARB_(target, offset, size, data);
        }

        #endregion

        #region BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        public static
        void BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                BufferSubDataARB_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        public static
        void GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            GetBufferSubDataARB_(target, offset, size, data);
        }

        #endregion

        #region GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        public static
        void GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetBufferSubDataARB_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetBufferParameterivARB_(target, pname, parameters);
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, object parameters)

        public static
        void GetBufferParameterivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferParameterivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferParameterivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetBufferPointervARB_(target, pname, parameters);
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, object parameters)

        public static
        void GetBufferPointervARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferPointervARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)

        public static
        void GetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetBufferPointervARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueriesARB(GLsizei n, IntPtr ids)

        public static
        void GenQueriesARB(GLsizei n, IntPtr ids)
        {
            GenQueriesARB_(n, ids);
        }

        #endregion

        #region GenQueriesARB(GLsizei n, object ids)

        public static
        void GenQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueriesARB(GLsizei n, GLuint[] ids)

        public static
        void GenQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, IntPtr ids)

        public static
        void DeleteQueriesARB(GLsizei n, IntPtr ids)
        {
            DeleteQueriesARB_(n, ids);
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, object ids)

        public static
        void DeleteQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, GLuint[] ids)

        public static
        void DeleteQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, IntPtr parameters)

        public static
        void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, IntPtr parameters)
        {
            GetQueryivARB_(target, pname, parameters);
        }

        #endregion

        #region GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, object parameters)

        public static
        void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, GLint[] parameters)

        public static
        void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters)

        public static
        void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters)
        {
            GetQueryObjectivARB_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, object parameters)

        public static
        void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, GLint[] parameters)

        public static
        void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters)

        public static
        void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, IntPtr parameters)
        {
            GetQueryObjectuivARB_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, object parameters)

        public static
        void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectuivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, GLuint[] parameters)

        public static
        void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectuivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length)

        public static
        void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length)
        {
            ShaderSourceARB_(shaderObj, count, @string, length);
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, object length)

        public static
        void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                ShaderSourceARB_(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, GLint[] length)

        public static
        void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                ShaderSourceARB_(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform1fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform1fvARB_(location, count, value);
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, object value)

        public static
        void Uniform1fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform2fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform2fvARB_(location, count, value);
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, object value)

        public static
        void Uniform2fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform3fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform3fvARB_(location, count, value);
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, object value)

        public static
        void Uniform3fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform4fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform4fvARB_(location, count, value);
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, object value)

        public static
        void Uniform4fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void Uniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform1ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform1ivARB_(location, count, value);
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, object value)

        public static
        void Uniform1ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform1ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform1ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform2ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform2ivARB_(location, count, value);
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, object value)

        public static
        void Uniform2ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform2ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform2ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform3ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform3ivARB_(location, count, value);
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, object value)

        public static
        void Uniform3ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform3ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform3ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void Uniform4ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Uniform4ivARB_(location, count, value);
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, object value)

        public static
        void Uniform4ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void Uniform4ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Uniform4ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix2fvARB_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix2fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix2fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix3fvARB_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix3fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix3fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)

        public static
        void UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, IntPtr value)
        {
            UniformMatrix4fvARB_(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)

        public static
        void UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)

        public static
        void UniformMatrix4fvARB(GLint location, GLsizei count, Enums.Boolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                UniformMatrix4fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters)

        public static
        void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters)
        {
            GetObjectParameterfvARB_(obj, pname, parameters);
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, object parameters)

        public static
        void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectParameterfvARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLfloat[] parameters)

        public static
        void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectParameterfvARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters)

        public static
        void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, IntPtr parameters)
        {
            GetObjectParameterivARB_(obj, pname, parameters);
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, object parameters)

        public static
        void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectParameterivARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLint[] parameters)

        public static
        void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectParameterivARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)

        public static
        void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)
        {
            GetInfoLogARB_(obj, maxLength, length, infoLog);
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)

        public static
        void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetInfoLogARB_(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)

        public static
        void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetInfoLogARB_(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            GetAttachedObjectsARB_(containerObj, maxCount, count, obj);
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)

        public static
        void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                GetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GetActiveUniformARB_(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)

        public static
        void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_shader_objects[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        public static
        void GetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            GetUniformfvARB_(programObj, location, parameters);
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)

        public static
        void GetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformfvARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)

        public static
        void GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformfvARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        public static
        void GetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            GetUniformivARB_(programObj, location, parameters);
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, object parameters)

        public static
        void GetUniformivARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformivARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)

        public static
        void GetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetUniformivARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)

        public static
        void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)
        {
            GetShaderSourceARB_(obj, maxLength, length, source);
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)

        public static
        void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderSourceARB_(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)

        public static
        void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetShaderSourceARB_(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GetActiveAttribARB_(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)

        public static
        void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_vertex_shader[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                GetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, IntPtr bufs)

        public static
        void DrawBuffersARB(GLsizei n, IntPtr bufs)
        {
            DrawBuffersARB_(n, bufs);
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, object bufs)

        public static
        void DrawBuffersARB(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, GLenum[] bufs)

        public static
        void DrawBuffersARB(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexImage3DEXT_(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexImage3DEXT_(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, IntPtr weights)

        public static
        void GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, IntPtr weights)
        {
            GetTexFilterFuncSGIS_(target, filter, weights);
        }

        #endregion

        #region GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, object weights)

        public static
        void GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                GetTexFilterFuncSGIS_(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLfloat[] weights)

        public static
        void GetTexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                GetTexFilterFuncSGIS_(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, IntPtr weights)

        public static
        void TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, IntPtr weights)
        {
            TexFilterFuncSGIS_(target, filter, n, weights);
        }

        #endregion

        #region TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, object weights)

        public static
        void TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                TexFilterFuncSGIS_(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, GLfloat[] weights)

        public static
        void TexFilterFuncSGIS(Enums.TextureTarget target, GLenum filter, GLsizei n, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                TexFilterFuncSGIS_(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage1DEXT_(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage1DEXT_(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage2DEXT_(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage2DEXT_(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramEXT(Enums.HistogramTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)

        public static
        void GetHistogramEXT(Enums.HistogramTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)
        {
            GetHistogramEXT_(target, reset, format, type, values);
        }

        #endregion

        #region GetHistogramEXT(Enums.HistogramTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)

        public static
        void GetHistogramEXT(Enums.HistogramTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetHistogramEXT_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters)

        public static
        void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters)
        {
            GetHistogramParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, object parameters)

        public static
        void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLfloat[] parameters)

        public static
        void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters)

        public static
        void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, IntPtr parameters)
        {
            GetHistogramParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, object parameters)

        public static
        void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLint[] parameters)

        public static
        void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetHistogramParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxEXT(Enums.MinmaxTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)

        public static
        void GetMinmaxEXT(Enums.MinmaxTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, IntPtr values)
        {
            GetMinmaxEXT_(target, reset, format, type, values);
        }

        #endregion

        #region GetMinmaxEXT(Enums.MinmaxTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)

        public static
        void GetMinmaxEXT(Enums.MinmaxTargetEXT target, Enums.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                GetMinmaxEXT_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters)

        public static
        void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters)
        {
            GetMinmaxParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, object parameters)

        public static
        void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLfloat[] parameters)

        public static
        void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters)

        public static
        void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, IntPtr parameters)
        {
            GetMinmaxParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, object parameters)

        public static
        void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLint[] parameters)

        public static
        void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMinmaxParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            ConvolutionFilter1DEXT_(target, internalformat, width, format, type, image);
        }

        #endregion

        #region ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                ConvolutionFilter1DEXT_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            ConvolutionFilter2DEXT_(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                ConvolutionFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)

        public static
        void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)
        {
            ConvolutionParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)

        public static
        void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] parameters)

        public static
        void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)

        public static
        void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)
        {
            ConvolutionParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)

        public static
        void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] parameters)

        public static
        void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)

        public static
        void GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr image)
        {
            GetConvolutionFilterEXT_(target, format, type, image);
        }

        #endregion

        #region GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object image)

        public static
        void GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                GetConvolutionFilterEXT_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)

        public static
        void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)
        {
            GetConvolutionParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)

        public static
        void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] parameters)

        public static
        void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)

        public static
        void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, IntPtr parameters)
        {
            GetConvolutionParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)

        public static
        void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] parameters)

        public static
        void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            GetSeparableFilterEXT_(target, format, type, row, column, span);
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, object span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, IntPtr span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, object span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, IntPtr span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, object span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, IntPtr span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)

        public static
        void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                GetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column)

        public static
        void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, IntPtr column)
        {
            SeparableFilter2DEXT_(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column)

        public static
        void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                SeparableFilter2DEXT_(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column)

        public static
        void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                SeparableFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)

        public static
        void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                SeparableFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)

        public static
        void ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)
        {
            ColorTableSGI_(target, internalformat, width, format, type, table);
        }

        #endregion

        #region ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)

        public static
        void ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                ColorTableSGI_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters)

        public static
        void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters)
        {
            ColorTableParameterfvSGI_(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, object parameters)

        public static
        void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLfloat[] parameters)

        public static
        void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters)

        public static
        void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, IntPtr parameters)
        {
            ColorTableParameterivSGI_(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, object parameters)

        public static
        void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLint[] parameters)

        public static
        void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)

        public static
        void GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)
        {
            GetColorTableSGI_(target, format, type, table);
        }

        #endregion

        #region GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, object table)

        public static
        void GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                GetColorTableSGI_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters)

        public static
        void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters)
        {
            GetColorTableParameterfvSGI_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, object parameters)

        public static
        void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLfloat[] parameters)

        public static
        void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters)

        public static
        void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, IntPtr parameters)
        {
            GetColorTableParameterivSGI_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, object parameters)

        public static
        void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLint[] parameters)

        public static
        void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)

        public static
        void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)
        {
            PixelTexGenParameterivSGIS_(pname, parameters);
        }

        #endregion

        #region PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)

        public static
        void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] parameters)

        public static
        void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)

        public static
        void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)
        {
            PixelTexGenParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)

        public static
        void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] parameters)

        public static
        void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)

        public static
        void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)
        {
            GetPixelTexGenParameterivSGIS_(pname, parameters);
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)

        public static
        void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] parameters)

        public static
        void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)

        public static
        void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, IntPtr parameters)
        {
            GetPixelTexGenParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)

        public static
        void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] parameters)

        public static
        void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexImage4DSGIS_(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }

        #endregion

        #region TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexImage4DSGIS_(target, level, internalformat, width, height, depth, size4d, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)

        public static
        void TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, IntPtr pixels)
        {
            TexSubImage4DSGIS_(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }

        #endregion

        #region TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, object pixels)

        public static
        void TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                TexSubImage4DSGIS_(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return AreTexturesResidentEXT_(n, textures, residences);
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, IntPtr textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, object residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, object textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)

        public static
        GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, IntPtr textures)

        public static
        void DeleteTexturesEXT(GLsizei n, IntPtr textures)
        {
            DeleteTexturesEXT_(n, textures);
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, object textures)

        public static
        void DeleteTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                DeleteTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, GLuint[] textures)

        public static
        void DeleteTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                DeleteTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, IntPtr textures)

        public static
        void GenTexturesEXT(GLsizei n, IntPtr textures)
        {
            GenTexturesEXT_(n, textures);
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, object textures)

        public static
        void GenTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                GenTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, GLuint[] textures)

        public static
        void GenTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                GenTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            PrioritizeTexturesEXT_(n, textures, priorities);
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, object priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        public static
        void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                PrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, IntPtr points)

        public static
        void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, IntPtr points)
        {
            DetailTexFuncSGIS_(target, n, points);
        }

        #endregion

        #region DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, object points)

        public static
        void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DetailTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)

        public static
        void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DetailTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDetailTexFuncSGIS(Enums.TextureTarget target, IntPtr points)

        public static
        void GetDetailTexFuncSGIS(Enums.TextureTarget target, IntPtr points)
        {
            GetDetailTexFuncSGIS_(target, points);
        }

        #endregion

        #region GetDetailTexFuncSGIS(Enums.TextureTarget target, object points)

        public static
        void GetDetailTexFuncSGIS(Enums.TextureTarget target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetDetailTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDetailTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)

        public static
        void GetDetailTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetDetailTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, IntPtr points)

        public static
        void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, IntPtr points)
        {
            SharpenTexFuncSGIS_(target, n, points);
        }

        #endregion

        #region SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, object points)

        public static
        void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                SharpenTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)

        public static
        void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                SharpenTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSharpenTexFuncSGIS(Enums.TextureTarget target, IntPtr points)

        public static
        void GetSharpenTexFuncSGIS(Enums.TextureTarget target, IntPtr points)
        {
            GetSharpenTexFuncSGIS_(target, points);
        }

        #endregion

        #region GetSharpenTexFuncSGIS(Enums.TextureTarget target, object points)

        public static
        void GetSharpenTexFuncSGIS(Enums.TextureTarget target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetSharpenTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSharpenTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)

        public static
        void GetSharpenTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetSharpenTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            ColorPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, object pointer)

        public static
        void ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)
        {
            EdgeFlagPointerEXT_(stride, count, pointer);
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)

        public static
        void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                EdgeFlagPointerEXT_(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, Enums.Boolean[] pointer)

        public static
        void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, Enums.Boolean[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                EdgeFlagPointerEXT_(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointervEXT(Enums.GetPointervPName pname, IntPtr parameters)

        public static
        void GetPointervEXT(Enums.GetPointervPName pname, IntPtr parameters)
        {
            GetPointervEXT_(pname, parameters);
        }

        #endregion

        #region GetPointervEXT(Enums.GetPointervPName pname, object parameters)

        public static
        void GetPointervEXT(Enums.GetPointervPName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPointervEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointervEXT(Enums.GetPointervPName pname, IntPtr[] parameters)

        public static
        void GetPointervEXT(Enums.GetPointervPName pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetPointervEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            IndexPointerEXT_(type, stride, count, pointer);
        }

        #endregion

        #region IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, object pointer)

        public static
        void IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                IndexPointerEXT_(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            NormalPointerEXT_(type, stride, count, pointer);
        }

        #endregion

        #region NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, object pointer)

        public static
        void NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointerEXT_(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            TexCoordPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, object pointer)

        public static
        void TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            VertexPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, object pointer)

        public static
        void VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, IntPtr parameters)

        public static
        void SpriteParameterfvSGIX(GLenum pname, IntPtr parameters)
        {
            SpriteParameterfvSGIX_(pname, parameters);
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, object parameters)

        public static
        void SpriteParameterfvSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                SpriteParameterfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)

        public static
        void SpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                SpriteParameterfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, IntPtr parameters)

        public static
        void SpriteParameterivSGIX(GLenum pname, IntPtr parameters)
        {
            SpriteParameterivSGIX_(pname, parameters);
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, object parameters)

        public static
        void SpriteParameterivSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                SpriteParameterivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, GLint[] parameters)

        public static
        void SpriteParameterivSGIX(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                SpriteParameterivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, IntPtr parameters)

        public static
        void PointParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            PointParameterfvEXT_(pname, parameters);
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, object parameters)

        public static
        void PointParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, GLfloat[] parameters)

        public static
        void PointParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, IntPtr parameters)

        public static
        void PointParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            PointParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, object parameters)

        public static
        void PointParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        public static
        void PointParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, IntPtr buffer)

        public static
        void InstrumentsBufferSGIX(GLsizei size, IntPtr buffer)
        {
            InstrumentsBufferSGIX_(size, buffer);
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, object buffer)

        public static
        void InstrumentsBufferSGIX(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                InstrumentsBufferSGIX_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, GLint[] buffer)

        public static
        void InstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                InstrumentsBufferSGIX_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollInstrumentsSGIX(IntPtr marker_p)

        public static
        GLint PollInstrumentsSGIX(IntPtr marker_p)
        {
            return PollInstrumentsSGIX_(marker_p);
        }

        #endregion

        #region PollInstrumentsSGIX(object marker_p)

        public static
        GLint PollInstrumentsSGIX(object marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return PollInstrumentsSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollInstrumentsSGIX(GLint[] marker_p)

        public static
        GLint PollInstrumentsSGIX(GLint[] marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return PollInstrumentsSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)

        public static
        void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)
        {
            DeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)

        public static
        void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)

        public static
        void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)

        public static
        void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)
        {
            DeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)

        public static
        void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)

        public static
        void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                DeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReferencePlaneSGIX(IntPtr equation)

        public static
        void ReferencePlaneSGIX(IntPtr equation)
        {
            ReferencePlaneSGIX_(equation);
        }

        #endregion

        #region ReferencePlaneSGIX(object equation)

        public static
        void ReferencePlaneSGIX(object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                ReferencePlaneSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReferencePlaneSGIX(GLdouble[] equation)

        public static
        void ReferencePlaneSGIX(GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                ReferencePlaneSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, IntPtr points)

        public static
        void FogFuncSGIS(GLsizei n, IntPtr points)
        {
            FogFuncSGIS_(n, points);
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, object points)

        public static
        void FogFuncSGIS(GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                FogFuncSGIS_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, GLfloat[] points)

        public static
        void FogFuncSGIS(GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                FogFuncSGIS_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFogFuncSGIS(IntPtr points)

        public static
        void GetFogFuncSGIS(IntPtr points)
        {
            GetFogFuncSGIS_(points);
        }

        #endregion

        #region GetFogFuncSGIS(object points)

        public static
        void GetFogFuncSGIS(object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetFogFuncSGIS_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFogFuncSGIS(GLfloat[] points)

        public static
        void GetFogFuncSGIS(GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetFogFuncSGIS_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            ImageTransformParameterivHP_(target, pname, parameters);
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        public static
        void ImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void ImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void ImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            ImageTransformParameterfvHP_(target, pname, parameters);
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        public static
        void ImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void ImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetImageTransformParameterivHP_(target, pname, parameters);
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        public static
        void GetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetImageTransformParameterfvHP_(target, pname, parameters);
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        public static
        void GetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)

        public static
        void ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)
        {
            ColorSubTableEXT_(target, start, count, format, type, data);
        }

        #endregion

        #region ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)

        public static
        void ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                ColorSubTableEXT_(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableEXT(GLenum target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)

        public static
        void ColorTableEXT(GLenum target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, IntPtr table)
        {
            ColorTableEXT_(target, internalFormat, width, format, type, table);
        }

        #endregion

        #region ColorTableEXT(GLenum target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)

        public static
        void ColorTableEXT(GLenum target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                ColorTableEXT_(target, internalFormat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableEXT(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)

        public static
        void GetColorTableEXT(GLenum target, Enums.PixelFormat format, Enums.PixelType type, IntPtr data)
        {
            GetColorTableEXT_(target, format, type, data);
        }

        #endregion

        #region GetColorTableEXT(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object data)

        public static
        void GetColorTableEXT(GLenum target, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetColorTableEXT_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetColorTableParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void GetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetColorTableParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void GetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetColorTableParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)

        public static
        void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)
        {
            GetListParameterfvSGIX_(list, pname, parameters);
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, object parameters)

        public static
        void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] parameters)

        public static
        void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)

        public static
        void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)
        {
            GetListParameterivSGIX_(list, pname, parameters);
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, object parameters)

        public static
        void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] parameters)

        public static
        void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)

        public static
        void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)
        {
            ListParameterfvSGIX_(list, pname, parameters);
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, object parameters)

        public static
        void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] parameters)

        public static
        void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)

        public static
        void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, IntPtr parameters)
        {
            ListParameterivSGIX_(list, pname, parameters);
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, object parameters)

        public static
        void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] parameters)

        public static
        void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, IntPtr parameters)

        public static
        void CullParameterdvEXT(GLenum pname, IntPtr parameters)
        {
            CullParameterdvEXT_(pname, parameters);
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, object parameters)

        public static
        void CullParameterdvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CullParameterdvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, GLdouble[] parameters)

        public static
        void CullParameterdvEXT(GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CullParameterdvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, IntPtr parameters)

        public static
        void CullParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            CullParameterfvEXT_(pname, parameters);
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, object parameters)

        public static
        void CullParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CullParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, GLfloat[] parameters)

        public static
        void CullParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CullParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void FragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            FragmentLightfvSGIX_(light, pname, parameters);
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void FragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void FragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void FragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            FragmentLightivSGIX_(light, pname, parameters);
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void FragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void FragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters)

        public static
        void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters)
        {
            FragmentLightModelfvSGIX_(pname, parameters);
        }

        #endregion

        #region FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, object parameters)

        public static
        void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightModelfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat[] parameters)

        public static
        void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightModelfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters)

        public static
        void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, IntPtr parameters)
        {
            FragmentLightModelivSGIX_(pname, parameters);
        }

        #endregion

        #region FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, object parameters)

        public static
        void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightModelivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint[] parameters)

        public static
        void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentLightModelivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            FragmentMaterialfvSGIX_(face, pname, parameters);
        }

        #endregion

        #region FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)

        public static
        void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            FragmentMaterialivSGIX_(face, pname, parameters);
        }

        #endregion

        #region FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)

        public static
        void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                FragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void GetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            GetFragmentLightfvSGIX_(light, pname, parameters);
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void GetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void GetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void GetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            GetFragmentLightivSGIX_(light, pname, parameters);
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void GetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void GetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            GetFragmentMaterialfvSGIX_(face, pname, parameters);
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)

        public static
        void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)

        public static
        void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, IntPtr parameters)
        {
            GetFragmentMaterialivSGIX_(face, pname, parameters);
        }

        #endregion

        #region GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)

        public static
        void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)

        public static
        void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        public static
        void DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            DrawRangeElementsEXT_(mode, start, end, count, type, indices);
        }

        #endregion

        #region DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        public static
        void DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                DrawRangeElementsEXT_(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FinishAsyncSGIX(IntPtr markerp)

        public static
        GLint FinishAsyncSGIX(IntPtr markerp)
        {
            return FinishAsyncSGIX_(markerp);
        }

        #endregion

        #region FinishAsyncSGIX(object markerp)

        public static
        GLint FinishAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return FinishAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FinishAsyncSGIX(GLuint[] markerp)

        public static
        GLint FinishAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return FinishAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollAsyncSGIX(IntPtr markerp)

        public static
        GLint PollAsyncSGIX(IntPtr markerp)
        {
            return PollAsyncSGIX_(markerp);
        }

        #endregion

        #region PollAsyncSGIX(object markerp)

        public static
        GLint PollAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return PollAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollAsyncSGIX(GLuint[] markerp)

        public static
        GLint PollAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return PollAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)

        public static
        void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)
        {
            VertexPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region VertexPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)

        public static
        void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)

        public static
        void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointervINTEL(Enums.NormalPointerType type, IntPtr pointer)

        public static
        void NormalPointervINTEL(Enums.NormalPointerType type, IntPtr pointer)
        {
            NormalPointervINTEL_(type, pointer);
        }

        #endregion

        #region NormalPointervINTEL(Enums.NormalPointerType type, object pointer)

        public static
        void NormalPointervINTEL(Enums.NormalPointerType type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointervINTEL_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointervINTEL(Enums.NormalPointerType type, IntPtr[] pointer)

        public static
        void NormalPointervINTEL(Enums.NormalPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointervINTEL_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)

        public static
        void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)
        {
            ColorPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region ColorPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)

        public static
        void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)

        public static
        void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)

        public static
        void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr pointer)
        {
            TexCoordPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)

        public static
        void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)

        public static
        void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void PixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            PixelTransformParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void PixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTransformParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void PixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTransformParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void PixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            PixelTransformParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void PixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTransformParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void PixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PixelTransformParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bvEXT(IntPtr v)

        public static
        void SecondaryColor3bvEXT(IntPtr v)
        {
            SecondaryColor3bvEXT_(v);
        }

        #endregion

        #region SecondaryColor3bvEXT(object v)

        public static
        void SecondaryColor3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bvEXT(GLbyte[] v)

        public static
        void SecondaryColor3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dvEXT(IntPtr v)

        public static
        void SecondaryColor3dvEXT(IntPtr v)
        {
            SecondaryColor3dvEXT_(v);
        }

        #endregion

        #region SecondaryColor3dvEXT(object v)

        public static
        void SecondaryColor3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dvEXT(GLdouble[] v)

        public static
        void SecondaryColor3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fvEXT(IntPtr v)

        public static
        void SecondaryColor3fvEXT(IntPtr v)
        {
            SecondaryColor3fvEXT_(v);
        }

        #endregion

        #region SecondaryColor3fvEXT(object v)

        public static
        void SecondaryColor3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fvEXT(GLfloat[] v)

        public static
        void SecondaryColor3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ivEXT(IntPtr v)

        public static
        void SecondaryColor3ivEXT(IntPtr v)
        {
            SecondaryColor3ivEXT_(v);
        }

        #endregion

        #region SecondaryColor3ivEXT(object v)

        public static
        void SecondaryColor3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ivEXT(GLint[] v)

        public static
        void SecondaryColor3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3svEXT(IntPtr v)

        public static
        void SecondaryColor3svEXT(IntPtr v)
        {
            SecondaryColor3svEXT_(v);
        }

        #endregion

        #region SecondaryColor3svEXT(object v)

        public static
        void SecondaryColor3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3svEXT(GLshort[] v)

        public static
        void SecondaryColor3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubvEXT(IntPtr v)

        public static
        void SecondaryColor3ubvEXT(IntPtr v)
        {
            SecondaryColor3ubvEXT_(v);
        }

        #endregion

        #region SecondaryColor3ubvEXT(object v)

        public static
        void SecondaryColor3ubvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ubvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubvEXT(GLubyte[] v)

        public static
        void SecondaryColor3ubvEXT(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3ubvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uivEXT(IntPtr v)

        public static
        void SecondaryColor3uivEXT(IntPtr v)
        {
            SecondaryColor3uivEXT_(v);
        }

        #endregion

        #region SecondaryColor3uivEXT(object v)

        public static
        void SecondaryColor3uivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3uivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uivEXT(GLuint[] v)

        public static
        void SecondaryColor3uivEXT(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3uivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usvEXT(IntPtr v)

        public static
        void SecondaryColor3usvEXT(IntPtr v)
        {
            SecondaryColor3usvEXT_(v);
        }

        #endregion

        #region SecondaryColor3usvEXT(object v)

        public static
        void SecondaryColor3usvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3usvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usvEXT(GLushort[] v)

        public static
        void SecondaryColor3usvEXT(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3usvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)

        public static
        void SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, IntPtr pointer)
        {
            SecondaryColorPointerEXT_(size, type, stride, pointer);
        }

        #endregion

        #region SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)

        public static
        void SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                SecondaryColorPointerEXT_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            MultiDrawArraysEXT_(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, object first, object count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            MultiDrawElementsEXT_(mode, count, type, indices, primcount);
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfvEXT(IntPtr coord)

        public static
        void FogCoordfvEXT(IntPtr coord)
        {
            FogCoordfvEXT_(coord);
        }

        #endregion

        #region FogCoordfvEXT(object coord)

        public static
        void FogCoordfvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoordfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfvEXT(GLfloat[] coord)

        public static
        void FogCoordfvEXT(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoordfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddvEXT(IntPtr coord)

        public static
        void FogCoorddvEXT(IntPtr coord)
        {
            FogCoorddvEXT_(coord);
        }

        #endregion

        #region FogCoorddvEXT(object coord)

        public static
        void FogCoorddvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoorddvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddvEXT(GLdouble[] coord)

        public static
        void FogCoorddvEXT(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                FogCoorddvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void FogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            FogCoordPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region FogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void FogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                FogCoordPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3bvEXT(IntPtr v)

        public static
        void Tangent3bvEXT(IntPtr v)
        {
            Tangent3bvEXT_(v);
        }

        #endregion

        #region Tangent3bvEXT(object v)

        public static
        void Tangent3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3bvEXT(GLbyte[] v)

        public static
        void Tangent3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3dvEXT(IntPtr v)

        public static
        void Tangent3dvEXT(IntPtr v)
        {
            Tangent3dvEXT_(v);
        }

        #endregion

        #region Tangent3dvEXT(object v)

        public static
        void Tangent3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3dvEXT(GLdouble[] v)

        public static
        void Tangent3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3fvEXT(IntPtr v)

        public static
        void Tangent3fvEXT(IntPtr v)
        {
            Tangent3fvEXT_(v);
        }

        #endregion

        #region Tangent3fvEXT(object v)

        public static
        void Tangent3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3fvEXT(GLfloat[] v)

        public static
        void Tangent3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3ivEXT(IntPtr v)

        public static
        void Tangent3ivEXT(IntPtr v)
        {
            Tangent3ivEXT_(v);
        }

        #endregion

        #region Tangent3ivEXT(object v)

        public static
        void Tangent3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3ivEXT(GLint[] v)

        public static
        void Tangent3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3svEXT(IntPtr v)

        public static
        void Tangent3svEXT(IntPtr v)
        {
            Tangent3svEXT_(v);
        }

        #endregion

        #region Tangent3svEXT(object v)

        public static
        void Tangent3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3svEXT(GLshort[] v)

        public static
        void Tangent3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Tangent3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3bvEXT(IntPtr v)

        public static
        void Binormal3bvEXT(IntPtr v)
        {
            Binormal3bvEXT_(v);
        }

        #endregion

        #region Binormal3bvEXT(object v)

        public static
        void Binormal3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3bvEXT(GLbyte[] v)

        public static
        void Binormal3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3dvEXT(IntPtr v)

        public static
        void Binormal3dvEXT(IntPtr v)
        {
            Binormal3dvEXT_(v);
        }

        #endregion

        #region Binormal3dvEXT(object v)

        public static
        void Binormal3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3dvEXT(GLdouble[] v)

        public static
        void Binormal3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3fvEXT(IntPtr v)

        public static
        void Binormal3fvEXT(IntPtr v)
        {
            Binormal3fvEXT_(v);
        }

        #endregion

        #region Binormal3fvEXT(object v)

        public static
        void Binormal3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3fvEXT(GLfloat[] v)

        public static
        void Binormal3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3ivEXT(IntPtr v)

        public static
        void Binormal3ivEXT(IntPtr v)
        {
            Binormal3ivEXT_(v);
        }

        #endregion

        #region Binormal3ivEXT(object v)

        public static
        void Binormal3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3ivEXT(GLint[] v)

        public static
        void Binormal3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3svEXT(IntPtr v)

        public static
        void Binormal3svEXT(IntPtr v)
        {
            Binormal3svEXT_(v);
        }

        #endregion

        #region Binormal3svEXT(object v)

        public static
        void Binormal3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3svEXT(GLshort[] v)

        public static
        void Binormal3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Binormal3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void TangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            TangentPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region TangentPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void TangentPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TangentPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void BinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            BinormalPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region BinormalPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void BinormalPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                BinormalPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuivSUN(IntPtr code)

        public static
        void ReplacementCodeuivSUN(IntPtr code)
        {
            ReplacementCodeuivSUN_(code);
        }

        #endregion

        #region ReplacementCodeuivSUN(object code)

        public static
        void ReplacementCodeuivSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuivSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuivSUN(GLuint[] code)

        public static
        void ReplacementCodeuivSUN(GLuint[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuivSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeusvSUN(IntPtr code)

        public static
        void ReplacementCodeusvSUN(IntPtr code)
        {
            ReplacementCodeusvSUN_(code);
        }

        #endregion

        #region ReplacementCodeusvSUN(object code)

        public static
        void ReplacementCodeusvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeusvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeusvSUN(GLushort[] code)

        public static
        void ReplacementCodeusvSUN(GLushort[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeusvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeubvSUN(IntPtr code)

        public static
        void ReplacementCodeubvSUN(IntPtr code)
        {
            ReplacementCodeubvSUN_(code);
        }

        #endregion

        #region ReplacementCodeubvSUN(object code)

        public static
        void ReplacementCodeubvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeubvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeubvSUN(GLubyte[] code)

        public static
        void ReplacementCodeubvSUN(GLubyte[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                ReplacementCodeubvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)
        {
            ReplacementCodePointerSUN_(type, stride, pointer);
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)

        public static
        void ReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ReplacementCodePointerSUN_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)

        public static
        void ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ReplacementCodePointerSUN_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, IntPtr v)

        public static
        void Color4ubVertex2fvSUN(IntPtr c, IntPtr v)
        {
            Color4ubVertex2fvSUN_(c, v);
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, object v)

        public static
        void Color4ubVertex2fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, GLfloat[] v)

        public static
        void Color4ubVertex2fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, IntPtr v)

        public static
        void Color4ubVertex2fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, object v)

        public static
        void Color4ubVertex2fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, GLfloat[] v)

        public static
        void Color4ubVertex2fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, IntPtr v)

        public static
        void Color4ubVertex2fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, object v)

        public static
        void Color4ubVertex2fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)

        public static
        void Color4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, IntPtr v)

        public static
        void Color4ubVertex3fvSUN(IntPtr c, IntPtr v)
        {
            Color4ubVertex3fvSUN_(c, v);
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, object v)

        public static
        void Color4ubVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, GLfloat[] v)

        public static
        void Color4ubVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, IntPtr v)

        public static
        void Color4ubVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, object v)

        public static
        void Color4ubVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, GLfloat[] v)

        public static
        void Color4ubVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, IntPtr v)

        public static
        void Color4ubVertex3fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, object v)

        public static
        void Color4ubVertex3fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)

        public static
        void Color4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, IntPtr v)

        public static
        void Color3fVertex3fvSUN(IntPtr c, IntPtr v)
        {
            Color3fVertex3fvSUN_(c, v);
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, object v)

        public static
        void Color3fVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, GLfloat[] v)

        public static
        void Color3fVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, IntPtr v)

        public static
        void Color3fVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, object v)

        public static
        void Color3fVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, GLfloat[] v)

        public static
        void Color3fVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, IntPtr v)

        public static
        void Color3fVertex3fvSUN(GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, object v)

        public static
        void Color3fVertex3fvSUN(GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)

        public static
        void Color3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, IntPtr v)

        public static
        void Normal3fVertex3fvSUN(IntPtr n, IntPtr v)
        {
            Normal3fVertex3fvSUN_(n, v);
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, object v)

        public static
        void Normal3fVertex3fvSUN(IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, GLfloat[] v)

        public static
        void Normal3fVertex3fvSUN(IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, IntPtr v)

        public static
        void Normal3fVertex3fvSUN(object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, object v)

        public static
        void Normal3fVertex3fvSUN(object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, GLfloat[] v)

        public static
        void Normal3fVertex3fvSUN(object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, IntPtr v)

        public static
        void Normal3fVertex3fvSUN(GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, object v)

        public static
        void Normal3fVertex3fvSUN(GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)

        public static
        void Normal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)
        {
            Color4fNormal3fVertex3fvSUN_(c, n, v);
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)

        public static
        void TexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)
        {
            TexCoord2fVertex3fvSUN_(tc, v);
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, object v)

        public static
        void TexCoord2fVertex3fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)

        public static
        void TexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, IntPtr v)

        public static
        void TexCoord2fVertex3fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, object v)

        public static
        void TexCoord2fVertex3fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, GLfloat[] v)

        public static
        void TexCoord2fVertex3fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)

        public static
        void TexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, object v)

        public static
        void TexCoord2fVertex3fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)

        public static
        void TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)

        public static
        void TexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)
        {
            TexCoord4fVertex4fvSUN_(tc, v);
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, object v)

        public static
        void TexCoord4fVertex4fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)

        public static
        void TexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, IntPtr v)

        public static
        void TexCoord4fVertex4fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, object v)

        public static
        void TexCoord4fVertex4fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, GLfloat[] v)

        public static
        void TexCoord4fVertex4fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)

        public static
        void TexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, object v)

        public static
        void TexCoord4fVertex4fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)

        public static
        void TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            TexCoord2fColor4ubVertex3fvSUN_(tc, c, v);
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)

        public static
        void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            TexCoord2fColor3fVertex3fvSUN_(tc, c, v);
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)

        public static
        void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)
        {
            TexCoord2fNormal3fVertex3fvSUN_(tc, n, v);
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, v);
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, v);
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)

        public static
        void ReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)
        {
            ReplacementCodeuiVertex3fvSUN_(rc, v);
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)

        public static
        void ReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)

        public static
        void ReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)

        public static
        void ReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, object v)

        public static
        void ReplacementCodeuiVertex3fvSUN(object rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)

        public static
        void ReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)

        public static
        void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)

        public static
        void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)

        public static
        void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            ReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, v);
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            ReplacementCodeuiColor3fVertex3fvSUN_(rc, c, v);
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)

        public static
        void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)
        {
            ReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, v);
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)
        {
            ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, v);
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)
        {
            ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region VertexWeightfvEXT(IntPtr weight)

        public static
        void VertexWeightfvEXT(IntPtr weight)
        {
            VertexWeightfvEXT_(weight);
        }

        #endregion

        #region VertexWeightfvEXT(object weight)

        public static
        void VertexWeightfvEXT(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                VertexWeightfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeightfvEXT(GLfloat[] weight)

        public static
        void VertexWeightfvEXT(GLfloat[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                VertexWeightfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            VertexWeightPointerEXT_(size, type, stride, pointer);
        }

        #endregion

        #region VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)

        public static
        void VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexWeightPointerEXT_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexArrayRangeNV(GLsizei length, IntPtr pointer)

        public static
        void VertexArrayRangeNV(GLsizei length, IntPtr pointer)
        {
            VertexArrayRangeNV_(length, pointer);
        }

        #endregion

        #region VertexArrayRangeNV(GLsizei length, object pointer)

        public static
        void VertexArrayRangeNV(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexArrayRangeNV_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, IntPtr parameters)

        public static
        void CombinerParameterfvNV(GLenum pname, IntPtr parameters)
        {
            CombinerParameterfvNV_(pname, parameters);
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, object parameters)

        public static
        void CombinerParameterfvNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerParameterfvNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, GLfloat[] parameters)

        public static
        void CombinerParameterfvNV(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerParameterfvNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, IntPtr parameters)

        public static
        void CombinerParameterivNV(GLenum pname, IntPtr parameters)
        {
            CombinerParameterivNV_(pname, parameters);
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, object parameters)

        public static
        void CombinerParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, GLint[] parameters)

        public static
        void CombinerParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            GetCombinerInputParameterfvNV_(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        public static
        void GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerInputParameterfvNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)

        public static
        void GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerInputParameterfvNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            GetCombinerInputParameterivNV_(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        public static
        void GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerInputParameterivNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)

        public static
        void GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerInputParameterivNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        public static
        void GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            GetCombinerOutputParameterfvNV_(stage, portion, pname, parameters);
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        public static
        void GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerOutputParameterfvNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)

        public static
        void GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerOutputParameterfvNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        public static
        void GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            GetCombinerOutputParameterivNV_(stage, portion, pname, parameters);
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        public static
        void GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerOutputParameterivNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)

        public static
        void GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerOutputParameterivNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            GetFinalCombinerInputParameterfvNV_(variable, pname, parameters);
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)

        public static
        void GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFinalCombinerInputParameterfvNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)

        public static
        void GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFinalCombinerInputParameterfvNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            GetFinalCombinerInputParameterivNV_(variable, pname, parameters);
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)

        public static
        void GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFinalCombinerInputParameterivNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)

        public static
        void GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFinalCombinerInputParameterivNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvMESA(IntPtr v)

        public static
        void WindowPos2dvMESA(IntPtr v)
        {
            WindowPos2dvMESA_(v);
        }

        #endregion

        #region WindowPos2dvMESA(object v)

        public static
        void WindowPos2dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvMESA(GLdouble[] v)

        public static
        void WindowPos2dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvMESA(IntPtr v)

        public static
        void WindowPos2fvMESA(IntPtr v)
        {
            WindowPos2fvMESA_(v);
        }

        #endregion

        #region WindowPos2fvMESA(object v)

        public static
        void WindowPos2fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvMESA(GLfloat[] v)

        public static
        void WindowPos2fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivMESA(IntPtr v)

        public static
        void WindowPos2ivMESA(IntPtr v)
        {
            WindowPos2ivMESA_(v);
        }

        #endregion

        #region WindowPos2ivMESA(object v)

        public static
        void WindowPos2ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivMESA(GLint[] v)

        public static
        void WindowPos2ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svMESA(IntPtr v)

        public static
        void WindowPos2svMESA(IntPtr v)
        {
            WindowPos2svMESA_(v);
        }

        #endregion

        #region WindowPos2svMESA(object v)

        public static
        void WindowPos2svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svMESA(GLshort[] v)

        public static
        void WindowPos2svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos2svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvMESA(IntPtr v)

        public static
        void WindowPos3dvMESA(IntPtr v)
        {
            WindowPos3dvMESA_(v);
        }

        #endregion

        #region WindowPos3dvMESA(object v)

        public static
        void WindowPos3dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvMESA(GLdouble[] v)

        public static
        void WindowPos3dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvMESA(IntPtr v)

        public static
        void WindowPos3fvMESA(IntPtr v)
        {
            WindowPos3fvMESA_(v);
        }

        #endregion

        #region WindowPos3fvMESA(object v)

        public static
        void WindowPos3fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvMESA(GLfloat[] v)

        public static
        void WindowPos3fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivMESA(IntPtr v)

        public static
        void WindowPos3ivMESA(IntPtr v)
        {
            WindowPos3ivMESA_(v);
        }

        #endregion

        #region WindowPos3ivMESA(object v)

        public static
        void WindowPos3ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivMESA(GLint[] v)

        public static
        void WindowPos3ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svMESA(IntPtr v)

        public static
        void WindowPos3svMESA(IntPtr v)
        {
            WindowPos3svMESA_(v);
        }

        #endregion

        #region WindowPos3svMESA(object v)

        public static
        void WindowPos3svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svMESA(GLshort[] v)

        public static
        void WindowPos3svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos3svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4dvMESA(IntPtr v)

        public static
        void WindowPos4dvMESA(IntPtr v)
        {
            WindowPos4dvMESA_(v);
        }

        #endregion

        #region WindowPos4dvMESA(object v)

        public static
        void WindowPos4dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4dvMESA(GLdouble[] v)

        public static
        void WindowPos4dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4fvMESA(IntPtr v)

        public static
        void WindowPos4fvMESA(IntPtr v)
        {
            WindowPos4fvMESA_(v);
        }

        #endregion

        #region WindowPos4fvMESA(object v)

        public static
        void WindowPos4fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4fvMESA(GLfloat[] v)

        public static
        void WindowPos4fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4ivMESA(IntPtr v)

        public static
        void WindowPos4ivMESA(IntPtr v)
        {
            WindowPos4ivMESA_(v);
        }

        #endregion

        #region WindowPos4ivMESA(object v)

        public static
        void WindowPos4ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4ivMESA(GLint[] v)

        public static
        void WindowPos4ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4svMESA(IntPtr v)

        public static
        void WindowPos4svMESA(IntPtr v)
        {
            WindowPos4svMESA_(v);
        }

        #endregion

        #region WindowPos4svMESA(object v)

        public static
        void WindowPos4svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4svMESA(GLshort[] v)

        public static
        void WindowPos4svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                WindowPos4svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            MultiModeDrawArraysIBM_(mode, first, count, primcount, modestride);
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            MultiModeDrawElementsIBM_(mode, count, type, indices, primcount, modestride);
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(mode, count, type, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                MultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            ColorPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, object pointer, GLint ptrstride)

        public static
        void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            SecondaryColorPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                SecondaryColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                SecondaryColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void EdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)
        {
            EdgeFlagPointerListIBM_(stride, pointer, ptrstride);
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)

        public static
        void EdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                EdgeFlagPointerListIBM_(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)

        public static
        void EdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                EdgeFlagPointerListIBM_(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            FogCoordPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void FogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                FogCoordPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                FogCoordPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            IndexPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, object pointer, GLint ptrstride)

        public static
        void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                IndexPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                IndexPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            NormalPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, object pointer, GLint ptrstride)

        public static
        void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                NormalPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            TexCoordPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, object pointer, GLint ptrstride)

        public static
        void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                TexCoordPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            VertexPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, object pointer, GLint ptrstride)

        public static
        void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IglooInterfaceSGIX(GLenum pname, IntPtr parameters)

        public static
        void IglooInterfaceSGIX(GLenum pname, IntPtr parameters)
        {
            IglooInterfaceSGIX_(pname, parameters);
        }

        #endregion

        #region IglooInterfaceSGIX(GLenum pname, object parameters)

        public static
        void IglooInterfaceSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                IglooInterfaceSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, IntPtr fences)

        public static
        void DeleteFencesNV(GLsizei n, IntPtr fences)
        {
            DeleteFencesNV_(n, fences);
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, object fences)

        public static
        void DeleteFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                DeleteFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, GLuint[] fences)

        public static
        void DeleteFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                DeleteFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesNV(GLsizei n, IntPtr fences)

        public static
        void GenFencesNV(GLsizei n, IntPtr fences)
        {
            GenFencesNV_(n, fences);
        }

        #endregion

        #region GenFencesNV(GLsizei n, object fences)

        public static
        void GenFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                GenFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesNV(GLsizei n, GLuint[] fences)

        public static
        void GenFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                GenFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)

        public static
        void GetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)
        {
            GetFenceivNV_(fence, pname, parameters);
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, object parameters)

        public static
        void GetFenceivNV(GLuint fence, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFenceivNV_(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)

        public static
        void GetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFenceivNV_(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, Enums.Boolean packed, IntPtr points)

        public static
        void MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, Enums.Boolean packed, IntPtr points)
        {
            MapControlPointsNV_(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }

        #endregion

        #region MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, Enums.Boolean packed, object points)

        public static
        void MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, Enums.Boolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                MapControlPointsNV_(target, index, type, ustride, vstride, uorder, vorder, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void MapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            MapParameterivNV_(target, pname, parameters);
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, object parameters)

        public static
        void MapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                MapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void MapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                MapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void MapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            MapParameterfvNV_(target, pname, parameters);
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, object parameters)

        public static
        void MapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                MapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void MapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                MapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, Enums.Boolean packed, IntPtr points)

        public static
        void GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, Enums.Boolean packed, IntPtr points)
        {
            GetMapControlPointsNV_(target, index, type, ustride, vstride, packed, points);
        }

        #endregion

        #region GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, Enums.Boolean packed, object points)

        public static
        void GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, Enums.Boolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                GetMapControlPointsNV_(target, index, type, ustride, vstride, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetMapParameterivNV_(target, pname, parameters);
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, object parameters)

        public static
        void GetMapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void GetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void GetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            GetMapParameterfvNV_(target, pname, parameters);
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, object parameters)

        public static
        void GetMapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void GetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            GetMapAttribParameterivNV_(target, index, pname, parameters);
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapAttribParameterivNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)

        public static
        void GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapAttribParameterivNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            GetMapAttribParameterfvNV_(target, index, pname, parameters);
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapAttribParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetMapAttribParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        public static
        void CombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            CombinerStageParameterfvNV_(stage, pname, parameters);
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        public static
        void CombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        public static
        void CombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                CombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        public static
        void GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            GetCombinerStageParameterfvNV_(stage, pname, parameters);
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        public static
        void GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        public static
        void GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)
        {
            return AreProgramsResidentNV_(n, programs, residences);
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, Enums.Boolean[] residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, IntPtr programs, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, object residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, object programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, Enums.Boolean[] residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, object programs, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, Enums.Boolean[] residences)

        public static
        GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return AreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, IntPtr programs)

        public static
        void DeleteProgramsNV(GLsizei n, IntPtr programs)
        {
            DeleteProgramsNV_(n, programs);
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, object programs)

        public static
        void DeleteProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                DeleteProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void DeleteProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                DeleteProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)

        public static
        void ExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)
        {
            ExecuteProgramNV_(target, id, parameters);
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, object parameters)

        public static
        void ExecuteProgramNV(GLenum target, GLuint id, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ExecuteProgramNV_(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)

        public static
        void ExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ExecuteProgramNV_(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsNV(GLsizei n, IntPtr programs)

        public static
        void GenProgramsNV(GLsizei n, IntPtr programs)
        {
            GenProgramsNV_(n, programs);
        }

        #endregion

        #region GenProgramsNV(GLsizei n, object programs)

        public static
        void GenProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                GenProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void GenProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                GenProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            GetProgramParameterdvNV_(target, index, pname, parameters);
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramParameterdvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramParameterdvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            GetProgramParameterfvNV_(target, index, pname, parameters);
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void GetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            GetProgramivNV_(id, pname, parameters);
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, object parameters)

        public static
        void GetProgramivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void GetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, IntPtr program)

        public static
        void GetProgramStringNV(GLuint id, GLenum pname, IntPtr program)
        {
            GetProgramStringNV_(id, pname, program);
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, object program)

        public static
        void GetProgramStringNV(GLuint id, GLenum pname, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                GetProgramStringNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)

        public static
        void GetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                GetProgramStringNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)

        public static
        void GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)
        {
            GetTrackMatrixivNV_(target, address, pname, parameters);
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)

        public static
        void GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTrackMatrixivNV_(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)

        public static
        void GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetTrackMatrixivNV_(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribdvNV_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void GetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribdvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribfvNV_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribfvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribivNV_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribivNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribivNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void GetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribivNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)
        {
            GetVertexAttribPointervNV_(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)

        public static
        void GetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointervNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GetVertexAttribPointervNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)

        public static
        void LoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)
        {
            LoadProgramNV_(target, id, len, program);
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)

        public static
        void LoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                LoadProgramNV_(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)

        public static
        void LoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                LoadProgramNV_(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)

        public static
        void ProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)
        {
            ProgramParameter4dvNV_(target, index, v);
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, object v)

        public static
        void ProgramParameter4dvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameter4dvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)

        public static
        void ProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameter4dvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)

        public static
        void ProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)
        {
            ProgramParameter4fvNV_(target, index, v);
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, object v)

        public static
        void ProgramParameter4fvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameter4fvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)

        public static
        void ProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameter4fvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        public static
        void ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            ProgramParameters4dvNV_(target, index, count, v);
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)

        public static
        void ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameters4dvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)

        public static
        void ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameters4dvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        public static
        void ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            ProgramParameters4fvNV_(target, index, count, v);
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)

        public static
        void ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameters4fvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)

        public static
        void ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramParameters4fvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, IntPtr programs)

        public static
        void RequestResidentProgramsNV(GLsizei n, IntPtr programs)
        {
            RequestResidentProgramsNV_(n, programs);
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, object programs)

        public static
        void RequestResidentProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                RequestResidentProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void RequestResidentProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                RequestResidentProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)
        {
            VertexAttribPointerNV_(index, fsize, type, stride, pointer);
        }

        #endregion

        #region VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)

        public static
        void VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexAttribPointerNV_(index, fsize, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib1dvNV(GLuint index, IntPtr v)
        {
            VertexAttrib1dvNV_(index, v);
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, object v)

        public static
        void VertexAttrib1dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib1dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib1fvNV(GLuint index, IntPtr v)
        {
            VertexAttrib1fvNV_(index, v);
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, object v)

        public static
        void VertexAttrib1fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib1fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib1svNV(GLuint index, IntPtr v)
        {
            VertexAttrib1svNV_(index, v);
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, object v)

        public static
        void VertexAttrib1svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, GLshort[] v)

        public static
        void VertexAttrib1svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib2dvNV(GLuint index, IntPtr v)
        {
            VertexAttrib2dvNV_(index, v);
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, object v)

        public static
        void VertexAttrib2dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib2dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib2fvNV(GLuint index, IntPtr v)
        {
            VertexAttrib2fvNV_(index, v);
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, object v)

        public static
        void VertexAttrib2fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib2fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib2svNV(GLuint index, IntPtr v)
        {
            VertexAttrib2svNV_(index, v);
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, object v)

        public static
        void VertexAttrib2svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, GLshort[] v)

        public static
        void VertexAttrib2svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib3dvNV(GLuint index, IntPtr v)
        {
            VertexAttrib3dvNV_(index, v);
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, object v)

        public static
        void VertexAttrib3dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib3dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib3fvNV(GLuint index, IntPtr v)
        {
            VertexAttrib3fvNV_(index, v);
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, object v)

        public static
        void VertexAttrib3fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib3fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib3svNV(GLuint index, IntPtr v)
        {
            VertexAttrib3svNV_(index, v);
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, object v)

        public static
        void VertexAttrib3svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, GLshort[] v)

        public static
        void VertexAttrib3svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib4dvNV(GLuint index, IntPtr v)
        {
            VertexAttrib4dvNV_(index, v);
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, object v)

        public static
        void VertexAttrib4dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, GLdouble[] v)

        public static
        void VertexAttrib4dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib4fvNV(GLuint index, IntPtr v)
        {
            VertexAttrib4fvNV_(index, v);
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, object v)

        public static
        void VertexAttrib4fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, GLfloat[] v)

        public static
        void VertexAttrib4fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib4svNV(GLuint index, IntPtr v)
        {
            VertexAttrib4svNV_(index, v);
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, object v)

        public static
        void VertexAttrib4svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, GLshort[] v)

        public static
        void VertexAttrib4svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib4ubvNV(GLuint index, IntPtr v)
        {
            VertexAttrib4ubvNV_(index, v);
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, object v)

        public static
        void VertexAttrib4ubvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, GLubyte[] v)

        public static
        void VertexAttrib4ubvNV(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4ubvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs1dvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs1dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs1fvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs1fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs1svNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs1svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void VertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs2dvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs2dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs2fvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs2fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs2svNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs2svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void VertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs3dvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs3dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs3fvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs3fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs3svNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs3svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void VertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs4dvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs4dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs4fvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs4fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs4svNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs4svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void VertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void VertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)
        {
            VertexAttribs4ubvNV_(index, count, v);
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, object v)

        public static
        void VertexAttribs4ubvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4ubvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)

        public static
        void VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4ubvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, IntPtr param)

        public static
        void TexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            TexBumpParameterivATI_(pname, param);
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, object param)

        public static
        void TexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                TexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, GLint[] param)

        public static
        void TexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                TexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, IntPtr param)

        public static
        void TexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            TexBumpParameterfvATI_(pname, param);
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, object param)

        public static
        void TexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                TexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        public static
        void TexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                TexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, IntPtr param)

        public static
        void GetTexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            GetTexBumpParameterivATI_(pname, param);
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, object param)

        public static
        void GetTexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                GetTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, GLint[] param)

        public static
        void GetTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                GetTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, IntPtr param)

        public static
        void GetTexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            GetTexBumpParameterfvATI_(pname, param);
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, object param)

        public static
        void GetTexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                GetTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        public static
        void GetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                GetTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, IntPtr value)

        public static
        void SetFragmentShaderConstantATI(GLuint dst, IntPtr value)
        {
            SetFragmentShaderConstantATI_(dst, value);
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, object value)

        public static
        void SetFragmentShaderConstantATI(GLuint dst, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                SetFragmentShaderConstantATI_(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)

        public static
        void SetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                SetFragmentShaderConstantATI_(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)

        public static
        GLuint NewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)
        {
            return NewObjectBufferATI_(size, pointer, usage);
        }

        #endregion

        #region NewObjectBufferATI(GLsizei size, object pointer, GLenum usage)

        public static
        GLuint NewObjectBufferATI(GLsizei size, object pointer, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                return NewObjectBufferATI_(size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)

        public static
        void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)
        {
            UpdateObjectBufferATI_(buffer, offset, size, pointer, preserve);
        }

        #endregion

        #region UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)

        public static
        void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                UpdateObjectBufferATI_(buffer, offset, size, h0.AddrOfPinnedObject(), preserve);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)

        public static
        void GetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            GetObjectBufferfvATI_(buffer, pname, parameters);
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)

        public static
        void GetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectBufferfvATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)

        public static
        void GetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectBufferfvATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)

        public static
        void GetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            GetObjectBufferivATI_(buffer, pname, parameters);
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)

        public static
        void GetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectBufferivATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)

        public static
        void GetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetObjectBufferivATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, IntPtr parameters)

        public static
        void GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, IntPtr parameters)
        {
            GetArrayObjectfvATI_(array, pname, parameters);
        }

        #endregion

        #region GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, object parameters)

        public static
        void GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetArrayObjectfvATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, GLfloat[] parameters)

        public static
        void GetArrayObjectfvATI(Enums.EnableCap array, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetArrayObjectfvATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, IntPtr parameters)

        public static
        void GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, IntPtr parameters)
        {
            GetArrayObjectivATI_(array, pname, parameters);
        }

        #endregion

        #region GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, object parameters)

        public static
        void GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetArrayObjectivATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, GLint[] parameters)

        public static
        void GetArrayObjectivATI(Enums.EnableCap array, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetArrayObjectivATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void GetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            GetVariantArrayObjectfvATI_(id, pname, parameters);
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)

        public static
        void GetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVariantArrayObjectfvATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)

        public static
        void GetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVariantArrayObjectfvATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void GetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            GetVariantArrayObjectivATI_(id, pname, parameters);
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)

        public static
        void GetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVariantArrayObjectivATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void GetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVariantArrayObjectivATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetInvariantEXT(GLuint id, GLenum type, IntPtr addr)

        public static
        void SetInvariantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            SetInvariantEXT_(id, type, addr);
        }

        #endregion

        #region SetInvariantEXT(GLuint id, GLenum type, object addr)

        public static
        void SetInvariantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                SetInvariantEXT_(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)

        public static
        void SetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            SetLocalConstantEXT_(id, type, addr);
        }

        #endregion

        #region SetLocalConstantEXT(GLuint id, GLenum type, object addr)

        public static
        void SetLocalConstantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                SetLocalConstantEXT_(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantbvEXT(GLuint id, IntPtr addr)

        public static
        void VariantbvEXT(GLuint id, IntPtr addr)
        {
            VariantbvEXT_(id, addr);
        }

        #endregion

        #region VariantbvEXT(GLuint id, object addr)

        public static
        void VariantbvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantbvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantbvEXT(GLuint id, GLbyte[] addr)

        public static
        void VariantbvEXT(GLuint id, GLbyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantbvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantsvEXT(GLuint id, IntPtr addr)

        public static
        void VariantsvEXT(GLuint id, IntPtr addr)
        {
            VariantsvEXT_(id, addr);
        }

        #endregion

        #region VariantsvEXT(GLuint id, object addr)

        public static
        void VariantsvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantsvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantsvEXT(GLuint id, GLshort[] addr)

        public static
        void VariantsvEXT(GLuint id, GLshort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantsvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantivEXT(GLuint id, IntPtr addr)

        public static
        void VariantivEXT(GLuint id, IntPtr addr)
        {
            VariantivEXT_(id, addr);
        }

        #endregion

        #region VariantivEXT(GLuint id, object addr)

        public static
        void VariantivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantivEXT(GLuint id, GLint[] addr)

        public static
        void VariantivEXT(GLuint id, GLint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantfvEXT(GLuint id, IntPtr addr)

        public static
        void VariantfvEXT(GLuint id, IntPtr addr)
        {
            VariantfvEXT_(id, addr);
        }

        #endregion

        #region VariantfvEXT(GLuint id, object addr)

        public static
        void VariantfvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantfvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantfvEXT(GLuint id, GLfloat[] addr)

        public static
        void VariantfvEXT(GLuint id, GLfloat[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantfvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantdvEXT(GLuint id, IntPtr addr)

        public static
        void VariantdvEXT(GLuint id, IntPtr addr)
        {
            VariantdvEXT_(id, addr);
        }

        #endregion

        #region VariantdvEXT(GLuint id, object addr)

        public static
        void VariantdvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantdvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantdvEXT(GLuint id, GLdouble[] addr)

        public static
        void VariantdvEXT(GLuint id, GLdouble[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantdvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantubvEXT(GLuint id, IntPtr addr)

        public static
        void VariantubvEXT(GLuint id, IntPtr addr)
        {
            VariantubvEXT_(id, addr);
        }

        #endregion

        #region VariantubvEXT(GLuint id, object addr)

        public static
        void VariantubvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantubvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantubvEXT(GLuint id, GLubyte[] addr)

        public static
        void VariantubvEXT(GLuint id, GLubyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantubvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantusvEXT(GLuint id, IntPtr addr)

        public static
        void VariantusvEXT(GLuint id, IntPtr addr)
        {
            VariantusvEXT_(id, addr);
        }

        #endregion

        #region VariantusvEXT(GLuint id, object addr)

        public static
        void VariantusvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantusvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantusvEXT(GLuint id, GLushort[] addr)

        public static
        void VariantusvEXT(GLuint id, GLushort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantusvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantuivEXT(GLuint id, IntPtr addr)

        public static
        void VariantuivEXT(GLuint id, IntPtr addr)
        {
            VariantuivEXT_(id, addr);
        }

        #endregion

        #region VariantuivEXT(GLuint id, object addr)

        public static
        void VariantuivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantuivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantuivEXT(GLuint id, GLuint[] addr)

        public static
        void VariantuivEXT(GLuint id, GLuint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantuivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)

        public static
        void VariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)
        {
            VariantPointerEXT_(id, type, stride, addr);
        }

        #endregion

        #region VariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)

        public static
        void VariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                VariantPointerEXT_(id, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetVariantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void GetVariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)

        public static
        void GetVariantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetVariantIntegervEXT_(id, value, data);
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void GetVariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void GetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetVariantFloatvEXT_(id, value, data);
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void GetVariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void GetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetVariantPointervEXT_(id, value, data);
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, object data)

        public static
        void GetVariantPointervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantPointervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)

        public static
        void GetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetVariantPointervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetInvariantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void GetInvariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)

        public static
        void GetInvariantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetInvariantIntegervEXT_(id, value, data);
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void GetInvariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void GetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetInvariantFloatvEXT_(id, value, data);
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void GetInvariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void GetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetInvariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetLocalConstantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void GetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)

        public static
        void GetLocalConstantBooleanvEXT(GLuint id, GLenum value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetLocalConstantIntegervEXT_(id, value, data);
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void GetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void GetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void GetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            GetLocalConstantFloatvEXT_(id, value, data);
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void GetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void GetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                GetLocalConstantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream1svATI(GLenum stream, IntPtr coords)
        {
            VertexStream1svATI_(stream, coords);
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, object coords)

        public static
        void VertexStream1svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, GLshort[] coords)

        public static
        void VertexStream1svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream1ivATI(GLenum stream, IntPtr coords)
        {
            VertexStream1ivATI_(stream, coords);
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, object coords)

        public static
        void VertexStream1ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, GLint[] coords)

        public static
        void VertexStream1ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream1fvATI(GLenum stream, IntPtr coords)
        {
            VertexStream1fvATI_(stream, coords);
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, object coords)

        public static
        void VertexStream1fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, GLfloat[] coords)

        public static
        void VertexStream1fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream1dvATI(GLenum stream, IntPtr coords)
        {
            VertexStream1dvATI_(stream, coords);
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, object coords)

        public static
        void VertexStream1dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, GLdouble[] coords)

        public static
        void VertexStream1dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream1dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream2svATI(GLenum stream, IntPtr coords)
        {
            VertexStream2svATI_(stream, coords);
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, object coords)

        public static
        void VertexStream2svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, GLshort[] coords)

        public static
        void VertexStream2svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream2ivATI(GLenum stream, IntPtr coords)
        {
            VertexStream2ivATI_(stream, coords);
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, object coords)

        public static
        void VertexStream2ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, GLint[] coords)

        public static
        void VertexStream2ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream2fvATI(GLenum stream, IntPtr coords)
        {
            VertexStream2fvATI_(stream, coords);
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, object coords)

        public static
        void VertexStream2fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, GLfloat[] coords)

        public static
        void VertexStream2fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream2dvATI(GLenum stream, IntPtr coords)
        {
            VertexStream2dvATI_(stream, coords);
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, object coords)

        public static
        void VertexStream2dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, GLdouble[] coords)

        public static
        void VertexStream2dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream2dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream3svATI(GLenum stream, IntPtr coords)
        {
            VertexStream3svATI_(stream, coords);
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, object coords)

        public static
        void VertexStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, GLshort[] coords)

        public static
        void VertexStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream3ivATI(GLenum stream, IntPtr coords)
        {
            VertexStream3ivATI_(stream, coords);
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, object coords)

        public static
        void VertexStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, GLint[] coords)

        public static
        void VertexStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream3fvATI(GLenum stream, IntPtr coords)
        {
            VertexStream3fvATI_(stream, coords);
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, object coords)

        public static
        void VertexStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, GLfloat[] coords)

        public static
        void VertexStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream3dvATI(GLenum stream, IntPtr coords)
        {
            VertexStream3dvATI_(stream, coords);
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, object coords)

        public static
        void VertexStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, GLdouble[] coords)

        public static
        void VertexStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream4svATI(GLenum stream, IntPtr coords)
        {
            VertexStream4svATI_(stream, coords);
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, object coords)

        public static
        void VertexStream4svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, GLshort[] coords)

        public static
        void VertexStream4svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream4ivATI(GLenum stream, IntPtr coords)
        {
            VertexStream4ivATI_(stream, coords);
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, object coords)

        public static
        void VertexStream4ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, GLint[] coords)

        public static
        void VertexStream4ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream4fvATI(GLenum stream, IntPtr coords)
        {
            VertexStream4fvATI_(stream, coords);
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, object coords)

        public static
        void VertexStream4fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, GLfloat[] coords)

        public static
        void VertexStream4fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, IntPtr coords)

        public static
        void VertexStream4dvATI(GLenum stream, IntPtr coords)
        {
            VertexStream4dvATI_(stream, coords);
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, object coords)

        public static
        void VertexStream4dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, GLdouble[] coords)

        public static
        void VertexStream4dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                VertexStream4dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, IntPtr coords)

        public static
        void NormalStream3bvATI(GLenum stream, IntPtr coords)
        {
            NormalStream3bvATI_(stream, coords);
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, object coords)

        public static
        void NormalStream3bvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3bvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, GLbyte[] coords)

        public static
        void NormalStream3bvATI(GLenum stream, GLbyte[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3bvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, IntPtr coords)

        public static
        void NormalStream3svATI(GLenum stream, IntPtr coords)
        {
            NormalStream3svATI_(stream, coords);
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, object coords)

        public static
        void NormalStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, GLshort[] coords)

        public static
        void NormalStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, IntPtr coords)

        public static
        void NormalStream3ivATI(GLenum stream, IntPtr coords)
        {
            NormalStream3ivATI_(stream, coords);
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, object coords)

        public static
        void NormalStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, GLint[] coords)

        public static
        void NormalStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, IntPtr coords)

        public static
        void NormalStream3fvATI(GLenum stream, IntPtr coords)
        {
            NormalStream3fvATI_(stream, coords);
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, object coords)

        public static
        void NormalStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, GLfloat[] coords)

        public static
        void NormalStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, IntPtr coords)

        public static
        void NormalStream3dvATI(GLenum stream, IntPtr coords)
        {
            NormalStream3dvATI_(stream, coords);
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, object coords)

        public static
        void NormalStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, GLdouble[] coords)

        public static
        void NormalStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                NormalStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ElementPointerATI(GLenum type, IntPtr pointer)

        public static
        void ElementPointerATI(GLenum type, IntPtr pointer)
        {
            ElementPointerATI_(type, pointer);
        }

        #endregion

        #region ElementPointerATI(GLenum type, object pointer)

        public static
        void ElementPointerATI(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ElementPointerATI_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, IntPtr ids)

        public static
        void GenOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            GenOcclusionQueriesNV_(n, ids);
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, object ids)

        public static
        void GenOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        public static
        void GenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                GenOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)

        public static
        void DeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            DeleteOcclusionQueriesNV_(n, ids);
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, object ids)

        public static
        void DeleteOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        public static
        void DeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                DeleteOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void GetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            GetOcclusionQueryivNV_(id, pname, parameters);
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)

        public static
        void GetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetOcclusionQueryivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void GetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetOcclusionQueryivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void GetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            GetOcclusionQueryuivNV_(id, pname, parameters);
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)

        public static
        void GetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetOcclusionQueryuivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)

        public static
        void GetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetOcclusionQueryuivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterivNV(GLenum pname, IntPtr parameters)

        public static
        void PointParameterivNV(GLenum pname, IntPtr parameters)
        {
            PointParameterivNV_(pname, parameters);
        }

        #endregion

        #region PointParameterivNV(GLenum pname, object parameters)

        public static
        void PointParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterivNV(GLenum pname, GLint[] parameters)

        public static
        void PointParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                PointParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ElementPointerAPPLE(GLenum type, IntPtr pointer)

        public static
        void ElementPointerAPPLE(GLenum type, IntPtr pointer)
        {
            ElementPointerAPPLE_(type, pointer);
        }

        #endregion

        #region ElementPointerAPPLE(GLenum type, object pointer)

        public static
        void ElementPointerAPPLE(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                ElementPointerAPPLE_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            MultiDrawElementArrayAPPLE_(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, object count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)
        {
            MultiDrawRangeElementArrayAPPLE_(mode, start, end, first, count, primcount);
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                MultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, IntPtr fences)

        public static
        void GenFencesAPPLE(GLsizei n, IntPtr fences)
        {
            GenFencesAPPLE_(n, fences);
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, object fences)

        public static
        void GenFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                GenFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, GLuint[] fences)

        public static
        void GenFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                GenFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, IntPtr fences)

        public static
        void DeleteFencesAPPLE(GLsizei n, IntPtr fences)
        {
            DeleteFencesAPPLE_(n, fences);
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, object fences)

        public static
        void DeleteFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                DeleteFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, GLuint[] fences)

        public static
        void DeleteFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                DeleteFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        public static
        void DeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            DeleteVertexArraysAPPLE_(n, arrays);
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, object arrays)

        public static
        void DeleteVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                DeleteVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        public static
        void DeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                DeleteVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        public static
        void GenVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            GenVertexArraysAPPLE_(n, arrays);
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, object arrays)

        public static
        void GenVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                GenVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        public static
        void GenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                GenVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        public static
        void VertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            VertexArrayRangeAPPLE_(length, pointer);
        }

        #endregion

        #region VertexArrayRangeAPPLE(GLsizei length, object pointer)

        public static
        void VertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                VertexArrayRangeAPPLE_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        public static
        void FlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            FlushVertexArrayRangeAPPLE_(length, pointer);
        }

        #endregion

        #region FlushVertexArrayRangeAPPLE(GLsizei length, object pointer)

        public static
        void FlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                FlushVertexArrayRangeAPPLE_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, IntPtr bufs)

        public static
        void DrawBuffersATI(GLsizei n, IntPtr bufs)
        {
            DrawBuffersATI_(n, bufs);
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, object bufs)

        public static
        void DrawBuffersATI(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffersATI_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, GLenum[] bufs)

        public static
        void DrawBuffersATI(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                DrawBuffersATI_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void ProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            ProgramNamedParameter4fNV_(id, len, name, x, y, z, w);
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void ProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void ProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            ProgramNamedParameter4dNV_(id, len, name, x, y, z, w);
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void ProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            ProgramNamedParameter4fvNV_(id, len, name, v);
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)

        public static
        void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            ProgramNamedParameter4dvNV_(id, len, name, v);
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)

        public static
        void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                ProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            GetProgramNamedParameterfvNV_(id, len, name, parameters);
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)

        public static
        void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            GetProgramNamedParameterdvNV_(id, len, name, parameters);
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)

        public static
        void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Vertex2hvNV(IntPtr v)

        public static
        void Vertex2hvNV(IntPtr v)
        {
            Vertex2hvNV_(v);
        }

        #endregion

        #region Vertex2hvNV(object v)

        public static
        void Vertex2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2hvNV(GLhalfNV[] v)

        public static
        void Vertex2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3hvNV(IntPtr v)

        public static
        void Vertex3hvNV(IntPtr v)
        {
            Vertex3hvNV_(v);
        }

        #endregion

        #region Vertex3hvNV(object v)

        public static
        void Vertex3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3hvNV(GLhalfNV[] v)

        public static
        void Vertex3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4hvNV(IntPtr v)

        public static
        void Vertex4hvNV(IntPtr v)
        {
            Vertex4hvNV_(v);
        }

        #endregion

        #region Vertex4hvNV(object v)

        public static
        void Vertex4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4hvNV(GLhalfNV[] v)

        public static
        void Vertex4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Vertex4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3hvNV(IntPtr v)

        public static
        void Normal3hvNV(IntPtr v)
        {
            Normal3hvNV_(v);
        }

        #endregion

        #region Normal3hvNV(object v)

        public static
        void Normal3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3hvNV(GLhalfNV[] v)

        public static
        void Normal3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Normal3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3hvNV(IntPtr v)

        public static
        void Color3hvNV(IntPtr v)
        {
            Color3hvNV_(v);
        }

        #endregion

        #region Color3hvNV(object v)

        public static
        void Color3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3hvNV(GLhalfNV[] v)

        public static
        void Color3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4hvNV(IntPtr v)

        public static
        void Color4hvNV(IntPtr v)
        {
            Color4hvNV_(v);
        }

        #endregion

        #region Color4hvNV(object v)

        public static
        void Color4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4hvNV(GLhalfNV[] v)

        public static
        void Color4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Color4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1hvNV(IntPtr v)

        public static
        void TexCoord1hvNV(IntPtr v)
        {
            TexCoord1hvNV_(v);
        }

        #endregion

        #region TexCoord1hvNV(object v)

        public static
        void TexCoord1hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1hvNV(GLhalfNV[] v)

        public static
        void TexCoord1hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord1hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2hvNV(IntPtr v)

        public static
        void TexCoord2hvNV(IntPtr v)
        {
            TexCoord2hvNV_(v);
        }

        #endregion

        #region TexCoord2hvNV(object v)

        public static
        void TexCoord2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2hvNV(GLhalfNV[] v)

        public static
        void TexCoord2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3hvNV(IntPtr v)

        public static
        void TexCoord3hvNV(IntPtr v)
        {
            TexCoord3hvNV_(v);
        }

        #endregion

        #region TexCoord3hvNV(object v)

        public static
        void TexCoord3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3hvNV(GLhalfNV[] v)

        public static
        void TexCoord3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4hvNV(IntPtr v)

        public static
        void TexCoord4hvNV(IntPtr v)
        {
            TexCoord4hvNV_(v);
        }

        #endregion

        #region TexCoord4hvNV(object v)

        public static
        void TexCoord4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4hvNV(GLhalfNV[] v)

        public static
        void TexCoord4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                TexCoord4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, IntPtr v)

        public static
        void MultiTexCoord1hvNV(GLenum target, IntPtr v)
        {
            MultiTexCoord1hvNV_(target, v);
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, object v)

        public static
        void MultiTexCoord1hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)

        public static
        void MultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord1hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, IntPtr v)

        public static
        void MultiTexCoord2hvNV(GLenum target, IntPtr v)
        {
            MultiTexCoord2hvNV_(target, v);
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, object v)

        public static
        void MultiTexCoord2hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)

        public static
        void MultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord2hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, IntPtr v)

        public static
        void MultiTexCoord3hvNV(GLenum target, IntPtr v)
        {
            MultiTexCoord3hvNV_(target, v);
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, object v)

        public static
        void MultiTexCoord3hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)

        public static
        void MultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord3hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, IntPtr v)

        public static
        void MultiTexCoord4hvNV(GLenum target, IntPtr v)
        {
            MultiTexCoord4hvNV_(target, v);
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, object v)

        public static
        void MultiTexCoord4hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)

        public static
        void MultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                MultiTexCoord4hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordhvNV(IntPtr fog)

        public static
        void FogCoordhvNV(IntPtr fog)
        {
            FogCoordhvNV_(fog);
        }

        #endregion

        #region FogCoordhvNV(object fog)

        public static
        void FogCoordhvNV(object fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                FogCoordhvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordhvNV(GLhalfNV[] fog)

        public static
        void FogCoordhvNV(GLhalfNV[] fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                FogCoordhvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3hvNV(IntPtr v)

        public static
        void SecondaryColor3hvNV(IntPtr v)
        {
            SecondaryColor3hvNV_(v);
        }

        #endregion

        #region SecondaryColor3hvNV(object v)

        public static
        void SecondaryColor3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3hvNV(GLhalfNV[] v)

        public static
        void SecondaryColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                SecondaryColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeighthvNV(IntPtr weight)

        public static
        void VertexWeighthvNV(IntPtr weight)
        {
            VertexWeighthvNV_(weight);
        }

        #endregion

        #region VertexWeighthvNV(object weight)

        public static
        void VertexWeighthvNV(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                VertexWeighthvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeighthvNV(GLhalfNV[] weight)

        public static
        void VertexWeighthvNV(GLhalfNV[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                VertexWeighthvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib1hvNV(GLuint index, IntPtr v)
        {
            VertexAttrib1hvNV_(index, v);
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, object v)

        public static
        void VertexAttrib1hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, GLhalfNV[] v)

        public static
        void VertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib1hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib2hvNV(GLuint index, IntPtr v)
        {
            VertexAttrib2hvNV_(index, v);
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, object v)

        public static
        void VertexAttrib2hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, GLhalfNV[] v)

        public static
        void VertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib2hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib3hvNV(GLuint index, IntPtr v)
        {
            VertexAttrib3hvNV_(index, v);
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, object v)

        public static
        void VertexAttrib3hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, GLhalfNV[] v)

        public static
        void VertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib3hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, IntPtr v)

        public static
        void VertexAttrib4hvNV(GLuint index, IntPtr v)
        {
            VertexAttrib4hvNV_(index, v);
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, object v)

        public static
        void VertexAttrib4hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, GLhalfNV[] v)

        public static
        void VertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttrib4hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void VertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            VertexAttribs1hvNV_(index, n, v);
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, object v)

        public static
        void VertexAttribs1hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs1hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void VertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            VertexAttribs2hvNV_(index, n, v);
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, object v)

        public static
        void VertexAttribs2hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs2hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void VertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            VertexAttribs3hvNV_(index, n, v);
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, object v)

        public static
        void VertexAttribs3hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs3hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void VertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            VertexAttribs4hvNV_(index, n, v);
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, object v)

        public static
        void VertexAttribs4hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                VertexAttribs4hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)

        public static
        void PixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)
        {
            PixelDataRangeNV_(target, length, pointer);
        }

        #endregion

        #region PixelDataRangeNV(GLenum target, GLsizei length, object pointer)

        public static
        void PixelDataRangeNV(GLenum target, GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                PixelDataRangeNV_(target, length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribArrayObjectfvATI_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribArrayObjectfvATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribArrayObjectfvATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            GetVertexAttribArrayObjectivATI_(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)

        public static
        void GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribArrayObjectivATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetVertexAttribArrayObjectivATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        public static
        void DeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            DeleteRenderbuffersEXT_(n, renderbuffers);
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, object renderbuffers)

        public static
        void DeleteRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                DeleteRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        public static
        void DeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                DeleteRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        public static
        void GenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            GenRenderbuffersEXT_(n, renderbuffers);
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, object renderbuffers)

        public static
        void GenRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                GenRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        public static
        void GenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                GenRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, IntPtr parameters)

        public static
        void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, IntPtr parameters)
        {
            GetRenderbufferParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, object parameters)

        public static
        void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetRenderbufferParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, GLint[] parameters)

        public static
        void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetRenderbufferParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        public static
        void DeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            DeleteFramebuffersEXT_(n, framebuffers);
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, object framebuffers)

        public static
        void DeleteFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                DeleteFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        public static
        void DeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                DeleteFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        public static
        void GenFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            GenFramebuffersEXT_(n, framebuffers);
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, object framebuffers)

        public static
        void GenFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                GenFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        public static
        void GenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                GenFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, IntPtr parameters)

        public static
        void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, IntPtr parameters)
        {
            GetFramebufferAttachmentParameterivEXT_(target, attachment, pname, parameters);
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, object parameters)

        public static
        void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFramebufferAttachmentParameterivEXT_(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, GLint[] parameters)

        public static
        void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetFramebufferAttachmentParameterivEXT_(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region StringMarkerGREMEDY(GLsizei len, IntPtr @string)

        public static
        void StringMarkerGREMEDY(GLsizei len, IntPtr @string)
        {
            StringMarkerGREMEDY_(len, @string);
        }

        #endregion

        #region StringMarkerGREMEDY(GLsizei len, object @string)

        public static
        void StringMarkerGREMEDY(GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                StringMarkerGREMEDY_(len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters)

        public static
        void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters)
        {
            GetQueryObjecti64vEXT_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, object parameters)

        public static
        void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjecti64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, GLint64[] parameters)

        public static
        void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, GLint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjecti64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters)

        public static
        void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, IntPtr parameters)
        {
            GetQueryObjectui64vEXT_(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, object parameters)

        public static
        void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectui64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, GLuint64[] parameters)

        public static
        void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, GLuint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                GetQueryObjectui64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        public static
        void ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            ProgramEnvParameters4fvEXT_(target, index, count, parameters);
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        public static
        void ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        public static
        void ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramEnvParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        public static
        void ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            ProgramLocalParameters4fvEXT_(target, index, count, parameters);
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        public static
        void ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        public static
        void ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                ProgramLocalParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #endregion
        }
    }
}

